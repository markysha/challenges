Ответы лежат в outputs/best/ans_{1,2,3}
Решения в markysha/*
Чекер в lib/common.cpp

Решение челленжа

1. Изучил размеры графов, кол-во вершин, ребер. Посчитал диаметры
2. Написал чекер для подсчета скора 
3. Написал какие-то простые жадности, получил в сумме 0.2-0.3
4. Заметил что модулярность и регуляризация в каком-то смысле противоположны друг другу
5. Интуитивно надо выделять почти клики в качестве кластеров, и размеры кластеров должны быть похожи
6. Написал 1 алгоритм fast.cpp
   Алгоритм:
   Сначала каждая вершина лежит в своем кластере
   На каждом шаге мы ищем в графе паросочетание
      Паросочетание:
      Начал с рандомного
      Закончил тем что для каждой вершины выбирал в пару такую, чтобы у них было наибольшее количество одинаковых вершин в списках смежности
   Вершины из паросочетания сжимаем в одну
   Повторяем пока полностью не сожмется граф, или не будет паросочетания улучшающего ответ
   
   Получил в итоге 1.8-1.9 балла (очень хорошо отработало на 1 графе, на остальных модулярность была маленькая)
7. Написал 2 алгоритм multilevel.cpp
   Алгоритм:
   Сначала каждая вершина лежит в своем кластере
   На каждом шаге мы берем вершину с минимальным количеством ребер
   Ищем ей в пару ту вершину, которая сильнее увеличит модулярность итогового разбиения
   Соединяем две вершины в одну, ребра тоже сжимаем
   Продолжаем пока ответ улучшается
   
   Получил в итоге 2.3 балла (на 1 графе ответ находился намного хуже, на 2 и 3 куда лучше)
8. Зачем строить разбиение с нуля? Можно улучшать уже имеющееся
   Написал enhancer.cpp
   Алгоритм:
   Берем готовое разбиение
   Для каждой вершины смотрим как изменится ответ если мы ее переместим в соседний кластере
   Выбираем вершину которая лучше всего улучшит ответ
   Перемещаем эту вершину
   Повторяем пока улучшается ответ

   Плюс:
   Учитывается и регуляризация и модулярность. Так как количество кластеров не изменяется, то можно легко пересчитывать регуляризацию и модулярность

   Набрало 2.4-2.5 балла в связке с предыдущими алгоритмами
9. Проблема 8 пункта в том что мы всегда приходим в локальный максимум и никак не можем из него выйти
   Нужно модифицировать метод чтобы мы выходили из локального максимума, но не очень сильно
   Вспоминую про метод оптимизации отжига
   Небольшая модификация алгоритма из 8 пункта и вуаля
   2.6
   2.84
   2.95
   2.97
   2.99
   3
   Пробовал разные константы и шаги, смотрел где лучше изменяется, и постепенно улучшил ответы до 3 баллов

10.В итоге
   Два быстрых алгоритма, которые набирают почти 2.5 балла за несколько минут (а если еще соптимизировать то возможно можно еще ускорить)
   Метод локальной оптимизации который при должном подборе параметров значительно улучшает ответ

   Итоговые баллы: 
   1.graph
   modularity: 0.70219150
   regularization: 0.48499141
   SCORE = 1.18718291
   
   2.graph
   modularity: 0.39159772
   regularization: 0.48936072
   SCORE = 0.88095844

   3.graph
   modularity: 0.47637880
   regularization: 0.45832628
   SCORE = 0.93470508
   
   1.1871 + 0.8809 + 0.9347 = 3.0027

Дополнение:
1. Потестировал опенсорс коды для поиска кластеризации максимизирующей модулярность
   https://github.com/eXascaleInfolab/CGGC

   https://github.com/dlasalle/nerstrand

   https://github.com/kit-algo/distributed_clustering_thrill

   Все они работают небыстро и только учитывают модуляность, и набирают в итоге без каких либо модификаций в районе 2-2.1 баллов
2. Прочитал несколько статей по теме кластеризации графов
   Из того что вспомнил: 
   https://en.m.wikipedia.org/wiki/Louvain_modularity
   https://iopscience.iop.org/article/10.1088/1742-5468/2008/10/P10008/meta
   https://janders.eecg.utoronto.ca/1387/readings/kl.pdf

   Из статей подхватил некоторые идеи направления мыслей


