<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#CBCBCB" offset="5%" />
		<stop stop-color="#BABABA" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="726.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="709" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="709" > </text>
<g id="frames">
<g >
<title>new_sync_read (28 samples, 0.05%)</title><rect x="110.0" y="389" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (237 samples, 0.44%)</title><rect x="576.5" y="437" width="5.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="579.48" y="447.5" ></text>
</g>
<g >
<title>__vfs_read (28 samples, 0.05%)</title><rect x="110.0" y="405" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (64 samples, 0.12%)</title><rect x="590.9" y="421" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="593.87" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (262 samples, 0.49%)</title><rect x="576.3" y="453" width="5.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="579.28" y="463.5" ></text>
</g>
<g >
<title>MPI_Probe (519 samples, 0.97%)</title><rect x="970.1" y="501" width="11.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="973.06" y="511.5" ></text>
</g>
<g >
<title>shmem_fault (5 samples, 0.01%)</title><rect x="110.8" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.80" y="431.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="227.0" y="85" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.03" y="95.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (7 samples, 0.01%)</title><rect x="108.3" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.29" y="207.5" ></text>
</g>
<g >
<title>prep_new_page (24 samples, 0.04%)</title><rect x="1160.5" y="309" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1163.51" y="319.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (227 samples, 0.42%)</title><rect x="114.0" y="437" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::construct&lt;unsigned long long, unsigned long long&gt; (10 samples, 0.02%)</title><rect x="431.8" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="434.77" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::find (47 samples, 0.09%)</title><rect x="346.2" y="453" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="349.21" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::size (8 samples, 0.01%)</title><rect x="222.6" y="101" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="225.60" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (9 samples, 0.02%)</title><rect x="790.4" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="793.36" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (5 samples, 0.01%)</title><rect x="396.0" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.96" y="447.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (9 samples, 0.02%)</title><rect x="683.9" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.89" y="303.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (7 samples, 0.01%)</title><rect x="15.1" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="300.6" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.58" y="447.5" ></text>
</g>
<g >
<title>prep_new_page (8 samples, 0.01%)</title><rect x="610.3" y="261" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.29" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (8 samples, 0.01%)</title><rect x="468.7" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="471.72" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (170 samples, 0.32%)</title><rect x="350.2" y="469" width="3.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="353.15" y="479.5" ></text>
</g>
<g >
<title>__libc_read (19 samples, 0.04%)</title><rect x="108.4" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="479.5" ></text>
</g>
<g >
<title>__GI___sbrk (5 samples, 0.01%)</title><rect x="611.3" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="614.33" y="367.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (102 samples, 0.19%)</title><rect x="693.5" y="341" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="696.46" y="351.5" ></text>
</g>
<g >
<title>ghost_node_communication::receive_messages_of_neighbors (535 samples, 1.00%)</title><rect x="970.0" y="517" width="11.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="973.04" y="527.5" ></text>
</g>
<g >
<title>initial_partition_bipartition::initial_partition (1,384 samples, 2.59%)</title><rect x="200.1" y="389" width="30.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.07" y="399.5" >in..</text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (13 samples, 0.02%)</title><rect x="1164.7" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.67" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (138 samples, 0.26%)</title><rect x="965.5" y="437" width="3.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="968.46" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (10 samples, 0.02%)</title><rect x="328.2" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="331.16" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::resize (11 samples, 0.02%)</title><rect x="513.2" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.22" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (32 samples, 0.06%)</title><rect x="292.1" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.09" y="495.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned long long const&amp;&gt; (15 samples, 0.03%)</title><rect x="1133.3" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1136.29" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::allocate (8 samples, 0.01%)</title><rect x="242.4" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.39" y="447.5" ></text>
</g>
<g >
<title>maxNodeHeap::decreaseKey (6 samples, 0.01%)</title><rect x="220.0" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="223.04" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (5 samples, 0.01%)</title><rect x="519.5" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="522.55" y="463.5" ></text>
</g>
<g >
<title>clear_page_erms (10 samples, 0.02%)</title><rect x="584.0" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="587.04" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (17 samples, 0.03%)</title><rect x="406.3" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.27" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (57 samples, 0.11%)</title><rect x="549.3" y="437" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="552.35" y="447.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (85 samples, 0.16%)</title><rect x="223.3" y="165" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="226.28" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::_M_range_check (10 samples, 0.02%)</title><rect x="212.7" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.72" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (5 samples, 0.01%)</title><rect x="587.4" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="590.39" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (5 samples, 0.01%)</title><rect x="205.5" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.47" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (10 samples, 0.02%)</title><rect x="269.0" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.95" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (38 samples, 0.07%)</title><rect x="407.7" y="501" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="410.68" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (16 samples, 0.03%)</title><rect x="243.3" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="246.27" y="367.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (12 samples, 0.02%)</title><rect x="95.0" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="97.97" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (8 samples, 0.01%)</title><rect x="335.9" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="338.91" y="495.5" ></text>
</g>
<g >
<title>parallel_label_compress&lt;linear_probing_hashmap&gt;::perform_parallel_label_compression (2,377 samples, 4.44%)</title><rect x="303.2" y="549" width="52.4" height="15.0" fill="rgb(0,255,34)" rx="2" ry="2" />
<text  x="306.16" y="559.5" >paral..</text>
</g>
<g >
<title>prep_new_page (9 samples, 0.02%)</title><rect x="1164.4" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.43" y="207.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (24 samples, 0.04%)</title><rect x="1115.5" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.54" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (17 samples, 0.03%)</title><rect x="965.0" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="968.02" y="447.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, unsigned long long*, unsigned long long*&gt; (56 samples, 0.10%)</title><rect x="512.0" y="421" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.99" y="431.5" ></text>
</g>
<g >
<title>__schedule (8 samples, 0.01%)</title><rect x="139.3" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, bool&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (8 samples, 0.01%)</title><rect x="407.2" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="410.22" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (157 samples, 0.29%)</title><rect x="953.1" y="405" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="956.14" y="415.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (13 samples, 0.02%)</title><rect x="14.5" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.54" y="479.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (117 samples, 0.22%)</title><rect x="122.3" y="389" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (15 samples, 0.03%)</title><rect x="329.8" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="332.83" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_M_next (33 samples, 0.06%)</title><rect x="298.3" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="301.29" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::erase (380 samples, 0.71%)</title><rect x="928.2" y="469" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="931.16" y="479.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (15 samples, 0.03%)</title><rect x="403.2" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.21" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::operator (32 samples, 0.06%)</title><rect x="621.2" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="624.16" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="426.6" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="429.57" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (36 samples, 0.07%)</title><rect x="587.8" y="405" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="590.79" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (8 samples, 0.01%)</title><rect x="102.4" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="105.44" y="639.5" ></text>
</g>
<g >
<title>native_write_msr (6 samples, 0.01%)</title><rect x="1171.9" y="261" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.93" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (116 samples, 0.22%)</title><rect x="395.3" y="517" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.34" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (28 samples, 0.05%)</title><rect x="150.5" y="293" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="153.47" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10 samples, 0.02%)</title><rect x="92.3" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="95.28" y="639.5" ></text>
</g>
<g >
<title>__lock_page_killable (7 samples, 0.01%)</title><rect x="111.5" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="415.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (16 samples, 0.03%)</title><rect x="243.3" y="325" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="246.27" y="335.5" ></text>
</g>
<g >
<title>complete_boundary::contains (5 samples, 0.01%)</title><rect x="225.4" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.42" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (62 samples, 0.12%)</title><rect x="792.8" y="485" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="795.82" y="495.5" ></text>
</g>
<g >
<title>get_page_from_freelist (9 samples, 0.02%)</title><rect x="1146.0" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.98" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;unsigned long long const&amp;&gt; &gt; (7 samples, 0.01%)</title><rect x="620.2" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="623.17" y="463.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (20 samples, 0.04%)</title><rect x="214.5" y="197" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="217.51" y="207.5" ></text>
</g>
<g >
<title>mpi_tools::collect_parallel_graph_to_local_graph (175 samples, 0.33%)</title><rect x="238.8" y="517" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.84" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (134 samples, 0.25%)</title><rect x="799.1" y="533" width="2.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="802.08" y="543.5" ></text>
</g>
<g >
<title>page_fault (10 samples, 0.02%)</title><rect x="1142.2" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.21" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (29 samples, 0.05%)</title><rect x="119.0" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (6 samples, 0.01%)</title><rect x="554.4" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="557.35" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (248 samples, 0.46%)</title><rect x="546.1" y="485" width="5.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="549.06" y="495.5" ></text>
</g>
<g >
<title>free_unref_page_commit (10 samples, 0.02%)</title><rect x="1189.2" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.23" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (7 samples, 0.01%)</title><rect x="166.9" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="169.90" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_default_append (6 samples, 0.01%)</title><rect x="242.6" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.57" y="495.5" ></text>
</g>
<g >
<title>__do_page_fault (45 samples, 0.08%)</title><rect x="610.0" y="357" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.01" y="367.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt;::operator++ (6 samples, 0.01%)</title><rect x="503.3" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="506.30" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (5 samples, 0.01%)</title><rect x="210.1" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.05" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, bool&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.01%)</title><rect x="266.0" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.04" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_begin (5 samples, 0.01%)</title><rect x="159.2" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="162.20" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (49 samples, 0.09%)</title><rect x="538.7" y="485" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="541.75" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (7 samples, 0.01%)</title><rect x="335.9" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="338.94" y="479.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__const_get&lt;unsigned long long const, long&gt; (6 samples, 0.01%)</title><rect x="592.2" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="595.15" y="399.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (7 samples, 0.01%)</title><rect x="1041.9" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (28 samples, 0.05%)</title><rect x="695.0" y="309" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="698.05" y="319.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (36 samples, 0.07%)</title><rect x="108.9" y="229" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.90" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3,103 samples, 5.80%)</title><rect x="554.5" y="501" width="68.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="557.48" y="511.5" >std::__..</text>
</g>
<g >
<title>[libmpich.so.0.0.0] (519 samples, 0.97%)</title><rect x="970.1" y="469" width="11.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="973.06" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (39 samples, 0.07%)</title><rect x="531.3" y="549" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="534.25" y="559.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::hash (31 samples, 0.06%)</title><rect x="310.6" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="313.63" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;::allocate (12 samples, 0.02%)</title><rect x="302.8" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="305.81" y="447.5" ></text>
</g>
<g >
<title>ghost_node_communication::update_ghost_node_data_finish (178 samples, 0.33%)</title><rect x="350.2" y="517" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="353.15" y="527.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::clear (158 samples, 0.30%)</title><rect x="304.7" y="517" width="3.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="307.66" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="1112.5" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1115.52" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::_S_buffer_size (110 samples, 0.21%)</title><rect x="643.3" y="469" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="646.27" y="479.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10 samples, 0.02%)</title><rect x="610.3" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.27" y="303.5" ></text>
</g>
<g >
<title>vfs_read (26 samples, 0.05%)</title><rect x="107.6" y="373" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (8 samples, 0.01%)</title><rect x="214.0" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="216.96" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (36 samples, 0.07%)</title><rect x="936.9" y="437" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="939.94" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;::_M_v (7 samples, 0.01%)</title><rect x="135.8" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="138.82" y="303.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (15 samples, 0.03%)</title><rect x="398.0" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="401.01" y="511.5" ></text>
</g>
<g >
<title>handle_mm_fault (39 samples, 0.07%)</title><rect x="610.1" y="341" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.10" y="351.5" ></text>
</g>
<g >
<title>[mpiexec.hydra] (31 samples, 0.06%)</title><rect x="14.3" y="565" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.32" y="575.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;*&gt; (24 samples, 0.04%)</title><rect x="409.9" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="495.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.02%)</title><rect x="205.6" y="101" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="111.5" ></text>
</g>
<g >
<title>sock_read_iter (28 samples, 0.05%)</title><rect x="110.0" y="373" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (239 samples, 0.45%)</title><rect x="929.5" y="421" width="5.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="932.51" y="431.5" ></text>
</g>
<g >
<title>_int_malloc (7 samples, 0.01%)</title><rect x="344.4" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="347.38" y="399.5" ></text>
</g>
<g >
<title>two_way_fm::move_node_back (88 samples, 0.16%)</title><rect x="213.1" y="229" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="216.10" y="239.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (13 samples, 0.02%)</title><rect x="267.7" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="270.74" y="479.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (24 samples, 0.04%)</title><rect x="685.5" y="293" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="688.52" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (16 samples, 0.03%)</title><rect x="1155.3" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1158.28" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (7 samples, 0.01%)</title><rect x="244.8" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="247.84" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (19 samples, 0.04%)</title><rect x="108.4" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="447.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;NodeData*&gt;, NodeData*&gt; (87 samples, 0.16%)</title><rect x="1146.9" y="485" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.86" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (6 samples, 0.01%)</title><rect x="552.6" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="555.61" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (16 samples, 0.03%)</title><rect x="623.8" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="626.78" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;KeyValuePair, std::allocator&lt;KeyValuePair&gt; &gt;::operator[] (22 samples, 0.04%)</title><rect x="74.4" y="629" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="77.41" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long long*, unsigned long&gt; (11 samples, 0.02%)</title><rect x="513.2" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.22" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (29 samples, 0.05%)</title><rect x="419.3" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="422.32" y="447.5" ></text>
</g>
<g >
<title>contraction::contract (24 samples, 0.04%)</title><rect x="215.1" y="277" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="287.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.01%)</title><rect x="1170.1" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="495.5" ></text>
</g>
<g >
<title>__schedule (27 samples, 0.05%)</title><rect x="110.0" y="277" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.00" y="287.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, long&gt;&amp;&gt; (7 samples, 0.01%)</title><rect x="324.2" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="327.17" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned long long*, unsigned long, unsigned long long&gt; (10 samples, 0.02%)</title><rect x="969.3" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.31" y="479.5" ></text>
</g>
<g >
<title>parallel_graph_access::is_local_node (11 samples, 0.02%)</title><rect x="429.5" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="432.46" y="543.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_M_head (5 samples, 0.01%)</title><rect x="48.8" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="51.77" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (386 samples, 0.72%)</title><rect x="256.5" y="501" width="8.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="259.50" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (19 samples, 0.04%)</title><rect x="405.3" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="408.26" y="479.5" ></text>
</g>
<g >
<title>elf_machine_rela_relative (25 samples, 0.05%)</title><rect x="1171.4" y="533" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.35" y="543.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long long const, long&gt; (8 samples, 0.01%)</title><rect x="571.4" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="574.39" y="399.5" ></text>
</g>
<g >
<title>clear_page_erms (20 samples, 0.04%)</title><rect x="111.8" y="389" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.79" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::~unordered_map (157 samples, 0.29%)</title><rect x="296.5" y="533" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="543.5" ></text>
</g>
<g >
<title>handle_mm_fault (34 samples, 0.06%)</title><rect x="1147.7" y="325" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.68" y="335.5" ></text>
</g>
<g >
<title>[unknown] (6 samples, 0.01%)</title><rect x="13.7" y="645" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.70" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (8 samples, 0.01%)</title><rect x="545.8" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="548.84" y="479.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (34 samples, 0.06%)</title><rect x="701.0" y="373" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="704.04" y="383.5" ></text>
</g>
<g >
<title>parallel_graph_access::setNodeLabel (52 samples, 0.10%)</title><rect x="925.6" y="501" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="928.65" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (79 samples, 0.15%)</title><rect x="773.5" y="405" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="776.47" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (7 samples, 0.01%)</title><rect x="206.2" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.24" y="255.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (6 samples, 0.01%)</title><rect x="513.1" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.09" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (437 samples, 0.82%)</title><rect x="475.7" y="485" width="9.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="478.75" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (6 samples, 0.01%)</title><rect x="216.0" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.05" y="223.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (12 samples, 0.02%)</title><rect x="212.1" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.06" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (29 samples, 0.05%)</title><rect x="485.7" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="488.69" y="495.5" ></text>
</g>
<g >
<title>__do_fault (8 samples, 0.01%)</title><rect x="994.3" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="431.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (37 samples, 0.07%)</title><rect x="706.1" y="389" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="709.09" y="399.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::_Bit_iterator (14 samples, 0.03%)</title><rect x="1052.9" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1055.94" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::find (11 samples, 0.02%)</title><rect x="217.2" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.17" y="175.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (6 samples, 0.01%)</title><rect x="206.0" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.02" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::destroy&lt;unsigned long long&gt; (5 samples, 0.01%)</title><rect x="305.8" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="308.80" y="479.5" ></text>
</g>
<g >
<title>_int_malloc (6 samples, 0.01%)</title><rect x="263.8" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="266.77" y="415.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__const_get&lt;unsigned long long const, long&gt; (9 samples, 0.02%)</title><rect x="581.3" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="584.29" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_addr (7 samples, 0.01%)</title><rect x="570.2" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="573.24" y="383.5" ></text>
</g>
<g >
<title>x86_pmu_enable (9 samples, 0.02%)</title><rect x="1189.8" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.76" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (62 samples, 0.12%)</title><rect x="314.8" y="469" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="317.75" y="479.5" ></text>
</g>
<g >
<title>smp_irq_work_interrupt (5 samples, 0.01%)</title><rect x="1167.7" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1170.67" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="832.2" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="835.21" y="463.5" ></text>
</g>
<g >
<title>_dl_start_final (9 samples, 0.02%)</title><rect x="13.9" y="613" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.92" y="623.5" ></text>
</g>
<g >
<title>std::copy&lt;std::move_iterator&lt;AdditionalNonLocalNodeData*&gt;, AdditionalNonLocalNodeData*&gt; (25 samples, 0.05%)</title><rect x="1138.6" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.64" y="463.5" ></text>
</g>
<g >
<title>handle_fasteoi_irq (6 samples, 0.01%)</title><rect x="922.6" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.56" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;unsigned long long*&gt;, unsigned long long*&gt; (56 samples, 0.10%)</title><rect x="512.0" y="453" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.99" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (11 samples, 0.02%)</title><rect x="242.3" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.32" y="511.5" ></text>
</g>
<g >
<title>search_binary_handler (12 samples, 0.02%)</title><rect x="1189.7" y="581" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.74" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (7 samples, 0.01%)</title><rect x="245.0" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="247.99" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (16 samples, 0.03%)</title><rect x="344.6" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="347.58" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="838.9" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="841.87" y="447.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (22 samples, 0.04%)</title><rect x="213.7" y="197" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="216.69" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (8 samples, 0.01%)</title><rect x="395.6" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.56" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;::deallocate (29 samples, 0.05%)</title><rect x="299.2" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="302.21" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt;::allocate (96 samples, 0.18%)</title><rect x="1128.4" y="485" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1131.39" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (210 samples, 0.39%)</title><rect x="568.3" y="453" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="571.28" y="463.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (5 samples, 0.01%)</title><rect x="15.4" y="565" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.42" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::at (16 samples, 0.03%)</title><rect x="167.3" y="357" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="170.34" y="367.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (6 samples, 0.01%)</title><rect x="1171.9" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.93" y="303.5" ></text>
</g>
<g >
<title>complete_boundary::build_from_coarser (60 samples, 0.11%)</title><rect x="205.1" y="293" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.14" y="303.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (18 samples, 0.03%)</title><rect x="994.5" y="565" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.53" y="575.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (12 samples, 0.02%)</title><rect x="111.4" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.44" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (376 samples, 0.70%)</title><rect x="444.1" y="517" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="447.07" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (179 samples, 0.33%)</title><rect x="837.0" y="501" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="839.97" y="511.5" ></text>
</g>
<g >
<title>native_write_msr (8 samples, 0.01%)</title><rect x="1170.1" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="335.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (20 samples, 0.04%)</title><rect x="403.2" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.21" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_Hash_node_value_base (6 samples, 0.01%)</title><rect x="603.0" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="605.95" y="479.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (11 samples, 0.02%)</title><rect x="1145.9" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.94" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::UNSAFE_metis_style_adjncy_array (35 samples, 0.07%)</title><rect x="246.0" y="517" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="249.03" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt;::_M_next (15 samples, 0.03%)</title><rect x="532.2" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.20" y="495.5" ></text>
</g>
<g >
<title>std::_Bit_iterator_base::_Bit_iterator_base (6 samples, 0.01%)</title><rect x="525.0" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="528.03" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (5 samples, 0.01%)</title><rect x="470.0" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.97" y="431.5" ></text>
</g>
<g >
<title>operator new (10 samples, 0.02%)</title><rect x="675.2" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="678.19" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (8 samples, 0.01%)</title><rect x="1150.6" y="549" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1153.57" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const&amp;&gt; (45 samples, 0.08%)</title><rect x="617.0" y="405" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="620.04" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (380 samples, 0.71%)</title><rect x="948.2" y="437" width="8.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="951.22" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (13 samples, 0.02%)</title><rect x="346.9" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="349.91" y="399.5" ></text>
</g>
<g >
<title>two_way_fm::assert_only_boundary_nodes (22 samples, 0.04%)</title><rect x="210.5" y="213" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.49" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_M_next (5 samples, 0.01%)</title><rect x="582.1" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="585.06" y="463.5" ></text>
</g>
<g >
<title>filemap_fault (8 samples, 0.01%)</title><rect x="1171.9" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (24 samples, 0.04%)</title><rect x="793.7" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="796.66" y="463.5" ></text>
</g>
<g >
<title>alloc_pages_vma (8 samples, 0.01%)</title><rect x="1163.0" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.98" y="367.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (54 samples, 0.10%)</title><rect x="352.7" y="437" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="355.71" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_free (18 samples, 0.03%)</title><rect x="835.1" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="838.08" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (33 samples, 0.06%)</title><rect x="1147.7" y="309" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.70" y="319.5" ></text>
</g>
<g >
<title>edge_ratings::rate_expansion_star_2 (126 samples, 0.24%)</title><rect x="165.3" y="389" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="168.26" y="399.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long long&gt;::operator (15 samples, 0.03%)</title><rect x="68.3" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="71.28" y="639.5" ></text>
</g>
<g >
<title>do_lookup_x (5 samples, 0.01%)</title><rect x="1171.2" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.24" y="511.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (6 samples, 0.01%)</title><rect x="404.0" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="407.02" y="463.5" ></text>
</g>
<g >
<title>__schedule (8 samples, 0.01%)</title><rect x="994.3" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (404 samples, 0.75%)</title><rect x="936.6" y="453" width="9.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="939.65" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;::~unordered_map (6 samples, 0.01%)</title><rect x="266.0" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.04" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.01%)</title><rect x="395.2" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.23" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_read (26 samples, 0.05%)</title><rect x="107.6" y="405" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (96 samples, 0.18%)</title><rect x="1151.3" y="533" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1154.32" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 0.01%)</title><rect x="1170.1" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (202 samples, 0.38%)</title><rect x="1060.4" y="517" width="4.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1063.44" y="527.5" ></text>
</g>
<g >
<title>__GI___libc_free (19 samples, 0.04%)</title><rect x="504.6" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.65" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (43 samples, 0.08%)</title><rect x="839.2" y="437" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="842.20" y="447.5" ></text>
</g>
<g >
<title>mmput (48 samples, 0.09%)</title><rect x="1176.0" y="533" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (14 samples, 0.03%)</title><rect x="71.6" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="74.61" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (50 samples, 0.09%)</title><rect x="347.6" y="405" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="350.64" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeWeight (6 samples, 0.01%)</title><rect x="523.4" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="526.43" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::_M_allocate (19 samples, 0.04%)</title><rect x="501.8" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="504.76" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (102 samples, 0.19%)</title><rect x="300.9" y="501" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.91" y="511.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long long*, unsigned long, unsigned long long&gt; (10 samples, 0.02%)</title><rect x="969.3" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.31" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (20 samples, 0.04%)</title><rect x="221.7" y="133" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="224.74" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (6 samples, 0.01%)</title><rect x="572.2" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="575.25" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (27 samples, 0.05%)</title><rect x="425.4" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="428.38" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::end (9 samples, 0.02%)</title><rect x="623.5" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="626.54" y="543.5" ></text>
</g>
<g >
<title>alloc_pages_vma (6 samples, 0.01%)</title><rect x="994.7" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.71" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 0.01%)</title><rect x="14.1" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.14" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (42 samples, 0.08%)</title><rect x="731.3" y="453" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="734.35" y="463.5" ></text>
</g>
<g >
<title>__brk (5 samples, 0.01%)</title><rect x="611.3" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="614.33" y="351.5" ></text>
</g>
<g >
<title>kaffpaE (5,408 samples, 10.10%)</title><rect x="119.6" y="517" width="119.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="122.64" y="527.5" >kaffpaE</text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::find (15 samples, 0.03%)</title><rect x="217.9" y="165" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.92" y="175.5" ></text>
</g>
<g >
<title>ksys_read (38 samples, 0.07%)</title><rect x="108.9" y="421" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (230 samples, 0.43%)</title><rect x="366.5" y="389" width="5.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="369.49" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_M_next (6 samples, 0.01%)</title><rect x="54.0" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="57.00" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::allocate (101 samples, 0.19%)</title><rect x="1128.3" y="501" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1131.28" y="511.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; (7 samples, 0.01%)</title><rect x="1135.8" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1138.78" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (32 samples, 0.06%)</title><rect x="803.3" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="806.29" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (68 samples, 0.13%)</title><rect x="287.0" y="485" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="290.00" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (29 samples, 0.05%)</title><rect x="119.0" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (43 samples, 0.08%)</title><rect x="279.6" y="485" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="282.62" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_default_append (44 samples, 0.08%)</title><rect x="1162.5" y="533" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.51" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (21 samples, 0.04%)</title><rect x="959.2" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="962.18" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (8 samples, 0.01%)</title><rect x="994.3" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::resize (25 samples, 0.05%)</title><rect x="1162.0" y="549" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.96" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_free (9 samples, 0.02%)</title><rect x="158.9" y="85" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.92" y="95.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (119 samples, 0.22%)</title><rect x="683.8" y="357" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.80" y="367.5" ></text>
</g>
<g >
<title>finish_task_switch (15 samples, 0.03%)</title><rect x="108.5" y="229" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.51" y="239.5" ></text>
</g>
<g >
<title>filemap_fault (26 samples, 0.05%)</title><rect x="112.7" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.74" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (14 samples, 0.03%)</title><rect x="212.7" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.70" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (49 samples, 0.09%)</title><rect x="583.6" y="437" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.62" y="447.5" ></text>
</g>
<g >
<title>balance_management_coarsening::update_non_contained_block_balance (6 samples, 0.01%)</title><rect x="981.6" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="984.59" y="495.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::operator* (6 samples, 0.01%)</title><rect x="96.0" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="98.96" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (106 samples, 0.20%)</title><rect x="997.3" y="565" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1000.29" y="575.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (11 samples, 0.02%)</title><rect x="462.1" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.15" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (8 samples, 0.01%)</title><rect x="203.9" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.86" y="159.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (6 samples, 0.01%)</title><rect x="922.6" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.56" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (28 samples, 0.05%)</title><rect x="586.6" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="589.60" y="431.5" ></text>
</g>
<g >
<title>two_way_fm::assert_directed_boundary_condition (12 samples, 0.02%)</title><rect x="203.3" y="197" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.31" y="207.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (30 samples, 0.06%)</title><rect x="402.5" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.53" y="447.5" ></text>
</g>
<g >
<title>[hydra_pmi_proxy] (5 samples, 0.01%)</title><rect x="13.7" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.70" y="639.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple (5 samples, 0.01%)</title><rect x="1135.0" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1138.01" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (179 samples, 0.33%)</title><rect x="713.5" y="421" width="4.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="716.52" y="431.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, NodeData*, NodeData*&gt; (87 samples, 0.16%)</title><rect x="1146.9" y="437" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.86" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="428.9" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="431.89" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned long long&gt;, true&gt;::_S_cget (7 samples, 0.01%)</title><rect x="572.5" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="575.54" y="431.5" ></text>
</g>
<g >
<title>std::fill_n&lt;unsigned long long*, unsigned long, unsigned long long&gt; (11 samples, 0.02%)</title><rect x="513.2" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.22" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (16 samples, 0.03%)</title><rect x="952.7" y="389" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="955.74" y="399.5" ></text>
</g>
<g >
<title>parallel_graph_access::init_balance_management (133 samples, 0.25%)</title><rect x="300.2" y="549" width="3.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.23" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.02%)</title><rect x="424.5" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="427.50" y="479.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (106 samples, 0.20%)</title><rect x="643.4" y="453" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="646.36" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (157 samples, 0.29%)</title><rect x="1150.7" y="549" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1153.74" y="559.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (5 samples, 0.01%)</title><rect x="462.1" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.15" y="431.5" ></text>
</g>
<g >
<title>[mpiexec.hydra] (45 samples, 0.08%)</title><rect x="14.3" y="613" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.32" y="623.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (23 samples, 0.04%)</title><rect x="312.8" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.84" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const&amp;&gt; (8 samples, 0.01%)</title><rect x="615.4" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="618.43" y="431.5" ></text>
</g>
<g >
<title>openaux (5 samples, 0.01%)</title><rect x="13.9" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.92" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (73 samples, 0.14%)</title><rect x="767.5" y="453" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="770.45" y="463.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::operator (18 samples, 0.03%)</title><rect x="194.7" y="341" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="197.67" y="351.5" ></text>
</g>
<g >
<title>ghost_node_communication::update_ghost_node_data_finish (544 samples, 1.02%)</title><rect x="970.0" y="533" width="12.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="973.04" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long long const, long&gt;::pair&lt;unsigned long long const&amp;, 0ul&gt; (7 samples, 0.01%)</title><rect x="959.4" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="962.37" y="383.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;unsigned long long*, unsigned long&gt; (11 samples, 0.02%)</title><rect x="513.2" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.22" y="495.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt;, std::pair&lt;unsigned long long, unsigned long long&gt;*&gt; (23 samples, 0.04%)</title><rect x="293.2" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.17" y="463.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;Edge*, unsigned long, Edge&gt; (19 samples, 0.04%)</title><rect x="471.1" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.08" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (56 samples, 0.10%)</title><rect x="512.0" y="373" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.99" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (15 samples, 0.03%)</title><rect x="427.2" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="430.17" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_poll (7 samples, 0.01%)</title><rect x="255.1" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="258.06" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (298 samples, 0.56%)</title><rect x="1077.9" y="485" width="6.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1080.94" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10 samples, 0.02%)</title><rect x="725.8" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="728.82" y="511.5" ></text>
</g>
<g >
<title>__fget_light (8 samples, 0.01%)</title><rect x="921.0" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="924.04" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::pop_back (30 samples, 0.06%)</title><rect x="305.3" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="308.30" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned long long*, unsigned long, unsigned long long&gt; (11 samples, 0.02%)</title><rect x="513.2" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.22" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (79 samples, 0.15%)</title><rect x="1111.8" y="469" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1114.84" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::~unordered_map (208 samples, 0.39%)</title><rect x="495.8" y="533" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (42 samples, 0.08%)</title><rect x="1139.2" y="549" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1142.19" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (21 samples, 0.04%)</title><rect x="1156.7" y="549" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1159.67" y="559.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="409.5" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.47" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (96 samples, 0.18%)</title><rect x="498.3" y="485" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="501.25" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (22 samples, 0.04%)</title><rect x="397.4" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.39" y="511.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::operator* (28 samples, 0.05%)</title><rect x="1053.3" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1056.25" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (8 samples, 0.01%)</title><rect x="229.9" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.94" y="175.5" ></text>
</g>
<g >
<title>parallel_graph_access::setBlockSize (451 samples, 0.84%)</title><rect x="831.0" y="549" width="9.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="833.98" y="559.5" ></text>
</g>
<g >
<title>basicGraph::new_edge (43 samples, 0.08%)</title><rect x="120.2" y="453" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="123.23" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (131 samples, 0.24%)</title><rect x="239.0" y="437" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="447.5" ></text>
</g>
<g >
<title>native_write_msr (7 samples, 0.01%)</title><rect x="139.3" y="117" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::size (26 samples, 0.05%)</title><rect x="1055.5" y="533" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1058.46" y="543.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (88 samples, 0.16%)</title><rect x="703.8" y="357" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="706.80" y="367.5" ></text>
</g>
<g >
<title>[hydra_pmi_proxy] (127 samples, 0.24%)</title><rect x="10.1" y="581" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.09" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (172 samples, 0.32%)</title><rect x="150.2" y="341" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="153.19" y="351.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (77 samples, 0.14%)</title><rect x="988.8" y="485" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="991.80" y="495.5" ></text>
</g>
<g >
<title>maxNodeHeap::changeKey (8 samples, 0.01%)</title><rect x="211.4" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="214.40" y="223.5" ></text>
</g>
<g >
<title>filemap_fault (12 samples, 0.02%)</title><rect x="111.4" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.44" y="431.5" ></text>
</g>
<g >
<title>perf_event_exec (11 samples, 0.02%)</title><rect x="1189.8" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.76" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (64 samples, 0.12%)</title><rect x="71.9" y="629" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="74.92" y="639.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (15 samples, 0.03%)</title><rect x="228.9" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="231.86" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt;::allocate (8 samples, 0.01%)</title><rect x="409.5" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.47" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned long long&gt;, true&gt;::_S_cget (9 samples, 0.02%)</title><rect x="1109.7" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1112.68" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5 samples, 0.01%)</title><rect x="554.2" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="557.20" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeLabel (790 samples, 1.48%)</title><rect x="806.0" y="549" width="17.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="809.01" y="559.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (26 samples, 0.05%)</title><rect x="466.6" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="469.58" y="431.5" ></text>
</g>
<g >
<title>size_constraint_label_propagation::label_propagation (53 samples, 0.10%)</title><rect x="215.7" y="245" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.70" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (6 samples, 0.01%)</title><rect x="959.0" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="961.96" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_M_next (5 samples, 0.01%)</title><rect x="932.6" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="935.59" y="415.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (7 samples, 0.01%)</title><rect x="1146.4" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.42" y="495.5" ></text>
</g>
<g >
<title>release_pages (6 samples, 0.01%)</title><rect x="1041.9" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.88" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (31 samples, 0.06%)</title><rect x="935.2" y="389" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="938.17" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (23 samples, 0.04%)</title><rect x="345.7" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.70" y="447.5" ></text>
</g>
<g >
<title>std::forward&lt;AdditionalNonLocalNodeData const&amp;&gt; (6 samples, 0.01%)</title><rect x="1138.5" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.47" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (9 samples, 0.02%)</title><rect x="427.2" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="430.23" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (28 samples, 0.05%)</title><rect x="375.1" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="378.08" y="495.5" ></text>
</g>
<g >
<title>exit_mmap (20 samples, 0.04%)</title><rect x="1189.0" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (38 samples, 0.07%)</title><rect x="1119.5" y="453" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1122.47" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long long const, long&gt; &gt; (5 samples, 0.01%)</title><rect x="934.3" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="937.31" y="399.5" ></text>
</g>
<g >
<title>parallel_graph_access::setNodeLabel (195 samples, 0.36%)</title><rect x="336.2" y="533" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="339.24" y="543.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (267 samples, 0.50%)</title><rect x="712.6" y="437" width="5.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="715.57" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (121 samples, 0.23%)</title><rect x="275.0" y="501" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="277.99" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (131 samples, 0.24%)</title><rect x="239.0" y="421" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="431.5" ></text>
</g>
<g >
<title>new_sync_read (6 samples, 0.01%)</title><rect x="12.6" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.56" y="447.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (37 samples, 0.07%)</title><rect x="403.2" y="469" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.21" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_remove_bucket_begin (8 samples, 0.01%)</title><rect x="834.2" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="837.24" y="463.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%)</title><rect x="16.3" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="19.33" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::size (20 samples, 0.04%)</title><rect x="139.0" y="293" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="141.99" y="303.5" ></text>
</g>
<g >
<title>balance_management_coarsening::getBlockSize (671 samples, 1.25%)</title><rect x="313.6" y="517" width="14.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="316.59" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (351 samples, 0.66%)</title><rect x="1102.3" y="485" width="7.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1105.32" y="495.5" ></text>
</g>
<g >
<title>__GI___poll (13 samples, 0.02%)</title><rect x="15.0" y="565" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.00" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, compare_hashed_edge, unsigned long, true&gt;::_S_equals (68 samples, 0.13%)</title><rect x="381.7" y="453" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="384.65" y="463.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt;::base (13 samples, 0.02%)</title><rect x="503.6" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="506.59" y="415.5" ></text>
</g>
<g >
<title>two_way_fm::assert_every_boundary_nodes (14 samples, 0.03%)</title><rect x="218.9" y="165" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.89" y="175.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (18 samples, 0.03%)</title><rect x="136.7" y="229" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="139.65" y="239.5" ></text>
</g>
<g >
<title>std::move&lt;unsigned long long&amp;&gt; (9 samples, 0.02%)</title><rect x="706.7" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="709.71" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10 samples, 0.02%)</title><rect x="1064.7" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1067.67" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (719 samples, 1.34%)</title><rect x="355.7" y="533" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="543.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (29 samples, 0.05%)</title><rect x="42.4" y="629" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="45.38" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (211 samples, 0.39%)</title><rect x="154.1" y="309" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="319.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (8 samples, 0.01%)</title><rect x="93.6" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="96.63" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::_M_range_check (15 samples, 0.03%)</title><rect x="524.1" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="527.13" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_Tuple_impl (8 samples, 0.01%)</title><rect x="49.2" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="52.21" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (72 samples, 0.13%)</title><rect x="393.6" y="501" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="396.64" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (3,121 samples, 5.83%)</title><rect x="725.5" y="517" width="68.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="728.46" y="527.5" >std::un..</text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="148.7" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="151.71" y="335.5" ></text>
</g>
<g >
<title>std::operator!=&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt; (20 samples, 0.04%)</title><rect x="503.4" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="506.43" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (67 samples, 0.13%)</title><rect x="1118.0" y="453" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1120.99" y="463.5" ></text>
</g>
<g >
<title>ksys_read (28 samples, 0.05%)</title><rect x="110.0" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="447.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned long long&gt; (19 samples, 0.04%)</title><rect x="718.0" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="721.04" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (174 samples, 0.33%)</title><rect x="190.3" y="341" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="193.26" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_node_allocator (13 samples, 0.02%)</title><rect x="933.4" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="936.39" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (5 samples, 0.01%)</title><rect x="269.0" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="272.04" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (7 samples, 0.01%)</title><rect x="103.0" y="645" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="106.02" y="655.5" ></text>
</g>
<g >
<title>two_way_fm::assert_only_boundary_nodes (15 samples, 0.03%)</title><rect x="226.7" y="197" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="229.67" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;AdditionalNonLocalNodeData*, AdditionalNonLocalNodeData*, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt; (25 samples, 0.05%)</title><rect x="1138.6" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.64" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_Tuple_impl (6 samples, 0.01%)</title><rect x="595.5" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="598.48" y="495.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (11 samples, 0.02%)</title><rect x="226.4" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="229.43" y="191.5" ></text>
</g>
<g >
<title>__libc_start_main (48,408 samples, 90.42%)</title><rect x="103.6" y="629" width="1067.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="106.57" y="639.5" >__libc_start_main</text>
</g>
<g >
<title>page_fault (23 samples, 0.04%)</title><rect x="583.9" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.89" y="399.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (127 samples, 0.24%)</title><rect x="421.9" y="501" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="424.94" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="345.8" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.77" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (40 samples, 0.07%)</title><rect x="141.0" y="309" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="144.04" y="319.5" ></text>
</g>
<g >
<title>__GI___poll (18 samples, 0.03%)</title><rect x="344.5" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="347.53" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (13 samples, 0.02%)</title><rect x="135.5" y="293" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="138.51" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_free (23 samples, 0.04%)</title><rect x="499.6" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="502.58" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::size (8 samples, 0.01%)</title><rect x="214.7" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="217.75" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (27 samples, 0.05%)</title><rect x="132.8" y="261" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="135.75" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::size (8 samples, 0.01%)</title><rect x="149.9" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="152.88" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt;::operator[] (43 samples, 0.08%)</title><rect x="505.1" y="533" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="508.06" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (10 samples, 0.02%)</title><rect x="931.0" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="934.05" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.02%)</title><rect x="118.6" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.62" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, bool&gt;, false&gt;::_M_next (6 samples, 0.01%)</title><rect x="406.5" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.51" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (31 samples, 0.06%)</title><rect x="931.4" y="373" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="934.36" y="383.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_first_invalid_edge (6 samples, 0.01%)</title><rect x="374.4" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="377.42" y="543.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::size (11 samples, 0.02%)</title><rect x="101.1" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="104.10" y="639.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (149 samples, 0.28%)</title><rect x="688.8" y="357" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="691.79" y="367.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::operator* (16 samples, 0.03%)</title><rect x="339.9" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="342.90" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (6 samples, 0.01%)</title><rect x="578.1" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="581.09" y="415.5" ></text>
</g>
<g >
<title>graph_partitioner::single_run (5,145 samples, 9.61%)</title><rect x="125.1" y="437" width="113.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="128.08" y="447.5" >graph_partitio..</text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned long long const&amp;&gt; (34 samples, 0.06%)</title><rect x="617.3" y="389" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="620.28" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (25 samples, 0.05%)</title><rect x="431.6" y="533" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="434.60" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (10 samples, 0.02%)</title><rect x="158.9" y="117" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.92" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (87 samples, 0.16%)</title><rect x="191.9" y="309" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="194.94" y="319.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (7 samples, 0.01%)</title><rect x="111.5" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="287.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;boundary_pair const, data_boundary_pair&gt; (6 samples, 0.01%)</title><rect x="146.5" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="149.48" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (41 samples, 0.08%)</title><rect x="132.5" y="277" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="135.49" y="287.5" ></text>
</g>
<g >
<title>_dl_catch_exception (5 samples, 0.01%)</title><rect x="15.4" y="549" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.42" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (46 samples, 0.09%)</title><rect x="1079.3" y="453" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1082.26" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, compare_boundary_pair, unsigned long, true&gt;::_S_equals (97 samples, 0.18%)</title><rect x="144.5" y="261" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="147.50" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (6 samples, 0.01%)</title><rect x="409.7" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.69" y="479.5" ></text>
</g>
<g >
<title>__GI__dl_catch_error (5 samples, 0.01%)</title><rect x="109.8" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="383.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.02%)</title><rect x="302.8" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="305.83" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (19 samples, 0.04%)</title><rect x="410.0" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="413.04" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (7 samples, 0.01%)</title><rect x="930.8" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="933.83" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (29 samples, 0.05%)</title><rect x="383.6" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="386.57" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (31 samples, 0.06%)</title><rect x="685.4" y="309" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="688.37" y="319.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (93 samples, 0.17%)</title><rect x="517.9" y="485" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="520.92" y="495.5" ></text>
</g>
<g >
<title>x86_pmu_enable (7 samples, 0.01%)</title><rect x="139.3" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::size (8 samples, 0.01%)</title><rect x="78.5" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="81.53" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (109 samples, 0.20%)</title><rect x="495.8" y="485" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="495.5" ></text>
</g>
<g >
<title>quality_metrics::edge_cut (6 samples, 0.01%)</title><rect x="226.2" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="229.23" y="223.5" ></text>
</g>
<g >
<title>two_way_fm::move_node_back (42 samples, 0.08%)</title><rect x="229.6" y="213" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.65" y="223.5" ></text>
</g>
<g >
<title>get_page_from_freelist (11 samples, 0.02%)</title><rect x="510.9" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="513.88" y="383.5" ></text>
</g>
<g >
<title>PMPI_Recv (474 samples, 0.89%)</title><rect x="452.4" y="533" width="10.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="455.36" y="543.5" ></text>
</g>
<g >
<title>[anon] (37 samples, 0.07%)</title><rect x="79.2" y="645" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="82.23" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (17 samples, 0.03%)</title><rect x="1109.1" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1112.08" y="479.5" ></text>
</g>
<g >
<title>std::_Bit_reference::_Bit_reference (12 samples, 0.02%)</title><rect x="431.3" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="434.27" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (49 samples, 0.09%)</title><rect x="73.3" y="629" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="76.33" y="639.5" ></text>
</g>
<g >
<title>parallel_contraction::update_ghost_nodes_weights (546 samples, 1.02%)</title><rect x="513.5" y="549" width="12.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.53" y="559.5" ></text>
</g>
<g >
<title>size_constraint_label_propagation::match (1,453 samples, 2.71%)</title><rect x="168.0" y="405" width="32.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="171.04" y="415.5" >si..</text>
</g>
<g >
<title>do_syscall_64 (28 samples, 0.05%)</title><rect x="110.0" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="479.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (21 samples, 0.04%)</title><rect x="691.6" y="341" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="694.58" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (9 samples, 0.02%)</title><rect x="469.6" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.60" y="495.5" ></text>
</g>
<g >
<title>mpi_tools::distribute_local_graph (151 samples, 0.28%)</title><rect x="242.7" y="517" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.70" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned int const, is_boundary&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (40 samples, 0.07%)</title><rect x="137.1" y="277" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="140.07" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (9 samples, 0.02%)</title><rect x="281.5" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="284.51" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (13 samples, 0.02%)</title><rect x="279.7" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="282.73" y="479.5" ></text>
</g>
<g >
<title>[[heap]] (235 samples, 0.44%)</title><rect x="15.8" y="645" width="5.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.75" y="655.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;boundary_pair const, data_boundary_pair, hash_boundary_pair, compare_boundary_pair, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt; &gt;::operator[] (8 samples, 0.01%)</title><rect x="215.3" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.26" y="223.5" ></text>
</g>
<g >
<title>quality_metrics::edge_cut (17 samples, 0.03%)</title><rect x="209.5" y="229" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="212.50" y="239.5" ></text>
</g>
<g >
<title>handle_mm_fault (22 samples, 0.04%)</title><rect x="510.8" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="513.77" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (38 samples, 0.07%)</title><rect x="791.7" y="469" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="794.66" y="479.5" ></text>
</g>
<g >
<title>parallel_graph_access::getSecondPartitionIndex (7 samples, 0.01%)</title><rect x="95.4" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="98.44" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, compare_boundary_pair, unsigned long, true&gt;::_S_equals (5 samples, 0.01%)</title><rect x="206.3" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.28" y="207.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (11 samples, 0.02%)</title><rect x="462.1" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.15" y="479.5" ></text>
</g>
<g >
<title>parallel_graph_access::new_edge (349 samples, 0.65%)</title><rect x="463.1" y="533" width="7.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="466.05" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long long const, long&gt;::pair&lt;unsigned long long const&amp;&gt; (144 samples, 0.27%)</title><rect x="614.9" y="437" width="3.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="617.86" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (190 samples, 0.35%)</title><rect x="845.0" y="517" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="848.02" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 0.01%)</title><rect x="994.7" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.71" y="399.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (8 samples, 0.01%)</title><rect x="112.5" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.54" y="527.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (219 samples, 0.41%)</title><rect x="683.8" y="373" width="4.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.78" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (13 samples, 0.02%)</title><rect x="1155.9" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1158.86" y="543.5" ></text>
</g>
<g >
<title>two_way_fm::perform_refinement (252 samples, 0.47%)</title><rect x="209.5" y="245" width="5.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="212.48" y="255.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (72 samples, 0.13%)</title><rect x="1163.5" y="341" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.55" y="351.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (10 samples, 0.02%)</title><rect x="614.5" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="617.53" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (6 samples, 0.01%)</title><rect x="833.6" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="836.60" y="431.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (8 samples, 0.01%)</title><rect x="1146.6" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.64" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_free (5 samples, 0.01%)</title><rect x="409.9" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="351.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::param_type::param_type (24 samples, 0.04%)</title><rect x="991.6" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="994.64" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (8 samples, 0.01%)</title><rect x="408.3" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.32" y="463.5" ></text>
</g>
<g >
<title>alloc_pages_vma (6 samples, 0.01%)</title><rect x="1162.3" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.29" y="367.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (63 samples, 0.12%)</title><rect x="954.8" y="373" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="957.81" y="383.5" ></text>
</g>
<g >
<title>__GI___poll (12 samples, 0.02%)</title><rect x="124.6" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="127.57" y="335.5" ></text>
</g>
<g >
<title>finish_task_switch (7 samples, 0.01%)</title><rect x="15.1" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="415.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (266 samples, 0.50%)</title><rect x="106.9" y="549" width="5.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.85" y="559.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (30 samples, 0.06%)</title><rect x="337.0" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="339.97" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (42 samples, 0.08%)</title><rect x="793.3" y="469" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="796.26" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (21 samples, 0.04%)</title><rect x="254.8" y="325" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="257.76" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false, false&gt;::_Node_iterator (31 samples, 0.06%)</title><rect x="1057.2" y="517" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1060.24" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="255.9" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="258.90" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::emplace_back&lt;unsigned long long&gt; (23 samples, 0.04%)</title><rect x="431.6" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="434.64" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets (211 samples, 0.39%)</title><rect x="154.1" y="293" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (128 samples, 0.24%)</title><rect x="918.8" y="405" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="921.82" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="121.5" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="124.53" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (14 samples, 0.03%)</title><rect x="149.8" y="341" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="152.77" y="351.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::~allocator (7 samples, 0.01%)</title><rect x="1128.1" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1131.13" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (21 samples, 0.04%)</title><rect x="51.9" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="54.86" y="639.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeWeight (19 samples, 0.04%)</title><rect x="329.8" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="332.79" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt;::deallocate (10 samples, 0.02%)</title><rect x="532.6" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.60" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (14 samples, 0.03%)</title><rect x="166.3" y="357" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="169.34" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (209 samples, 0.39%)</title><rect x="859.8" y="517" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="862.79" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;QElement&lt;maxNodeHeap::Data&gt; &gt; &gt;::allocate (8 samples, 0.01%)</title><rect x="227.0" y="117" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.03" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (13 samples, 0.02%)</title><rect x="684.2" y="277" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.18" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (156 samples, 0.29%)</title><rect x="832.4" y="469" width="3.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="835.39" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (5 samples, 0.01%)</title><rect x="207.7" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.72" y="223.5" ></text>
</g>
<g >
<title>page_fault (10 samples, 0.02%)</title><rect x="1162.3" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.29" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (8 samples, 0.01%)</title><rect x="98.2" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="101.19" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (62 samples, 0.12%)</title><rect x="767.6" y="437" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="770.59" y="447.5" ></text>
</g>
<g >
<title>dw_readl (5 samples, 0.01%)</title><rect x="1041.7" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.66" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (199 samples, 0.37%)</title><rect x="1116.2" y="469" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1119.16" y="479.5" ></text>
</g>
<g >
<title>two_way_fm::assert_every_boundary_nodes (5 samples, 0.01%)</title><rect x="203.3" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.31" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_M_next (20 samples, 0.04%)</title><rect x="302.2" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="305.19" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (91 samples, 0.17%)</title><rect x="151.4" y="309" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="154.36" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;hashed_edge const&amp;&gt;::tuple&lt;void, true&gt; (6 samples, 0.01%)</title><rect x="393.1" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="396.14" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (7 samples, 0.01%)</title><rect x="203.0" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.98" y="175.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="313.2" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="316.23" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (188 samples, 0.35%)</title><rect x="836.8" y="517" width="4.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="839.78" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (69 samples, 0.13%)</title><rect x="347.3" y="437" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="350.29" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_M_head (8 samples, 0.01%)</title><rect x="49.0" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="52.04" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (72 samples, 0.13%)</title><rect x="343.3" y="437" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="346.34" y="447.5" ></text>
</g>
<g >
<title>dl_main (9 samples, 0.02%)</title><rect x="13.9" y="581" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.92" y="591.5" ></text>
</g>
<g >
<title>_int_free (80 samples, 0.15%)</title><rect x="296.5" y="405" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="415.5" ></text>
</g>
<g >
<title>size_constraint_label_propagation::match (81 samples, 0.15%)</title><rect x="200.9" y="293" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.93" y="303.5" ></text>
</g>
<g >
<title>quotient_graph_refinement::perform_refinement (105 samples, 0.20%)</title><rect x="202.8" y="245" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.76" y="255.5" ></text>
</g>
<g >
<title>do_page_fault (7 samples, 0.01%)</title><rect x="110.8" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.75" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (59 samples, 0.11%)</title><rect x="107.6" y="485" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.56" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (31 samples, 0.06%)</title><rect x="569.7" y="405" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="572.71" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (10 samples, 0.02%)</title><rect x="943.5" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="946.50" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (50 samples, 0.09%)</title><rect x="111.4" y="485" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.37" y="495.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (23 samples, 0.04%)</title><rect x="201.7" y="245" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="204.70" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (5 samples, 0.01%)</title><rect x="595.6" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="598.61" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (196 samples, 0.37%)</title><rect x="384.2" y="469" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="387.21" y="479.5" ></text>
</g>
<g >
<title>_dl_catch_exception (5 samples, 0.01%)</title><rect x="13.9" y="549" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.92" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (61 samples, 0.11%)</title><rect x="232.6" y="373" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="235.60" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::allocate (5 samples, 0.01%)</title><rect x="64.2" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="67.22" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (6 samples, 0.01%)</title><rect x="301.1" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.07" y="447.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (6 samples, 0.01%)</title><rect x="1041.7" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.66" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (5 samples, 0.01%)</title><rect x="1083.9" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1086.91" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (6 samples, 0.01%)</title><rect x="216.3" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.27" y="223.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, unsigned long long&gt; (31 samples, 0.06%)</title><rect x="1106.8" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1109.79" y="447.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;*, std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt; &gt; (24 samples, 0.04%)</title><rect x="409.9" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="527.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (29 samples, 0.05%)</title><rect x="204.4" y="181" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.43" y="191.5" ></text>
</g>
<g >
<title>__GI___poll (10 samples, 0.02%)</title><rect x="402.3" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.28" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;Edge*, unsigned long&gt; (170 samples, 0.32%)</title><rect x="1158.2" y="485" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1161.22" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (7 samples, 0.01%)</title><rect x="926.5" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="929.53" y="463.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (29 samples, 0.05%)</title><rect x="224.5" y="149" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="227.49" y="159.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.02%)</title><rect x="42.0" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="44.96" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::allocate (11 samples, 0.02%)</title><rect x="397.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.50" y="495.5" ></text>
</g>
<g >
<title>native_write_msr (7 samples, 0.01%)</title><rect x="15.1" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="335.5" ></text>
</g>
<g >
<title>parallel_graph_access::update_ghost_node_data_finish (544 samples, 1.02%)</title><rect x="970.0" y="549" width="12.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="973.04" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (56 samples, 0.10%)</title><rect x="426.4" y="517" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="429.37" y="527.5" ></text>
</g>
<g >
<title>_int_malloc (239 samples, 0.45%)</title><rect x="606.2" y="405" width="5.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="609.17" y="415.5" ></text>
</g>
<g >
<title>dlerror_run (5 samples, 0.01%)</title><rect x="109.8" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="399.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (8 samples, 0.01%)</title><rect x="15.1" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (9 samples, 0.02%)</title><rect x="866.1" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.11" y="415.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned long long&gt; (23 samples, 0.04%)</title><rect x="701.3" y="357" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="704.28" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (65 samples, 0.12%)</title><rect x="186.6" y="325" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="189.65" y="335.5" ></text>
</g>
<g >
<title>ondemand_readahead (5 samples, 0.01%)</title><rect x="1169.0" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1172.04" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (15 samples, 0.03%)</title><rect x="1156.7" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1159.72" y="543.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeWeight (99 samples, 0.18%)</title><rect x="923.5" y="501" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="926.47" y="511.5" ></text>
</g>
<g >
<title>graph_access::get_first_edge (11 samples, 0.02%)</title><rect x="194.4" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="197.36" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (23 samples, 0.04%)</title><rect x="221.1" y="133" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="224.12" y="143.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (29 samples, 0.05%)</title><rect x="12.9" y="405" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.93" y="415.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, long&gt; const&amp;&gt; (15 samples, 0.03%)</title><rect x="591.5" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="594.47" y="415.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (44 samples, 0.08%)</title><rect x="403.2" y="501" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.19" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (43 samples, 0.08%)</title><rect x="242.7" y="405" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.70" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeWeight (15 samples, 0.03%)</title><rect x="373.8" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="376.83" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (110 samples, 0.21%)</title><rect x="526.1" y="517" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::allocate (14 samples, 0.03%)</title><rect x="969.0" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.01" y="463.5" ></text>
</g>
<g >
<title>schedule_tail (15 samples, 0.03%)</title><rect x="14.5" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.54" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (8 samples, 0.01%)</title><rect x="373.6" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="376.56" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="148.8" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="151.80" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (7 samples, 0.01%)</title><rect x="683.9" y="261" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.91" y="271.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (7 samples, 0.01%)</title><rect x="139.3" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="159.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (190 samples, 0.35%)</title><rect x="340.8" y="469" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="343.76" y="479.5" ></text>
</g>
<g >
<title>malloc_consolidate (110 samples, 0.21%)</title><rect x="526.1" y="405" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="415.5" ></text>
</g>
<g >
<title>two_way_fm::assert_every_boundary_nodes (28 samples, 0.05%)</title><rect x="209.9" y="213" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="212.88" y="223.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (401 samples, 0.75%)</title><rect x="179.3" y="357" width="8.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="182.28" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (77 samples, 0.14%)</title><rect x="298.3" y="485" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="301.29" y="495.5" ></text>
</g>
<g >
<title>_start (10 samples, 0.02%)</title><rect x="13.9" y="645" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.92" y="655.5" ></text>
</g>
<g >
<title>schedule (19 samples, 0.04%)</title><rect x="1171.4" y="357" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.44" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (34 samples, 0.06%)</title><rect x="1153.4" y="533" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1156.43" y="543.5" ></text>
</g>
<g >
<title>__do_page_fault (12 samples, 0.02%)</title><rect x="1138.0" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.02" y="479.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (89 samples, 0.17%)</title><rect x="460.4" y="485" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="463.43" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (370 samples, 0.69%)</title><rect x="247.2" y="501" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.01%)</title><rect x="1170.6" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (12 samples, 0.02%)</title><rect x="58.6" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="61.56" y="639.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::operator[] (24 samples, 0.04%)</title><rect x="205.3" y="245" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.31" y="255.5" ></text>
</g>
<g >
<title>parallel_contraction::redistribute_hased_graph_and_build_graph_locally (3,689 samples, 6.89%)</title><rect x="432.2" y="549" width="81.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="435.22" y="559.5" >parallel_..</text>
</g>
<g >
<title>handle_mm_fault (9 samples, 0.02%)</title><rect x="1142.2" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.23" y="463.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (6 samples, 0.01%)</title><rect x="313.1" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="316.10" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (1,523 samples, 2.84%)</title><rect x="1008.3" y="501" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.29" y="511.5" >[l..</text>
</g>
<g >
<title>[libmpich.so.0.0.0] (29 samples, 0.05%)</title><rect x="119.0" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="463.5" ></text>
</g>
<g >
<title>handle_mm_fault (14 samples, 0.03%)</title><rect x="471.2" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.16" y="367.5" ></text>
</g>
<g >
<title>page_fault (13 samples, 0.02%)</title><rect x="1138.8" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.77" y="383.5" ></text>
</g>
<g >
<title>complete_boundary::contains (18 samples, 0.03%)</title><rect x="217.1" y="197" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.11" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (5 samples, 0.01%)</title><rect x="151.8" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="154.82" y="287.5" ></text>
</g>
<g >
<title>complete_boundary::contains (30 samples, 0.06%)</title><rect x="217.8" y="197" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.79" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="825.5" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="828.49" y="543.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (126 samples, 0.24%)</title><rect x="697.9" y="357" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="700.91" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (7 samples, 0.01%)</title><rect x="301.3" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.33" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (12 samples, 0.02%)</title><rect x="1189.7" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.74" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (6 samples, 0.01%)</title><rect x="936.4" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="939.36" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_deallocate_node (81 samples, 0.15%)</title><rect x="932.7" y="405" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="935.70" y="415.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (25 samples, 0.05%)</title><rect x="684.5" y="325" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.49" y="335.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (15 samples, 0.03%)</title><rect x="108.5" y="213" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.51" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (29 samples, 0.05%)</title><rect x="532.2" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.18" y="527.5" ></text>
</g>
<g >
<title>__vfs_read (258 samples, 0.48%)</title><rect x="1163.5" y="421" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="431.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (12 samples, 0.02%)</title><rect x="611.0" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="614.04" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_Hash_node_value_base (7 samples, 0.01%)</title><rect x="491.8" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="494.84" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="834.7" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="837.75" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (263 samples, 0.49%)</title><rect x="1103.0" y="469" width="5.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1105.96" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (16 samples, 0.03%)</title><rect x="578.6" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="581.58" y="399.5" ></text>
</g>
<g >
<title>_dl_map_object_from_fd (9 samples, 0.02%)</title><rect x="1170.6" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="511.5" ></text>
</g>
<g >
<title>__do_page_fault (10 samples, 0.02%)</title><rect x="108.2" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.22" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (41 samples, 0.08%)</title><rect x="1124.8" y="517" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1127.78" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (9 samples, 0.02%)</title><rect x="396.3" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="399.31" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (38 samples, 0.07%)</title><rect x="108.9" y="469" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="479.5" ></text>
</g>
<g >
<title>parallel_graph_access::setBlockSize (18 samples, 0.03%)</title><rect x="335.8" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="338.85" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="468.3" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="471.25" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::getTargetPE (43 samples, 0.08%)</title><rect x="523.6" y="533" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="526.56" y="543.5" ></text>
</g>
<g >
<title>do_page_fault (23 samples, 0.04%)</title><rect x="583.9" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.89" y="383.5" ></text>
</g>
<g >
<title>__do_munmap (10 samples, 0.02%)</title><rect x="1146.6" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="367.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long long*, unsigned long, unsigned long long&gt; (15 samples, 0.03%)</title><rect x="992.9" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.94" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6 samples, 0.01%)</title><rect x="217.3" y="133" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.26" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::size (9 samples, 0.02%)</title><rect x="229.4" y="133" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.41" y="143.5" ></text>
</g>
<g >
<title>__GI___nss_lookup (5 samples, 0.01%)</title><rect x="109.8" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="463.5" ></text>
</g>
<g >
<title>mixed_refinement::perform_refinement (237 samples, 0.44%)</title><rect x="225.4" y="277" width="5.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.35" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (21 samples, 0.04%)</title><rect x="76.5" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="79.48" y="639.5" ></text>
</g>
<g >
<title>x86_pmu_enable (7 samples, 0.01%)</title><rect x="15.1" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;NodeData&gt;::deallocate (11 samples, 0.02%)</title><rect x="1146.6" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="495.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (8 samples, 0.01%)</title><rect x="113.5" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.53" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator-- (8 samples, 0.01%)</title><rect x="689.1" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="692.12" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, long&gt; (6 samples, 0.01%)</title><rect x="572.0" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="574.96" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_M_next (27 samples, 0.05%)</title><rect x="489.9" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="492.86" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (42 samples, 0.08%)</title><rect x="334.9" y="517" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="337.90" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned long long&gt;, true&gt;::_S_cget (5 samples, 0.01%)</title><rect x="58.9" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="61.91" y="639.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::top (48 samples, 0.09%)</title><rect x="306.9" y="501" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="309.93" y="511.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const&amp;&gt; (5 samples, 0.01%)</title><rect x="1132.1" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1135.05" y="463.5" ></text>
</g>
<g >
<title>unmap_region (8 samples, 0.01%)</title><rect x="1041.9" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (132 samples, 0.25%)</title><rect x="417.1" y="485" width="2.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="420.14" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::deallocate (14 samples, 0.03%)</title><rect x="969.5" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.54" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.01%)</title><rect x="10.9" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.88" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (719 samples, 1.34%)</title><rect x="355.7" y="517" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (8 samples, 0.01%)</title><rect x="928.0" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="930.96" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;::allocate (45 samples, 0.08%)</title><rect x="492.3" y="469" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="495.30" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, unsigned long long&gt; (9 samples, 0.02%)</title><rect x="966.3" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="969.34" y="399.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (5 samples, 0.01%)</title><rect x="684.9" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.93" y="303.5" ></text>
</g>
<g >
<title>perf (12 samples, 0.02%)</title><rect x="1189.7" y="661" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.74" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6 samples, 0.01%)</title><rect x="203.0" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.00" y="159.5" ></text>
</g>
<g >
<title>sync_regs (5 samples, 0.01%)</title><rect x="512.3" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.32" y="351.5" ></text>
</g>
<g >
<title>add_to_page_cache_lru (16 samples, 0.03%)</title><rect x="1168.5" y="261" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1171.51" y="271.5" ></text>
</g>
<g >
<title>handle_mm_fault (21 samples, 0.04%)</title><rect x="1171.4" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.42" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_poll (12 samples, 0.02%)</title><rect x="15.0" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.03" y="527.5" ></text>
</g>
<g >
<title>copy_page_to_iter (137 samples, 0.26%)</title><rect x="1163.5" y="357" width="3.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.53" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (12 samples, 0.02%)</title><rect x="122.0" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.00" y="479.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (20 samples, 0.04%)</title><rect x="229.2" y="181" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.19" y="191.5" ></text>
</g>
<g >
<title>error_entry (9 samples, 0.02%)</title><rect x="609.8" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="612.81" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (49 samples, 0.09%)</title><rect x="285.9" y="453" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="288.92" y="463.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (6 samples, 0.01%)</title><rect x="210.4" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.36" y="191.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;Node*, unsigned long, Node&gt; (25 samples, 0.05%)</title><rect x="1162.0" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.96" y="527.5" ></text>
</g>
<g >
<title>__GI__IO_fwrite (8 samples, 0.01%)</title><rect x="1170.1" y="565" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::find (410 samples, 0.77%)</title><rect x="936.5" y="469" width="9.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="939.54" y="479.5" ></text>
</g>
<g >
<title>native_write_msr (8 samples, 0.01%)</title><rect x="113.5" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.53" y="319.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (376 samples, 0.70%)</title><rect x="444.1" y="485" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="447.07" y="495.5" ></text>
</g>
<g >
<title>malloc_consolidate (109 samples, 0.20%)</title><rect x="495.8" y="389" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.02%)</title><rect x="519.7" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="522.66" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned int const, is_boundary&gt;::pair&lt;unsigned int const&amp;, 0ul&gt; (15 samples, 0.03%)</title><rect x="137.4" y="229" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="140.40" y="239.5" ></text>
</g>
<g >
<title>__GI___nss_lookup_function (5 samples, 0.01%)</title><rect x="109.8" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (13 samples, 0.02%)</title><rect x="256.0" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="259.01" y="527.5" ></text>
</g>
<g >
<title>helpers::filter_duplicates&lt;unsigned long long, parallel_contraction::compute_label_mapping (46 samples, 0.09%)</title><rect x="403.2" y="533" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.19" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (19 samples, 0.04%)</title><rect x="148.6" y="341" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="151.60" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (6 samples, 0.01%)</title><rect x="956.3" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="959.33" y="399.5" ></text>
</g>
<g >
<title>mpirun (65 samples, 0.12%)</title><rect x="14.3" y="661" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.32" y="671.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (11 samples, 0.02%)</title><rect x="113.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.47" y="495.5" ></text>
</g>
<g >
<title>alloc_pages_vma (11 samples, 0.02%)</title><rect x="510.9" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="513.88" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (14 samples, 0.03%)</title><rect x="705.8" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="708.76" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (13 samples, 0.02%)</title><rect x="334.2" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="337.22" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (38 samples, 0.07%)</title><rect x="129.8" y="245" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="132.84" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (2,209 samples, 4.13%)</title><rect x="1087.9" y="533" width="48.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1090.88" y="543.5" >std:..</text>
</g>
<g >
<title>distributed_partitioner::vcycle (10,733 samples, 20.05%)</title><rect x="119.0" y="565" width="236.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="575.5" >distributed_partitioner::vcycle</text>
</g>
<g >
<title>exit_mmap (48 samples, 0.09%)</title><rect x="1176.0" y="517" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="527.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (11 samples, 0.02%)</title><rect x="241.6" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="244.57" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long long&gt;::operator (7 samples, 0.01%)</title><rect x="581.6" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="584.55" y="431.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt;, std::pair&lt;unsigned long long, unsigned long long&gt;*&gt; (68 samples, 0.13%)</title><rect x="502.4" y="469" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="505.38" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_poll (5 samples, 0.01%)</title><rect x="344.8" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="347.82" y="383.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (82 samples, 0.15%)</title><rect x="273.2" y="405" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.18" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (16 samples, 0.03%)</title><rect x="697.6" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="700.56" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_free (86 samples, 0.16%)</title><rect x="290.2" y="405" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (80 samples, 0.15%)</title><rect x="296.5" y="453" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (28 samples, 0.05%)</title><rect x="524.8" y="533" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="527.79" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.01%)</title><rect x="353.7" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="356.75" y="415.5" ></text>
</g>
<g >
<title>tcache_get (5 samples, 0.01%)</title><rect x="959.0" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="961.98" y="367.5" ></text>
</g>
<g >
<title>vfs_read (6 samples, 0.01%)</title><rect x="12.6" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.56" y="479.5" ></text>
</g>
<g >
<title>do_sys_poll (9 samples, 0.02%)</title><rect x="419.7" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="422.72" y="415.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (9 samples, 0.02%)</title><rect x="1146.4" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.38" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple&lt;void, true&gt; (8 samples, 0.01%)</title><rect x="69.7" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="72.67" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, hashed_edge const&amp;&gt;::_Tuple_impl (8 samples, 0.01%)</title><rect x="495.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.52" y="495.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (10 samples, 0.02%)</title><rect x="1189.2" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.23" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (23 samples, 0.04%)</title><rect x="311.9" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="314.91" y="463.5" ></text>
</g>
<g >
<title>schedule (7 samples, 0.01%)</title><rect x="1171.9" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="383.5" ></text>
</g>
<g >
<title>MPI_Probe (69 samples, 0.13%)</title><rect x="442.6" y="533" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="445.55" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::find (88 samples, 0.16%)</title><rect x="393.4" y="533" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="396.40" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt; &gt;::destroy&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt; (287 samples, 0.54%)</title><rect x="158.9" y="277" width="6.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.85" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (13 samples, 0.02%)</title><rect x="113.5" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.47" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (22 samples, 0.04%)</title><rect x="279.0" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="281.98" y="447.5" ></text>
</g>
<g >
<title>sock_read_iter (6 samples, 0.01%)</title><rect x="12.6" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.56" y="431.5" ></text>
</g>
<g >
<title>parallel_graph_access::getSecondPartitionIndex (56 samples, 0.10%)</title><rect x="334.6" y="533" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="337.59" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_range_check (12 samples, 0.02%)</title><rect x="167.4" y="341" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="170.40" y="351.5" ></text>
</g>
<g >
<title>parallel_graph_access::is_local_node (5 samples, 0.01%)</title><rect x="269.7" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="272.72" y="527.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (14 samples, 0.03%)</title><rect x="1161.6" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.63" y="431.5" ></text>
</g>
<g >
<title>finish_task_switch (8 samples, 0.01%)</title><rect x="994.3" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="684.4" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.35" y="239.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (7 samples, 0.01%)</title><rect x="513.1" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.07" y="367.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned int const&amp;&gt;::tuple (8 samples, 0.01%)</title><rect x="137.7" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="140.73" y="255.5" ></text>
</g>
<g >
<title>__GI___default_morecore (5 samples, 0.01%)</title><rect x="611.3" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="614.33" y="383.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (12 samples, 0.02%)</title><rect x="229.8" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.85" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (36 samples, 0.07%)</title><rect x="375.0" y="501" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="377.97" y="511.5" ></text>
</g>
<g >
<title>std::pair&lt;hashed_edge const, data_hashed_edge&gt;::pair&lt;hashed_edge const&amp;, 0ul&gt; (25 samples, 0.05%)</title><rect x="392.0" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="395.01" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (49 samples, 0.09%)</title><rect x="348.9" y="453" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="351.92" y="463.5" ></text>
</g>
<g >
<title>do_sys_poll (31 samples, 0.06%)</title><rect x="1040.3" y="325" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1043.33" y="335.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (6 samples, 0.01%)</title><rect x="12.6" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.56" y="399.5" ></text>
</g>
<g >
<title>handle_mm_fault (10 samples, 0.02%)</title><rect x="1138.1" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.07" y="463.5" ></text>
</g>
<g >
<title>initial_partitioning_algorithm::perform_partitioning (5,786 samples, 10.81%)</title><rect x="119.6" y="549" width="127.6" height="15.0" fill="rgb(77,77,77)" rx="2" ry="2" />
<text  x="122.64" y="559.5" >initial_partitio..</text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::push (8 samples, 0.01%)</title><rect x="100.9" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="103.92" y="639.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (9 samples, 0.02%)</title><rect x="204.7" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.65" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::at (21 samples, 0.04%)</title><rect x="524.0" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="527.04" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (359 samples, 0.67%)</title><rect x="584.7" y="437" width="7.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="587.70" y="447.5" ></text>
</g>
<g >
<title>error_entry (12 samples, 0.02%)</title><rect x="1159.6" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1162.60" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::find (151 samples, 0.28%)</title><rect x="464.2" y="517" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="467.15" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::_M_range_check (10 samples, 0.02%)</title><rect x="214.7" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="217.70" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (5 samples, 0.01%)</title><rect x="834.0" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="837.00" y="431.5" ></text>
</g>
<g >
<title>clear_page_erms (22 samples, 0.04%)</title><rect x="1160.5" y="293" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1163.53" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="245.7" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="248.70" y="447.5" ></text>
</g>
<g >
<title>get_page_from_freelist (5 samples, 0.01%)</title><rect x="994.7" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.71" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (29 samples, 0.05%)</title><rect x="1105.3" y="421" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1108.34" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (68 samples, 0.13%)</title><rect x="236.0" y="373" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="239.02" y="383.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (117 samples, 0.22%)</title><rect x="122.3" y="421" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (12 samples, 0.02%)</title><rect x="228.6" y="133" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="231.57" y="143.5" ></text>
</g>
<g >
<title>__lru_cache_add (5 samples, 0.01%)</title><rect x="1148.1" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1151.14" y="287.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (6 samples, 0.01%)</title><rect x="210.6" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.60" y="191.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (14 samples, 0.03%)</title><rect x="1041.1" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.08" y="383.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (5 samples, 0.01%)</title><rect x="106.7" y="581" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.65" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (6 samples, 0.01%)</title><rect x="931.1" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="934.14" y="367.5" ></text>
</g>
<g >
<title>parallel_graph_access::is_local_node (33 samples, 0.06%)</title><rect x="1002.4" y="597" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1005.38" y="607.5" ></text>
</g>
<g >
<title>clear_page_erms (10 samples, 0.02%)</title><rect x="1168.1" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1171.07" y="239.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (376 samples, 0.70%)</title><rect x="444.1" y="469" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="447.07" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (107 samples, 0.20%)</title><rect x="407.5" y="533" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="410.51" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (370 samples, 0.69%)</title><rect x="247.2" y="469" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1,269 samples, 2.37%)</title><rect x="1058.7" y="533" width="28.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1061.70" y="543.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (21 samples, 0.04%)</title><rect x="731.8" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="734.81" y="447.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (18 samples, 0.03%)</title><rect x="684.1" y="309" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.09" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (38 samples, 0.07%)</title><rect x="1080.4" y="453" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1083.41" y="463.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (12 samples, 0.02%)</title><rect x="348.4" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="351.39" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (21 samples, 0.04%)</title><rect x="222.4" y="133" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="225.40" y="143.5" ></text>
</g>
<g >
<title>alloc_pages_vma (17 samples, 0.03%)</title><rect x="583.9" y="309" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.91" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="833.6" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="836.62" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (43 samples, 0.08%)</title><rect x="278.5" y="469" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="281.52" y="479.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (80 samples, 0.15%)</title><rect x="681.6" y="421" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="684.60" y="431.5" ></text>
</g>
<g >
<title>__do_fault (26 samples, 0.05%)</title><rect x="112.7" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.74" y="479.5" ></text>
</g>
<g >
<title>__do_fault (11 samples, 0.02%)</title><rect x="113.5" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.47" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_poll (6 samples, 0.01%)</title><rect x="241.7" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="244.68" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long long const, long&gt;::pair&lt;unsigned long long const&amp;, 0ul&gt; (110 samples, 0.21%)</title><rect x="615.6" y="421" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="618.61" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (26 samples, 0.05%)</title><rect x="598.0" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="600.99" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false, false&gt;::_Node_iterator (16 samples, 0.03%)</title><rect x="1086.3" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1089.29" y="527.5" ></text>
</g>
<g >
<title>balance_management_coarsening::getBlockSize (25 samples, 0.05%)</title><rect x="634.4" y="549" width="0.5" height="15.0" fill="rgb(0,171,255)" rx="2" ry="2" />
<text  x="637.39" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="54.6" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="57.64" y="639.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long long const&amp;&gt; (8 samples, 0.01%)</title><rect x="511.8" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.79" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::allocate (13 samples, 0.02%)</title><rect x="263.7" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="266.66" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::allocate (9 samples, 0.02%)</title><rect x="958.9" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="961.91" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (5 samples, 0.01%)</title><rect x="409.9" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="431.5" ></text>
</g>
<g >
<title>ghost_node_communication::add_adjacent_processor (101 samples, 0.19%)</title><rect x="1051.7" y="549" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1054.66" y="559.5" ></text>
</g>
<g >
<title>release_pages (13 samples, 0.02%)</title><rect x="1189.2" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.16" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="799.0" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="801.97" y="543.5" ></text>
</g>
<g >
<title>__vm_munmap (10 samples, 0.02%)</title><rect x="1146.6" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="383.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (20 samples, 0.04%)</title><rect x="867.6" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="870.63" y="511.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (5 samples, 0.01%)</title><rect x="403.5" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.54" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (855 samples, 1.60%)</title><rect x="903.6" y="453" width="18.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="906.56" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (5 samples, 0.01%)</title><rect x="48.4" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="51.38" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (50 samples, 0.09%)</title><rect x="947.1" y="405" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="950.05" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (25 samples, 0.05%)</title><rect x="386.9" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="389.94" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (131 samples, 0.24%)</title><rect x="239.0" y="469" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (13 samples, 0.02%)</title><rect x="395.9" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.93" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (253 samples, 0.47%)</title><rect x="457.2" y="501" width="5.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="460.21" y="511.5" ></text>
</g>
<g >
<title>get_page_from_freelist (17 samples, 0.03%)</title><rect x="1147.8" y="261" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.77" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (17 samples, 0.03%)</title><rect x="567.5" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="570.49" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (370 samples, 0.69%)</title><rect x="247.2" y="517" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="527.5" ></text>
</g>
<g >
<title>__x64_sys_poll (8 samples, 0.01%)</title><rect x="452.1" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="455.08" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (16 samples, 0.03%)</title><rect x="687.7" y="277" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="690.71" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (53 samples, 0.10%)</title><rect x="37.9" y="629" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="40.86" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_poll (34 samples, 0.06%)</title><rect x="1040.3" y="341" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1043.31" y="351.5" ></text>
</g>
<g >
<title>graph_partitioner::single_run (674 samples, 1.26%)</title><rect x="200.2" y="325" width="14.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.20" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (6 samples, 0.01%)</title><rect x="347.5" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="350.46" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned int const, is_boundary&gt;::pair&lt;unsigned int const&amp;&gt; (18 samples, 0.03%)</title><rect x="137.3" y="245" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="140.34" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (6 samples, 0.01%)</title><rect x="1122.3" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1125.26" y="479.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (82 samples, 0.15%)</title><rect x="273.2" y="437" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.18" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (9 samples, 0.02%)</title><rect x="113.8" y="581" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.75" y="591.5" ></text>
</g>
<g >
<title>schedule_timeout (37 samples, 0.07%)</title><rect x="108.9" y="293" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.88" y="303.5" ></text>
</g>
<g >
<title>std::tuple&lt;hashed_edge const&amp;&gt;::tuple (20 samples, 0.04%)</title><rect x="494.6" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="497.55" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;Edge*, unsigned long&gt; (170 samples, 0.32%)</title><rect x="1158.2" y="501" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1161.22" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (10 samples, 0.02%)</title><rect x="577.5" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="580.50" y="415.5" ></text>
</g>
<g >
<title>std::tuple&lt;hashed_edge const&amp;&gt;::tuple (10 samples, 0.02%)</title><rect x="392.6" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="395.56" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_free (110 samples, 0.21%)</title><rect x="526.1" y="437" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="447.5" ></text>
</g>
<g >
<title>_dl_catch_exception (14 samples, 0.03%)</title><rect x="1170.6" y="549" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.60" y="559.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, unsigned long long*, unsigned long long*&gt; (56 samples, 0.10%)</title><rect x="512.0" y="405" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.99" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (11 samples, 0.02%)</title><rect x="953.9" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="956.89" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (8 samples, 0.01%)</title><rect x="201.9" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="204.94" y="207.5" ></text>
</g>
<g >
<title>edge_ratings::rate_expansion_star_2 (8 samples, 0.01%)</title><rect x="200.8" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.75" y="287.5" ></text>
</g>
<g >
<title>_int_malloc (59 samples, 0.11%)</title><rect x="390.2" y="421" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="393.23" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (187 samples, 0.35%)</title><rect x="486.3" y="469" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="489.33" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (63 samples, 0.12%)</title><rect x="685.0" y="341" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="688.04" y="351.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (7 samples, 0.01%)</title><rect x="139.3" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::allocate (9 samples, 0.02%)</title><rect x="409.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.47" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_poll (13 samples, 0.02%)</title><rect x="371.1" y="325" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="374.09" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (14 samples, 0.03%)</title><rect x="1061.8" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1064.80" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (5 samples, 0.01%)</title><rect x="396.7" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="399.68" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (31 samples, 0.06%)</title><rect x="801.4" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="804.35" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::_Node_iterator (6 samples, 0.01%)</title><rect x="281.6" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="284.58" y="495.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (55 samples, 0.10%)</title><rect x="685.2" y="325" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="688.21" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (13 samples, 0.02%)</title><rect x="426.0" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="428.98" y="511.5" ></text>
</g>
<g >
<title>complete_boundary::update_lazy_values (6 samples, 0.01%)</title><rect x="218.3" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.25" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_node (63 samples, 0.12%)</title><rect x="529.7" y="485" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="532.66" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.01%)</title><rect x="208.8" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.80" y="191.5" ></text>
</g>
<g >
<title>munmap_chunk (10 samples, 0.02%)</title><rect x="1146.6" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="463.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;Node&gt; (21 samples, 0.04%)</title><rect x="1142.7" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.72" y="415.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;Node*, unsigned long, Node&gt; (25 samples, 0.05%)</title><rect x="1162.0" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.96" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (388 samples, 0.72%)</title><rect x="1113.8" y="485" width="8.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1116.84" y="495.5" ></text>
</g>
<g >
<title>ondemand_readahead (54 samples, 0.10%)</title><rect x="1167.8" y="341" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1170.85" y="351.5" ></text>
</g>
<g >
<title>__do_page_fault (29 samples, 0.05%)</title><rect x="512.4" y="325" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.43" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (9 samples, 0.02%)</title><rect x="50.4" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="53.43" y="639.5" ></text>
</g>
<g >
<title>x86_pmu_enable (7 samples, 0.01%)</title><rect x="108.3" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.29" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_realloc_insert&lt;Node const&amp;&gt; (25 samples, 0.05%)</title><rect x="1142.6" y="533" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.63" y="543.5" ></text>
</g>
<g >
<title>compare_boundary_pair::operator (6 samples, 0.01%)</title><rect x="152.5" y="261" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="155.48" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (8 samples, 0.01%)</title><rect x="146.9" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="149.88" y="303.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (191 samples, 0.36%)</title><rect x="671.7" y="485" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="674.66" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (78 samples, 0.15%)</title><rect x="804.3" y="549" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="807.29" y="559.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.02%)</title><rect x="510.4" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="513.44" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (7 samples, 0.01%)</title><rect x="214.4" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="217.35" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, bool&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (7 samples, 0.01%)</title><rect x="407.2" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="410.24" y="479.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_deallocate (14 samples, 0.03%)</title><rect x="969.5" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.54" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (7 samples, 0.01%)</title><rect x="205.4" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.42" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (6 samples, 0.01%)</title><rect x="559.8" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="562.84" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::resize (7 samples, 0.01%)</title><rect x="525.6" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="528.56" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (12 samples, 0.02%)</title><rect x="462.4" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.41" y="463.5" ></text>
</g>
<g >
<title>std::forward&lt;std::piecewise_construct_t const&amp;&gt; (7 samples, 0.01%)</title><rect x="619.8" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="622.84" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;Node*, unsigned long&gt; (25 samples, 0.05%)</title><rect x="1162.0" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.96" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="269.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="272.55" y="495.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (11 samples, 0.02%)</title><rect x="584.4" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="587.39" y="399.5" ></text>
</g>
<g >
<title>page_fault (14 samples, 0.03%)</title><rect x="471.2" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.16" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (7 samples, 0.01%)</title><rect x="353.7" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="356.75" y="399.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (258 samples, 0.48%)</title><rect x="514.3" y="517" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="517.32" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (48 samples, 0.09%)</title><rect x="474.4" y="501" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="477.43" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::construct&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (31 samples, 0.06%)</title><rect x="263.9" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="266.95" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5 samples, 0.01%)</title><rect x="265.1" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.07" y="495.5" ></text>
</g>
<g >
<title>__schedule (16 samples, 0.03%)</title><rect x="108.5" y="245" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.51" y="255.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;Node*&gt;, Node*&gt; (21 samples, 0.04%)</title><rect x="1142.7" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.72" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (6 samples, 0.01%)</title><rect x="768.8" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="771.75" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (175 samples, 0.33%)</title><rect x="977.6" y="453" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="980.62" y="463.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (19 samples, 0.04%)</title><rect x="108.4" y="309" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="319.5" ></text>
</g>
<g >
<title>parallel_graph_access::getLocalID (31 samples, 0.06%)</title><rect x="268.6" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.55" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (6 samples, 0.01%)</title><rect x="381.3" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="384.25" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (8 samples, 0.01%)</title><rect x="865.0" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="868.03" y="511.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 0.01%)</title><rect x="409.9" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="335.5" ></text>
</g>
<g >
<title>free_unref_page_list (14 samples, 0.03%)</title><rect x="1176.7" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.73" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (43 samples, 0.08%)</title><rect x="535.9" y="485" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="538.90" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (15 samples, 0.03%)</title><rect x="153.4" y="325" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="156.43" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (48 samples, 0.09%)</title><rect x="800.3" y="501" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="803.30" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.02%)</title><rect x="118.6" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.65" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (25 samples, 0.05%)</title><rect x="329.2" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="332.24" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (5 samples, 0.01%)</title><rect x="336.1" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="339.11" y="495.5" ></text>
</g>
<g >
<title>PMPI_Recv (210 samples, 0.39%)</title><rect x="420.1" y="533" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="423.11" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (10 samples, 0.02%)</title><rect x="1008.0" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.04" y="511.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long long const, unsigned long long&gt; (13 samples, 0.02%)</title><rect x="1107.2" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1110.19" y="431.5" ></text>
</g>
<g >
<title>alloc_pages_vma (6 samples, 0.01%)</title><rect x="1115.7" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.70" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (8 samples, 0.01%)</title><rect x="688.3" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="691.30" y="319.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (13 samples, 0.02%)</title><rect x="208.3" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.33" y="255.5" ></text>
</g>
<g >
<title>__lock_page_killable (8 samples, 0.01%)</title><rect x="994.3" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (45 samples, 0.08%)</title><rect x="468.1" y="485" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="471.08" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="268.4" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.40" y="479.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (8 samples, 0.01%)</title><rect x="113.8" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.77" y="527.5" ></text>
</g>
<g >
<title>complete_boundary::assert_boundaries_are_bnodes (33 samples, 0.06%)</title><rect x="208.6" y="261" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.64" y="271.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (6 samples, 0.01%)</title><rect x="471.2" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.19" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (68 samples, 0.13%)</title><rect x="946.7" y="421" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="949.66" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10 samples, 0.02%)</title><rect x="396.6" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="399.64" y="463.5" ></text>
</g>
<g >
<title>std::sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, parallel_contraction::compute_label_mapping (44 samples, 0.08%)</title><rect x="403.2" y="517" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.19" y="527.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (8 samples, 0.01%)</title><rect x="1171.9" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_node (41 samples, 0.08%)</title><rect x="299.0" y="469" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="302.02" y="479.5" ></text>
</g>
<g >
<title>__schedule (9 samples, 0.02%)</title><rect x="113.5" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.51" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (47 samples, 0.09%)</title><rect x="346.2" y="437" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="349.21" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10 samples, 0.02%)</title><rect x="256.8" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="259.81" y="479.5" ></text>
</g>
<g >
<title>mixed_refinement::perform_refinement (388 samples, 0.72%)</title><rect x="206.5" y="293" width="8.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.48" y="303.5" ></text>
</g>
<g >
<title>balance_management_coarsening::balance_management_coarsening (4,108 samples, 7.67%)</title><rect x="533.6" y="549" width="90.5" height="15.0" fill="rgb(0,171,255)" rx="2" ry="2" />
<text  x="536.59" y="559.5" >balance_ma..</text>
</g>
<g >
<title>__alloc_pages_nodemask (16 samples, 0.03%)</title><rect x="583.9" y="293" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.91" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (100 samples, 0.19%)</title><rect x="588.7" y="421" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="591.67" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (1,523 samples, 2.84%)</title><rect x="1008.3" y="469" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.29" y="479.5" >[l..</text>
</g>
<g >
<title>do_syscall_64 (7 samples, 0.01%)</title><rect x="10.9" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.88" y="527.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_M_head (13 samples, 0.02%)</title><rect x="617.7" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="620.74" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt;::_Hash_node (19 samples, 0.04%)</title><rect x="1127.2" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1130.16" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (19 samples, 0.04%)</title><rect x="108.4" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="463.5" ></text>
</g>
<g >
<title>__do_fault (20 samples, 0.04%)</title><rect x="1171.4" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.44" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_addr (10 samples, 0.02%)</title><rect x="472.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="475.51" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::operator (5 samples, 0.01%)</title><rect x="393.0" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="395.98" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (9 samples, 0.02%)</title><rect x="256.1" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="259.10" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (5 samples, 0.01%)</title><rect x="686.1" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="689.05" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (16 samples, 0.03%)</title><rect x="234.6" y="341" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="237.59" y="351.5" ></text>
</g>
<g >
<title>complete_boundary::update_lazy_values (10 samples, 0.02%)</title><rect x="200.4" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.44" y="255.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::erase (8 samples, 0.01%)</title><rect x="335.9" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="338.91" y="511.5" ></text>
</g>
<g >
<title>x86_pmu_enable (26 samples, 0.05%)</title><rect x="13.0" y="389" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.00" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (13 samples, 0.02%)</title><rect x="288.0" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="291.02" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (6 samples, 0.01%)</title><rect x="225.9" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.88" y="175.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned long long&gt; (56 samples, 0.10%)</title><rect x="512.0" y="389" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.99" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__val_comp_iter&lt;node_ordering::order_nodes_degree (27 samples, 0.05%)</title><rect x="679.2" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="682.22" y="463.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (10 samples, 0.02%)</title><rect x="112.5" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.50" y="543.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (60 samples, 0.11%)</title><rect x="328.5" y="533" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="331.46" y="543.5" ></text>
</g>
<g >
<title>complete_boundary::contains (6 samples, 0.01%)</title><rect x="202.8" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.76" y="223.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (23 samples, 0.04%)</title><rect x="110.0" y="245" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.05" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt;::deallocate (19 samples, 0.04%)</title><rect x="504.6" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.65" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="219.5" y="85" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.47" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::push_back (8 samples, 0.01%)</title><rect x="470.2" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="473.24" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (109 samples, 0.20%)</title><rect x="1075.1" y="469" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1078.14" y="479.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (9 samples, 0.02%)</title><rect x="210.2" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.16" y="191.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (18 samples, 0.03%)</title><rect x="571.6" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="574.57" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (5 samples, 0.01%)</title><rect x="409.9" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="383.5" ></text>
</g>
<g >
<title>parallel_graph_access::new_edge (138 samples, 0.26%)</title><rect x="277.7" y="517" width="3.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="280.68" y="527.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (5 samples, 0.01%)</title><rect x="227.3" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.29" y="191.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;boundary_pair const, data_boundary_pair, hash_boundary_pair, compare_boundary_pair, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt; &gt;::operator[] (6 samples, 0.01%)</title><rect x="200.5" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.53" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (15 samples, 0.03%)</title><rect x="166.7" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="169.72" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::construct&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (24 samples, 0.04%)</title><rect x="264.1" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="267.06" y="463.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, hashed_edge const&amp;, false&gt;::_M_head (10 samples, 0.02%)</title><rect x="494.7" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="497.73" y="415.5" ></text>
</g>
<g >
<title>_int_free (20 samples, 0.04%)</title><rect x="499.6" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="502.64" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (354 samples, 0.66%)</title><rect x="730.2" y="469" width="7.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="733.22" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (252 samples, 0.47%)</title><rect x="706.9" y="421" width="5.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="709.95" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (12 samples, 0.02%)</title><rect x="1156.8" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1159.78" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;::allocate (9 samples, 0.02%)</title><rect x="958.9" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="961.91" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::_Node_iterator (7 samples, 0.01%)</title><rect x="541.4" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="544.41" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;Node*&gt;, Node*, Node&gt; (21 samples, 0.04%)</title><rect x="1142.7" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.72" y="511.5" ></text>
</g>
<g >
<title>native_write_msr (36 samples, 0.07%)</title><rect x="108.9" y="165" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.90" y="175.5" ></text>
</g>
<g >
<title>__do_page_fault (35 samples, 0.07%)</title><rect x="1147.7" y="341" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.68" y="351.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (48 samples, 0.09%)</title><rect x="1166.6" y="261" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1169.61" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (151 samples, 0.28%)</title><rect x="568.8" y="437" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="571.77" y="447.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::size (44 samples, 0.08%)</title><rect x="306.0" y="501" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="308.96" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10 samples, 0.02%)</title><rect x="943.0" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="946.04" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (19 samples, 0.04%)</title><rect x="201.8" y="229" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="204.79" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (7 samples, 0.01%)</title><rect x="152.9" y="261" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="155.90" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (642 samples, 1.20%)</title><rect x="314.2" y="485" width="14.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="317.22" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (5 samples, 0.01%)</title><rect x="218.5" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.47" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (26 samples, 0.05%)</title><rect x="1115.5" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.54" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt; &gt; &gt;::~vector (24 samples, 0.04%)</title><rect x="409.9" y="533" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (31 samples, 0.06%)</title><rect x="531.4" y="517" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="534.38" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (9 samples, 0.02%)</title><rect x="923.3" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="926.27" y="495.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (115 samples, 0.21%)</title><rect x="1081.2" y="453" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1084.24" y="463.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (18 samples, 0.03%)</title><rect x="166.7" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="169.65" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (171 samples, 0.32%)</title><rect x="560.0" y="453" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="562.99" y="463.5" ></text>
</g>
<g >
<title>hash_hashed_edge::operator (9 samples, 0.02%)</title><rect x="490.9" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="493.89" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long long&gt;::operator (6 samples, 0.01%)</title><rect x="1120.4" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1123.41" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_read (6 samples, 0.01%)</title><rect x="12.6" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.56" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (211 samples, 0.39%)</title><rect x="154.1" y="261" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (6 samples, 0.01%)</title><rect x="721.8" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="724.78" y="447.5" ></text>
</g>
<g >
<title>_int_free (6 samples, 0.01%)</title><rect x="934.1" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="937.14" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (12 samples, 0.02%)</title><rect x="621.6" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="624.60" y="463.5" ></text>
</g>
<g >
<title>do_page_fault (10 samples, 0.02%)</title><rect x="1162.3" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.29" y="431.5" ></text>
</g>
<g >
<title>PMPI_Allreduce (82 samples, 0.15%)</title><rect x="273.2" y="517" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.18" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (26 samples, 0.05%)</title><rect x="1117.3" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1120.31" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (23 samples, 0.04%)</title><rect x="918.2" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="921.22" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;::operator[] (145 samples, 0.27%)</title><rect x="404.3" y="533" width="3.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="407.31" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::deallocate (10 samples, 0.02%)</title><rect x="532.6" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.60" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (78 samples, 0.15%)</title><rect x="864.7" y="517" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="867.66" y="527.5" ></text>
</g>
<g >
<title>parallel_mh_async::perform_partitioning (5,289 samples, 9.88%)</title><rect x="122.3" y="501" width="116.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="511.5" >parallel_mh_as..</text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (27 samples, 0.05%)</title><rect x="539.2" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="542.23" y="479.5" ></text>
</g>
<g >
<title>prep_new_page (11 samples, 0.02%)</title><rect x="1168.1" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1171.07" y="255.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (5 samples, 0.01%)</title><rect x="1134.8" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1137.78" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (11 samples, 0.02%)</title><rect x="193.9" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="196.85" y="335.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (16 samples, 0.03%)</title><rect x="1189.1" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.10" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_first_invalid_edge (6 samples, 0.01%)</title><rect x="429.2" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="432.20" y="543.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (11 samples, 0.02%)</title><rect x="349.7" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="352.73" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="384.0" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="387.03" y="479.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (15 samples, 0.03%)</title><rect x="108.5" y="165" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.51" y="175.5" ></text>
</g>
<g >
<title>complete_boundary::assert_bnodes_in_boundaries (10 samples, 0.02%)</title><rect x="202.8" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.76" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (47 samples, 0.09%)</title><rect x="466.2" y="453" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="469.25" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (370 samples, 0.69%)</title><rect x="928.4" y="437" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="931.38" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (23 samples, 0.04%)</title><rect x="1000.8" y="581" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1003.83" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (47 samples, 0.09%)</title><rect x="425.2" y="517" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="428.23" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::deallocate (24 samples, 0.04%)</title><rect x="835.0" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="837.99" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (75 samples, 0.14%)</title><rect x="674.0" y="453" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="677.00" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (18 samples, 0.03%)</title><rect x="229.2" y="165" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.23" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (65 samples, 0.12%)</title><rect x="549.3" y="453" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="552.35" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (347 samples, 0.65%)</title><rect x="574.5" y="469" width="7.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="577.52" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (60 samples, 0.11%)</title><rect x="821.5" y="501" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="824.46" y="511.5" ></text>
</g>
<g >
<title>page_fault (57 samples, 0.11%)</title><rect x="111.2" y="533" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.24" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::pair&lt;unsigned long long, unsigned long long&gt; const&amp;&gt; (12 samples, 0.02%)</title><rect x="501.2" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="504.21" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (9 samples, 0.02%)</title><rect x="301.3" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.31" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (21 samples, 0.04%)</title><rect x="207.1" y="181" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.06" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, compare_nodes_contains, unsigned long, true&gt;::_S_equals (55 samples, 0.10%)</title><rect x="130.9" y="245" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="133.88" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="506.0" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="509.01" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (16 samples, 0.03%)</title><rect x="536.8" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="539.85" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (19 samples, 0.04%)</title><rect x="966.1" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="969.12" y="415.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (22 samples, 0.04%)</title><rect x="210.5" y="197" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.49" y="207.5" ></text>
</g>
<g >
<title>parallel_graph_access::setEdgeWeight (12 samples, 0.02%)</title><rect x="1003.1" y="581" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1006.11" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (238 samples, 0.44%)</title><rect x="485.4" y="501" width="5.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="488.38" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;::~unordered_map (24 samples, 0.04%)</title><rect x="409.9" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="463.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (6 samples, 0.01%)</title><rect x="1171.9" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.93" y="287.5" ></text>
</g>
<g >
<title>ext4_readpages (26 samples, 0.05%)</title><rect x="1168.4" y="293" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1171.42" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator++ (10 samples, 0.02%)</title><rect x="692.6" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="695.55" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt;::_M_next (6 samples, 0.01%)</title><rect x="409.1" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.07" y="463.5" ></text>
</g>
<g >
<title>graph_extractor::extract_two_blocks (6 samples, 0.01%)</title><rect x="200.1" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.07" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::construct&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (52 samples, 0.10%)</title><rect x="391.6" y="469" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="394.64" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (5 samples, 0.01%)</title><rect x="1109.0" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1111.97" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (30 samples, 0.06%)</title><rect x="126.9" y="277" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="129.91" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;hashed_edge const, data_hashed_edge&gt;::pair&lt;hashed_edge const&amp;&gt; (7 samples, 0.01%)</title><rect x="264.2" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="267.19" y="447.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (1,987 samples, 3.71%)</title><rect x="678.8" y="533" width="43.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="681.84" y="543.5" >node..</text>
</g>
<g >
<title>ret_from_intr (7 samples, 0.01%)</title><rect x="1041.4" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.44" y="399.5" ></text>
</g>
<g >
<title>__do_page_fault (17 samples, 0.03%)</title><rect x="1162.9" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.93" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeLabel (25 samples, 0.05%)</title><rect x="922.9" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.92" y="511.5" ></text>
</g>
<g >
<title>do_page_fault (14 samples, 0.03%)</title><rect x="113.4" y="565" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.44" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (16 samples, 0.03%)</title><rect x="410.6" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="413.57" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (18 samples, 0.03%)</title><rect x="335.2" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="338.21" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::update_ghost_node_data_finish (178 samples, 0.33%)</title><rect x="350.2" y="533" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="353.15" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (21 samples, 0.04%)</title><rect x="1085.6" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1088.61" y="511.5" ></text>
</g>
<g >
<title>page_fault (63 samples, 0.12%)</title><rect x="1165.2" y="341" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1168.16" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;hashed_edge const, data_hashed_edge&gt;::pair&lt;hashed_edge const&amp;&gt; (29 samples, 0.05%)</title><rect x="391.9" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="394.92" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (52 samples, 0.10%)</title><rect x="301.5" y="469" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.51" y="479.5" ></text>
</g>
<g >
<title>__lock_page_killable (22 samples, 0.04%)</title><rect x="112.8" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (15 samples, 0.03%)</title><rect x="300.5" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.54" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="313.2" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="316.23" y="447.5" ></text>
</g>
<g >
<title>malloc_consolidate (211 samples, 0.39%)</title><rect x="154.1" y="213" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (28 samples, 0.05%)</title><rect x="980.7" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="983.73" y="431.5" ></text>
</g>
<g >
<title>malloc_consolidate (7 samples, 0.01%)</title><rect x="205.7" y="53" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.67" y="63.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (22 samples, 0.04%)</title><rect x="1189.0" y="645" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1191.96" y="655.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::push (13 samples, 0.02%)</title><rect x="677.2" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="680.24" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (8 samples, 0.01%)</title><rect x="563.8" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="566.76" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::find (9 samples, 0.02%)</title><rect x="225.8" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.84" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;node_ordering::order_nodes_degree (93 samples, 0.17%)</title><rect x="681.3" y="437" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="684.31" y="447.5" ></text>
</g>
<g >
<title>native_write_msr (16 samples, 0.03%)</title><rect x="1171.5" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.46" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="926.1" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="929.11" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (18 samples, 0.03%)</title><rect x="598.2" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="601.17" y="479.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, NodeData*, NodeData*&gt; (87 samples, 0.16%)</title><rect x="1146.9" y="421" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.86" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_free (80 samples, 0.15%)</title><rect x="296.5" y="421" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (11 samples, 0.02%)</title><rect x="836.2" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="839.16" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (1,523 samples, 2.84%)</title><rect x="1008.3" y="549" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.29" y="559.5" >[l..</text>
</g>
<g >
<title>malloc_consolidate (6 samples, 0.01%)</title><rect x="866.2" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.18" y="383.5" ></text>
</g>
<g >
<title>error_entry (8 samples, 0.01%)</title><rect x="1147.5" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.50" y="383.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (365 samples, 0.68%)</title><rect x="412.1" y="517" width="8.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="415.07" y="527.5" ></text>
</g>
<g >
<title>malloc_consolidate (86 samples, 0.16%)</title><rect x="290.2" y="373" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (31 samples, 0.06%)</title><rect x="292.1" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.12" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long long&gt;::operator (7 samples, 0.01%)</title><rect x="1124.6" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1127.58" y="511.5" ></text>
</g>
<g >
<title>MPI_Allgather (52 samples, 0.10%)</title><rect x="993.3" y="581" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="996.32" y="591.5" ></text>
</g>
<g >
<title>std::fill_n&lt;Edge*, unsigned long, Edge&gt; (19 samples, 0.04%)</title><rect x="471.1" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.08" y="447.5" ></text>
</g>
<g >
<title>do_sys_poll (5 samples, 0.01%)</title><rect x="452.1" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="455.10" y="335.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.02%)</title><rect x="407.0" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.96" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (91 samples, 0.17%)</title><rect x="136.0" y="293" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="138.99" y="303.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (28 samples, 0.05%)</title><rect x="110.0" y="325" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (132 samples, 0.25%)</title><rect x="772.3" y="421" width="2.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="775.30" y="431.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long long*, unsigned long&gt; (10 samples, 0.02%)</title><rect x="969.3" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.31" y="447.5" ></text>
</g>
<g >
<title>PartialBoundary::~PartialBoundary (287 samples, 0.54%)</title><rect x="158.9" y="213" width="6.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.85" y="223.5" ></text>
</g>
<g >
<title>do_mmap (5 samples, 0.01%)</title><rect x="1170.6" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="383.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (8 samples, 0.01%)</title><rect x="113.8" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.77" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt;::_Node_iterator_base (9 samples, 0.02%)</title><rect x="1084.7" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1087.75" y="495.5" ></text>
</g>
<g >
<title>unmap_single_vma (20 samples, 0.04%)</title><rect x="1189.0" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (14 samples, 0.03%)</title><rect x="296.0" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.04" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*, std::pair&lt;unsigned long long, unsigned long long&gt;*, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt; (74 samples, 0.14%)</title><rect x="502.3" y="501" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="505.27" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (12 samples, 0.02%)</title><rect x="201.9" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="204.85" y="223.5" ></text>
</g>
<g >
<title>__do_page_fault (12 samples, 0.02%)</title><rect x="1115.7" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.67" y="399.5" ></text>
</g>
<g >
<title>hash_boundary_pair::operator (6 samples, 0.01%)</title><rect x="153.5" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="156.54" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (10 samples, 0.02%)</title><rect x="102.0" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="105.03" y="639.5" ></text>
</g>
<g >
<title>__GI___poll (7 samples, 0.01%)</title><rect x="353.7" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="356.75" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_Hash_node_value_base (8 samples, 0.01%)</title><rect x="1127.4" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1130.40" y="495.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (5 samples, 0.01%)</title><rect x="512.9" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.89" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;Node&gt;::construct&lt;Node, Node const&amp;&gt; (32 samples, 0.06%)</title><rect x="1141.9" y="517" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1144.86" y="527.5" ></text>
</g>
<g >
<title>_int_malloc (8 samples, 0.01%)</title><rect x="227.0" y="53" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.03" y="63.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (65 samples, 0.12%)</title><rect x="424.8" y="533" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="427.83" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (6 samples, 0.01%)</title><rect x="968.7" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="971.72" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (16 samples, 0.03%)</title><rect x="836.1" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="839.11" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (8 samples, 0.01%)</title><rect x="18.5" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="21.49" y="639.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (16 samples, 0.03%)</title><rect x="344.6" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="347.58" y="415.5" ></text>
</g>
<g >
<title>__do_fault (9 samples, 0.02%)</title><rect x="108.2" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.24" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (81 samples, 0.15%)</title><rect x="1104.2" y="453" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1107.19" y="463.5" ></text>
</g>
<g >
<title>schedule (37 samples, 0.07%)</title><rect x="108.9" y="277" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.88" y="287.5" ></text>
</g>
<g >
<title>PMPI_Allreduce (14 samples, 0.03%)</title><rect x="106.3" y="597" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.35" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_allocate (14 samples, 0.03%)</title><rect x="969.0" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.01" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (12 samples, 0.02%)</title><rect x="280.1" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="283.13" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (28 samples, 0.05%)</title><rect x="848.6" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="851.59" y="495.5" ></text>
</g>
<g >
<title>vm_mmap_pgoff (5 samples, 0.01%)</title><rect x="1170.6" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="399.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (30 samples, 0.06%)</title><rect x="402.5" y="517" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.53" y="527.5" ></text>
</g>
<g >
<title>quotient_graph_refinement::perform_a_two_way_refinement (252 samples, 0.47%)</title><rect x="209.5" y="261" width="5.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="212.48" y="271.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (16 samples, 0.03%)</title><rect x="243.3" y="341" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="246.27" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_M_next (13 samples, 0.02%)</title><rect x="292.1" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.12" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (8 samples, 0.01%)</title><rect x="464.4" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="467.35" y="463.5" ></text>
</g>
<g >
<title>sock_read_iter (38 samples, 0.07%)</title><rect x="108.9" y="357" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="367.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (8 samples, 0.01%)</title><rect x="610.6" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.58" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (8 samples, 0.01%)</title><rect x="209.0" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.95" y="175.5" ></text>
</g>
<g >
<title>graph_partitioner::perform_recursive_partitioning_internal (704 samples, 1.32%)</title><rect x="215.1" y="341" width="15.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="351.5" ></text>
</g>
<g >
<title>prep_new_page (12 samples, 0.02%)</title><rect x="1147.9" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.88" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2,276 samples, 4.25%)</title><rect x="740.1" y="469" width="50.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="743.12" y="479.5" >std::..</text>
</g>
<g >
<title>MPI_Bcast (10 samples, 0.02%)</title><rect x="1008.0" y="565" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.04" y="575.5" ></text>
</g>
<g >
<title>__vm_munmap (8 samples, 0.01%)</title><rect x="1041.9" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (9 samples, 0.02%)</title><rect x="208.9" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.93" y="191.5" ></text>
</g>
<g >
<title>do_sys_poll (7 samples, 0.01%)</title><rect x="255.1" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="258.06" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (12 samples, 0.02%)</title><rect x="373.5" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="376.47" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (13 samples, 0.02%)</title><rect x="223.8" y="133" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="226.81" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets (110 samples, 0.21%)</title><rect x="526.1" y="485" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="495.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.03%)</title><rect x="44.2" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="47.23" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_poll (5 samples, 0.01%)</title><rect x="118.8" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.78" y="351.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::size (8 samples, 0.01%)</title><rect x="638.4" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="641.38" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (620 samples, 1.16%)</title><rect x="1096.4" y="517" width="13.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1099.39" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="190.1" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="193.13" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (6 samples, 0.01%)</title><rect x="925.4" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="928.43" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (14 samples, 0.03%)</title><rect x="113.4" y="549" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.44" y="559.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (20 samples, 0.04%)</title><rect x="1171.4" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.44" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (5 samples, 0.01%)</title><rect x="469.4" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.36" y="447.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (7 samples, 0.01%)</title><rect x="1163.0" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.98" y="351.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (30 samples, 0.06%)</title><rect x="306.2" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="309.25" y="447.5" ></text>
</g>
<g >
<title>complete_boundary::assert_bnodes_in_boundaries (29 samples, 0.05%)</title><rect x="217.1" y="213" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.06" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_default_initialize (15 samples, 0.03%)</title><rect x="992.9" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.94" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (10 samples, 0.02%)</title><rect x="695.7" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="698.71" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="1106.0" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1108.98" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (42 samples, 0.08%)</title><rect x="55.8" y="629" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="58.85" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (8 samples, 0.01%)</title><rect x="1122.1" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1125.09" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.02%)</title><rect x="1146.6" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (17 samples, 0.03%)</title><rect x="1084.1" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1087.07" y="479.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (5 samples, 0.01%)</title><rect x="217.6" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.59" y="207.5" ></text>
</g>
<g >
<title>_dl_map_object_deps (14 samples, 0.03%)</title><rect x="1170.6" y="565" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.60" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator-- (6 samples, 0.01%)</title><rect x="707.6" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="710.63" y="415.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long long const&amp;&gt; (9 samples, 0.02%)</title><rect x="675.6" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="678.65" y="463.5" ></text>
</g>
<g >
<title>two_way_fm::assert_directed_boundary_condition (29 samples, 0.05%)</title><rect x="226.4" y="213" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="229.36" y="223.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::back (44 samples, 0.08%)</title><rect x="307.0" y="485" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="310.02" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (22 samples, 0.04%)</title><rect x="837.7" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="840.68" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (32 samples, 0.06%)</title><rect x="386.8" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="389.79" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;coarseningEdge, std::allocator&lt;coarseningEdge&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="167.7" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="170.73" y="351.5" ></text>
</g>
<g >
<title>handle_irq_event (6 samples, 0.01%)</title><rect x="1041.4" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.44" y="351.5" ></text>
</g>
<g >
<title>vfs_read (28 samples, 0.05%)</title><rect x="110.0" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="431.5" ></text>
</g>
<g >
<title>PMPI_Alltoallv (18 samples, 0.03%)</title><rect x="994.5" y="581" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.53" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 0.01%)</title><rect x="268.0" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.02" y="447.5" ></text>
</g>
<g >
<title>graph_access::setEdgeWeight (26 samples, 0.05%)</title><rect x="121.2" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="124.22" y="479.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (23 samples, 0.04%)</title><rect x="110.0" y="197" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.05" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="1117.9" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1120.88" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (20 samples, 0.04%)</title><rect x="705.3" y="341" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="708.29" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (18 samples, 0.03%)</title><rect x="312.0" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="314.98" y="447.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (53 samples, 0.10%)</title><rect x="11.3" y="485" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="14.26" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::size (18 samples, 0.03%)</title><rect x="428.5" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="431.49" y="495.5" ></text>
</g>
<g >
<title>schedule_timeout (27 samples, 0.05%)</title><rect x="110.0" y="309" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.00" y="319.5" ></text>
</g>
<g >
<title>std::pair&lt;hashed_edge const, data_hashed_edge&gt;::pair&lt;hashed_edge const&amp;, 0ul&gt; (6 samples, 0.01%)</title><rect x="289.7" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="292.69" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (9 samples, 0.02%)</title><rect x="1155.4" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1158.44" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (9 samples, 0.02%)</title><rect x="215.1" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="191.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (51 samples, 0.10%)</title><rect x="11.3" y="437" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="14.30" y="447.5" ></text>
</g>
<g >
<title>elf_machine_rela (13 samples, 0.02%)</title><rect x="1171.1" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.07" y="543.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (7 samples, 0.01%)</title><rect x="111.5" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="303.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (341 samples, 0.64%)</title><rect x="794.5" y="549" width="7.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="797.54" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (181 samples, 0.34%)</title><rect x="996.5" y="581" width="4.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="999.54" y="591.5" ></text>
</g>
<g >
<title>__mmap64 (5 samples, 0.01%)</title><rect x="1170.6" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (132 samples, 0.25%)</title><rect x="918.7" y="421" width="2.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="921.73" y="431.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (28 samples, 0.05%)</title><rect x="148.4" y="357" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="151.40" y="367.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::param_type::b (22 samples, 0.04%)</title><rect x="990.7" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="993.70" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (12 samples, 0.02%)</title><rect x="482.5" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="485.47" y="447.5" ></text>
</g>
<g >
<title>two_way_fm::move_node (98 samples, 0.18%)</title><rect x="227.5" y="213" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.49" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (14 samples, 0.03%)</title><rect x="1112.4" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1115.39" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (13 samples, 0.02%)</title><rect x="553.2" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="556.23" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (388 samples, 0.72%)</title><rect x="1113.8" y="501" width="8.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1116.84" y="511.5" ></text>
</g>
<g >
<title>std::copy&lt;std::move_iterator&lt;unsigned long long*&gt;, unsigned long long*&gt; (56 samples, 0.10%)</title><rect x="512.0" y="437" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.99" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::update_ghost_node_data (436 samples, 0.81%)</title><rect x="340.5" y="533" width="9.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="343.54" y="543.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; (5 samples, 0.01%)</title><rect x="63.9" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="66.87" y="639.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (21 samples, 0.04%)</title><rect x="219.2" y="149" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.20" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (21 samples, 0.04%)</title><rect x="56.8" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="59.77" y="639.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_M_head (9 samples, 0.02%)</title><rect x="1134.4" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1137.43" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator++ (10 samples, 0.02%)</title><rect x="702.2" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="705.21" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (13 samples, 0.02%)</title><rect x="587.2" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="590.22" y="431.5" ></text>
</g>
<g >
<title>two_way_fm::init_queue_with_boundary (8 samples, 0.01%)</title><rect x="219.7" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.66" y="191.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (301 samples, 0.56%)</title><rect x="106.8" y="581" width="6.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.81" y="591.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::pop (35 samples, 0.07%)</title><rect x="305.2" y="501" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="308.19" y="511.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long long&gt;::operator (10 samples, 0.02%)</title><rect x="597.7" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="600.69" y="479.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;*, std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt; &gt; (6 samples, 0.01%)</title><rect x="266.0" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.04" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (258 samples, 0.48%)</title><rect x="1163.5" y="485" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%)</title><rect x="96.4" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="99.36" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10 samples, 0.02%)</title><rect x="53.1" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="56.11" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (405 samples, 0.76%)</title><rect x="564.0" y="485" width="8.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="566.98" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::getSecondPartitionIndex (290 samples, 0.54%)</title><rect x="823.9" y="549" width="6.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="826.95" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (15 samples, 0.03%)</title><rect x="217.9" y="149" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.92" y="159.5" ></text>
</g>
<g >
<title>x86_pmu_enable (23 samples, 0.04%)</title><rect x="110.0" y="229" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.05" y="239.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (73 samples, 0.14%)</title><rect x="694.1" y="325" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="697.08" y="335.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (10 samples, 0.02%)</title><rect x="1008.0" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.04" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::find (557 samples, 1.04%)</title><rect x="541.6" y="517" width="12.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="544.57" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (9 samples, 0.02%)</title><rect x="130.5" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="133.48" y="239.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (5 samples, 0.01%)</title><rect x="1138.9" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.91" y="303.5" ></text>
</g>
<g >
<title>ctx_resched (9 samples, 0.02%)</title><rect x="1189.8" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.76" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (51 samples, 0.10%)</title><rect x="993.3" y="549" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="996.32" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_valptr (6 samples, 0.01%)</title><rect x="147.5" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="150.45" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (10 samples, 0.02%)</title><rect x="470.9" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="473.86" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (13 samples, 0.02%)</title><rect x="693.2" y="341" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="696.17" y="351.5" ></text>
</g>
<g >
<title>__lru_cache_add (7 samples, 0.01%)</title><rect x="1161.1" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.06" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (26 samples, 0.05%)</title><rect x="335.0" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="338.03" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (7 samples, 0.01%)</title><rect x="119.5" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="122.46" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::erase (23 samples, 0.04%)</title><rect x="345.7" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.70" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (282 samples, 0.53%)</title><rect x="557.7" y="485" width="6.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="560.72" y="495.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt;*&gt;::pointer_to (5 samples, 0.01%)</title><rect x="164.9" y="117" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="167.87" y="127.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::size (183 samples, 0.34%)</title><rect x="641.7" y="517" width="4.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="644.70" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (28 samples, 0.05%)</title><rect x="348.1" y="389" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="351.13" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, bool&gt;, false&gt; &gt; &gt;::allocate (14 samples, 0.03%)</title><rect x="406.9" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.91" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_deallocate_node (8 samples, 0.01%)</title><rect x="345.9" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.94" y="399.5" ></text>
</g>
<g >
<title>edge_ratings::rate_expansion_star_2 (5 samples, 0.01%)</title><rect x="215.6" y="261" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.59" y="271.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10 samples, 0.02%)</title><rect x="969.0" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.03" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt;, true&gt; &gt; &gt;::_M_deallocate_node (290 samples, 0.54%)</title><rect x="158.8" y="293" width="6.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.78" y="303.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (6 samples, 0.01%)</title><rect x="404.0" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="407.02" y="479.5" ></text>
</g>
<g >
<title>std::forward&lt;std::piecewise_construct_t const&amp;&gt; (7 samples, 0.01%)</title><rect x="66.4" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="69.38" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::size (10 samples, 0.02%)</title><rect x="212.7" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.72" y="159.5" ></text>
</g>
<g >
<title>get_page_from_freelist (33 samples, 0.06%)</title><rect x="1160.3" y="325" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1163.31" y="335.5" ></text>
</g>
<g >
<title>_int_free (6 samples, 0.01%)</title><rect x="159.0" y="69" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.98" y="79.5" ></text>
</g>
<g >
<title>__GI__dl_catch_exception (5 samples, 0.01%)</title><rect x="109.8" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="367.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (69 samples, 0.13%)</title><rect x="442.6" y="501" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="445.55" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (5 samples, 0.01%)</title><rect x="106.7" y="565" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.65" y="575.5" ></text>
</g>
<g >
<title>ghost_node_communication::addLabel (1,142 samples, 2.13%)</title><rect x="841.2" y="533" width="25.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="844.21" y="543.5" >g..</text>
</g>
<g >
<title>do_IRQ (7 samples, 0.01%)</title><rect x="1041.7" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.66" y="399.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::_Bit_iterator (52 samples, 0.10%)</title><rect x="861.0" y="501" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="864.00" y="511.5" ></text>
</g>
<g >
<title>do_page_fault (46 samples, 0.09%)</title><rect x="610.0" y="373" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.01" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (15 samples, 0.03%)</title><rect x="839.4" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="842.35" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (83 samples, 0.16%)</title><rect x="802.4" y="533" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="805.41" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (6 samples, 0.01%)</title><rect x="1127.3" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1130.27" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.01%)</title><rect x="1087.5" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1090.50" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (131 samples, 0.24%)</title><rect x="239.0" y="357" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="367.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_first_edge (9 samples, 0.02%)</title><rect x="429.0" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="432.00" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (29 samples, 0.05%)</title><rect x="957.3" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="960.26" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (7 samples, 0.01%)</title><rect x="256.9" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="259.87" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (12 samples, 0.02%)</title><rect x="598.6" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="601.57" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (9 samples, 0.02%)</title><rect x="1135.6" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1138.58" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_addr (5 samples, 0.01%)</title><rect x="621.8" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="624.76" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::_M_check_len (12 samples, 0.02%)</title><rect x="504.0" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="506.96" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::start_construction (239 samples, 0.45%)</title><rect x="1158.2" y="565" width="5.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1161.22" y="575.5" ></text>
</g>
<g >
<title>handle_irq_event (6 samples, 0.01%)</title><rect x="1041.7" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.66" y="367.5" ></text>
</g>
<g >
<title>operator new (40 samples, 0.07%)</title><rect x="492.4" y="453" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="495.39" y="463.5" ></text>
</g>
<g >
<title>parallel_graph_access::update_non_contained_block_balance (7 samples, 0.01%)</title><rect x="353.9" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="356.92" y="495.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (21 samples, 0.04%)</title><rect x="107.7" y="197" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.71" y="207.5" ></text>
</g>
<g >
<title>__handle_mm_fault (23 samples, 0.04%)</title><rect x="512.5" y="293" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.54" y="303.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (21 samples, 0.04%)</title><rect x="112.8" y="341" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="351.5" ></text>
</g>
<g >
<title>std::_Bit_reference::operator bool (6 samples, 0.01%)</title><rect x="339.4" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="342.37" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::construct&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (24 samples, 0.04%)</title><rect x="289.4" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="292.43" y="479.5" ></text>
</g>
<g >
<title>std::pair&lt;boundary_pair const, data_boundary_pair&gt;::~pair (287 samples, 0.54%)</title><rect x="158.9" y="245" width="6.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.85" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.01%)</title><rect x="407.6" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="410.57" y="511.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long long*, unsigned long, unsigned long long&gt; (6 samples, 0.01%)</title><rect x="242.6" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.57" y="415.5" ></text>
</g>
<g >
<title>new_sync_read (19 samples, 0.04%)</title><rect x="108.4" y="357" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;::deallocate (24 samples, 0.04%)</title><rect x="499.6" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="502.55" y="447.5" ></text>
</g>
<g >
<title>std::_Bit_iterator_base::_Bit_iterator_base (6 samples, 0.01%)</title><rect x="46.4" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="49.41" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::size (12 samples, 0.02%)</title><rect x="224.8" y="101" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="227.80" y="111.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::push (208 samples, 0.39%)</title><rect x="671.3" y="501" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="674.28" y="511.5" ></text>
</g>
<g >
<title>page_fault (72 samples, 0.13%)</title><rect x="1159.9" y="437" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1162.87" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (147 samples, 0.27%)</title><rect x="132.2" y="293" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="135.25" y="303.5" ></text>
</g>
<g >
<title>edge_ratings::rate (126 samples, 0.24%)</title><rect x="165.3" y="405" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="168.26" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (20 samples, 0.04%)</title><rect x="708.0" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="711.03" y="399.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (26 samples, 0.05%)</title><rect x="203.7" y="181" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.73" y="191.5" ></text>
</g>
<g >
<title>std::_Bit_reference::operator= (37 samples, 0.07%)</title><rect x="858.8" y="517" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="861.82" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (16 samples, 0.03%)</title><rect x="272.8" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="275.83" y="511.5" ></text>
</g>
<g >
<title>__do_page_fault (23 samples, 0.04%)</title><rect x="583.9" y="357" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.89" y="367.5" ></text>
</g>
<g >
<title>__do_fault (8 samples, 0.01%)</title><rect x="1171.9" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10 samples, 0.02%)</title><rect x="256.8" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="259.81" y="495.5" ></text>
</g>
<g >
<title>std::fill_n&lt;NodeData*, unsigned long, NodeData&gt; (43 samples, 0.08%)</title><rect x="1162.5" y="469" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.54" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (266 samples, 0.50%)</title><rect x="182.3" y="341" width="5.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="185.26" y="351.5" ></text>
</g>
<g >
<title>parallel_contraction::get_nodes_to_cnodes_ghost_nodes (962 samples, 1.80%)</title><rect x="411.0" y="549" width="21.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="414.01" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::find (60 samples, 0.11%)</title><rect x="278.3" y="501" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="281.25" y="511.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__const_get&lt;unsigned long long const, unsigned long long&gt; (7 samples, 0.01%)</title><rect x="1120.1" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1123.15" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (241 samples, 0.45%)</title><rect x="383.3" y="501" width="5.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="386.35" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;::allocate (5 samples, 0.01%)</title><rect x="103.3" y="645" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="106.33" y="655.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, hashed_edge const&amp;&gt;::_Tuple_impl (9 samples, 0.02%)</title><rect x="264.4" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="267.39" y="431.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (459 samples, 0.86%)</title><rect x="777.8" y="421" width="10.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="780.84" y="431.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (28 samples, 0.05%)</title><rect x="209.9" y="197" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="212.88" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="256.2" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="259.17" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (9 samples, 0.02%)</title><rect x="408.3" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.32" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (11 samples, 0.02%)</title><rect x="1125.4" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1128.44" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (123 samples, 0.23%)</title><rect x="528.5" y="501" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="531.54" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (18 samples, 0.03%)</title><rect x="148.0" y="341" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="151.01" y="351.5" ></text>
</g>
<g >
<title>__schedule (37 samples, 0.07%)</title><rect x="108.9" y="261" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.88" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::operator[] (17 samples, 0.03%)</title><rect x="1055.1" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1058.08" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (117 samples, 0.22%)</title><rect x="252.7" y="373" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="255.71" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (27 samples, 0.05%)</title><rect x="394.6" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="397.59" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_Node_iterator_base (5 samples, 0.01%)</title><rect x="552.5" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="555.50" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::_Node_iterator (9 samples, 0.02%)</title><rect x="61.7" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="64.69" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (20 samples, 0.04%)</title><rect x="243.2" y="389" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="246.21" y="399.5" ></text>
</g>
<g >
<title>__GI___poll (7 samples, 0.01%)</title><rect x="277.5" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="280.50" y="479.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::_Bit_iterator (9 samples, 0.02%)</title><rect x="95.8" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="98.77" y="639.5" ></text>
</g>
<g >
<title>PartialBoundary::contains (20 samples, 0.04%)</title><rect x="217.8" y="181" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.81" y="191.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (8 samples, 0.01%)</title><rect x="113.5" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.53" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (25 samples, 0.05%)</title><rect x="294.6" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="297.61" y="511.5" ></text>
</g>
<g >
<title>page_cache_async_readahead (54 samples, 0.10%)</title><rect x="1167.8" y="357" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1170.85" y="367.5" ></text>
</g>
<g >
<title>std::_Bit_reference::_Bit_reference (8 samples, 0.01%)</title><rect x="46.5" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="49.55" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;NodeData*, unsigned long, NodeData&gt; (43 samples, 0.08%)</title><rect x="1162.5" y="517" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.54" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::find (8 samples, 0.01%)</title><rect x="265.0" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.00" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (6 samples, 0.01%)</title><rect x="1113.4" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1116.40" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_range_check (20 samples, 0.04%)</title><rect x="856.2" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="859.22" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="208.2" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.22" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (22 samples, 0.04%)</title><rect x="595.0" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="598.00" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::~new_allocator (6 samples, 0.01%)</title><rect x="1128.1" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1131.15" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (67 samples, 0.13%)</title><rect x="1123.3" y="517" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1126.26" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (13 samples, 0.02%)</title><rect x="794.3" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="797.26" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (15 samples, 0.03%)</title><rect x="840.6" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="843.57" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;::deallocate (21 samples, 0.04%)</title><rect x="933.8" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="936.85" y="383.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (12 samples, 0.02%)</title><rect x="243.3" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="246.27" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (34 samples, 0.06%)</title><rect x="426.7" y="469" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="429.75" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (101 samples, 0.19%)</title><rect x="300.9" y="485" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.93" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (719 samples, 1.34%)</title><rect x="355.7" y="453" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_valptr (10 samples, 0.02%)</title><rect x="152.6" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="155.63" y="255.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, long&gt; (19 samples, 0.04%)</title><rect x="581.1" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="584.07" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (48 samples, 0.09%)</title><rect x="570.5" y="421" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="573.51" y="431.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (37 samples, 0.07%)</title><rect x="147.6" y="357" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="150.59" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (56 samples, 0.10%)</title><rect x="686.8" y="325" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="689.82" y="335.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (33 samples, 0.06%)</title><rect x="1160.3" y="341" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1163.31" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (7 samples, 0.01%)</title><rect x="148.1" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="151.12" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (11 samples, 0.02%)</title><rect x="804.0" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="807.00" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (91 samples, 0.17%)</title><rect x="1111.8" y="485" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1114.77" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt;, std::pair&lt;unsigned long long, unsigned long long&gt;*&gt; (23 samples, 0.04%)</title><rect x="293.2" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.17" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (18 samples, 0.03%)</title><rect x="937.3" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="940.33" y="415.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;*, std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt; &gt; (22 samples, 0.04%)</title><rect x="504.6" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.58" y="527.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (12 samples, 0.02%)</title><rect x="14.6" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.56" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%)</title><rect x="265.1" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.07" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="389.6" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="392.63" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::deallocate (30 samples, 0.06%)</title><rect x="299.2" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="302.19" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;hashed_edge const, data_hashed_edge&gt;::pair&lt;hashed_edge const&amp;&gt; (8 samples, 0.01%)</title><rect x="289.6" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="292.65" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (6 samples, 0.01%)</title><rect x="965.9" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="968.94" y="383.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::operator* (19 samples, 0.04%)</title><rect x="647.2" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="650.24" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (19 samples, 0.04%)</title><rect x="867.7" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="870.66" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, bool&gt;, false&gt;::_M_next (8 samples, 0.01%)</title><rect x="410.0" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="413.04" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (8 samples, 0.01%)</title><rect x="1135.2" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1138.18" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (9 samples, 0.02%)</title><rect x="968.5" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="971.52" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (265 samples, 0.50%)</title><rect x="159.3" y="149" width="5.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="162.31" y="159.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (8 samples, 0.01%)</title><rect x="403.8" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.85" y="463.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; (5 samples, 0.01%)</title><rect x="1127.0" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1130.05" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::getTargetPE (291 samples, 0.54%)</title><rect x="849.3" y="517" width="6.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="852.32" y="527.5" ></text>
</g>
<g >
<title>schedule_timeout (16 samples, 0.03%)</title><rect x="108.5" y="277" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.51" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::size (5 samples, 0.01%)</title><rect x="338.9" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="341.93" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (5 samples, 0.01%)</title><rect x="594.4" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="597.36" y="447.5" ></text>
</g>
<g >
<title>handle_mm_fault (25 samples, 0.05%)</title><rect x="1145.8" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.76" y="463.5" ></text>
</g>
<g >
<title>MPI_Isend (20 samples, 0.04%)</title><rect x="867.6" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="870.63" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::at (12 samples, 0.02%)</title><rect x="830.4" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="833.41" y="543.5" ></text>
</g>
<g >
<title>ghost_node_communication::update_ghost_node_data (9 samples, 0.02%)</title><rect x="981.8" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="984.83" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (19 samples, 0.04%)</title><rect x="926.3" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="929.31" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (18 samples, 0.03%)</title><rect x="994.5" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.53" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (59 samples, 0.11%)</title><rect x="430.2" y="533" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="433.23" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (20 samples, 0.04%)</title><rect x="195.1" y="357" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="198.09" y="367.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (823 samples, 1.54%)</title><rect x="683.6" y="421" width="18.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.65" y="431.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (5 samples, 0.01%)</title><rect x="330.2" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="333.21" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (131 samples, 0.24%)</title><rect x="239.0" y="453" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="463.5" ></text>
</g>
<g >
<title>sock_recvmsg (19 samples, 0.04%)</title><rect x="108.4" y="325" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="335.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (38 samples, 0.07%)</title><rect x="401.4" y="485" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="404.45" y="495.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::pop (143 samples, 0.27%)</title><rect x="638.6" y="517" width="3.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="641.55" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (35 samples, 0.07%)</title><rect x="141.1" y="293" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="144.13" y="303.5" ></text>
</g>
<g >
<title>complete_boundary::assert_boundaries_are_bnodes (9 samples, 0.02%)</title><rect x="203.0" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.98" y="239.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (14 samples, 0.03%)</title><rect x="106.3" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.35" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (6 samples, 0.01%)</title><rect x="285.8" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="288.77" y="431.5" ></text>
</g>
<g >
<title>page_fault (12 samples, 0.02%)</title><rect x="994.6" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.62" y="495.5" ></text>
</g>
<g >
<title>PMPI_Recv (64 samples, 0.12%)</title><rect x="266.7" y="517" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.72" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (12 samples, 0.02%)</title><rect x="531.8" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="534.80" y="495.5" ></text>
</g>
<g >
<title>mmap_region (5 samples, 0.01%)</title><rect x="1170.6" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::operator[] (205 samples, 0.38%)</title><rect x="195.6" y="357" width="4.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="198.55" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;NodeData*&gt;, NodeData*, NodeData&gt; (87 samples, 0.16%)</title><rect x="1146.9" y="501" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.86" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (31 samples, 0.06%)</title><rect x="124.2" y="341" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="127.16" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (10 samples, 0.02%)</title><rect x="302.9" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="305.85" y="399.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (14 samples, 0.03%)</title><rect x="106.3" y="549" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.35" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (33 samples, 0.06%)</title><rect x="522.6" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="525.59" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (5 samples, 0.01%)</title><rect x="328.0" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="331.04" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;boundary_pair const, data_boundary_pair, hash_boundary_pair, compare_boundary_pair, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt; &gt;::operator[] (12 samples, 0.02%)</title><rect x="206.2" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.17" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false, false&gt;::_Node_iterator (8 samples, 0.01%)</title><rect x="61.9" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="64.93" y="639.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;NodeData*, unsigned long, NodeData&gt; (43 samples, 0.08%)</title><rect x="1162.5" y="453" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.54" y="463.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::_Bit_iterator (10 samples, 0.02%)</title><rect x="858.1" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="861.07" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_allocate (9 samples, 0.02%)</title><rect x="866.1" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.11" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (109 samples, 0.20%)</title><rect x="495.8" y="453" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (9 samples, 0.02%)</title><rect x="522.1" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="525.10" y="495.5" ></text>
</g>
<g >
<title>__vfs_read (6 samples, 0.01%)</title><rect x="12.6" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.56" y="463.5" ></text>
</g>
<g >
<title>maxNodeHeap::contains (5 samples, 0.01%)</title><rect x="220.3" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="223.35" y="175.5" ></text>
</g>
<g >
<title>balance_management_coarsening::getBlockSize (10 samples, 0.02%)</title><rect x="93.4" y="629" width="0.2" height="15.0" fill="rgb(0,171,255)" rx="2" ry="2" />
<text  x="96.41" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (77 samples, 0.14%)</title><rect x="916.4" y="437" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="919.37" y="447.5" ></text>
</g>
<g >
<title>__lru_cache_add (13 samples, 0.02%)</title><rect x="1164.7" y="229" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.67" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (129 samples, 0.24%)</title><rect x="191.0" y="325" width="2.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="194.01" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="208.5" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.47" y="223.5" ></text>
</g>
<g >
<title>schedule (24 samples, 0.04%)</title><rect x="107.6" y="245" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.65" y="255.5" ></text>
</g>
<g >
<title>page_fault (10 samples, 0.02%)</title><rect x="108.2" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.22" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (45 samples, 0.08%)</title><rect x="522.4" y="501" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="525.43" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (104 samples, 0.19%)</title><rect x="151.1" y="325" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="154.09" y="335.5" ></text>
</g>
<g >
<title>parallel_graph_access::getTargetPE (20 samples, 0.04%)</title><rect x="269.2" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="272.24" y="527.5" ></text>
</g>
<g >
<title>finish_task_switch (8 samples, 0.01%)</title><rect x="139.3" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (291 samples, 0.54%)</title><rect x="158.8" y="325" width="6.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.76" y="335.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (6 samples, 0.01%)</title><rect x="313.1" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="316.10" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (9 samples, 0.02%)</title><rect x="99.5" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="102.47" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::_Node_iterator (5 samples, 0.01%)</title><rect x="928.0" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="931.03" y="447.5" ></text>
</g>
<g >
<title>unmap_page_range (20 samples, 0.04%)</title><rect x="1189.0" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="479.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const&amp;&gt; (25 samples, 0.05%)</title><rect x="1133.1" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1136.07" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (22 samples, 0.04%)</title><rect x="234.5" y="357" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="237.45" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (51 samples, 0.10%)</title><rect x="347.6" y="421" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="350.62" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (370 samples, 0.69%)</title><rect x="247.2" y="485" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="495.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, long&gt; (8 samples, 0.01%)</title><rect x="324.3" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="327.32" y="399.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (10 samples, 0.02%)</title><rect x="216.2" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.18" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (115 samples, 0.21%)</title><rect x="1062.1" y="485" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1065.13" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (5 samples, 0.01%)</title><rect x="832.3" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="835.26" y="447.5" ></text>
</g>
<g >
<title>page_fault (17 samples, 0.03%)</title><rect x="1162.9" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.93" y="447.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt; &gt; (6 samples, 0.01%)</title><rect x="266.0" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.04" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (211 samples, 0.39%)</title><rect x="154.1" y="277" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="287.5" ></text>
</g>
<g >
<title>alloc_pages_vma (5 samples, 0.01%)</title><rect x="1142.8" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.83" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (23 samples, 0.04%)</title><rect x="588.1" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="591.08" y="399.5" ></text>
</g>
<g >
<title>std::tuple&lt;hashed_edge const&amp;&gt;::tuple&lt;void, true&gt; (5 samples, 0.01%)</title><rect x="290.1" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.07" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (5 samples, 0.01%)</title><rect x="1127.7" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1130.69" y="495.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (26 samples, 0.05%)</title><rect x="112.7" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.74" y="463.5" ></text>
</g>
<g >
<title>PartialBoundary::insert (9 samples, 0.02%)</title><rect x="215.1" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="223.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeWeight (7 samples, 0.01%)</title><rect x="462.9" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.90" y="543.5" ></text>
</g>
<g >
<title>finish_task_switch (8 samples, 0.01%)</title><rect x="1170.1" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (19 samples, 0.04%)</title><rect x="945.1" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="948.09" y="447.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (189 samples, 0.35%)</title><rect x="718.5" y="453" width="4.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="721.48" y="463.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (15 samples, 0.03%)</title><rect x="230.1" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="233.11" y="191.5" ></text>
</g>
<g >
<title>_int_malloc (9 samples, 0.02%)</title><rect x="866.1" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.11" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (126 samples, 0.24%)</title><rect x="953.4" y="389" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="956.44" y="399.5" ></text>
</g>
<g >
<title>[hydra_pmi_proxy] (5 samples, 0.01%)</title><rect x="10.5" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.48" y="543.5" ></text>
</g>
<g >
<title>__do_page_fault (10 samples, 0.02%)</title><rect x="1142.2" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.21" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;::_M_v (9 samples, 0.02%)</title><rect x="131.5" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="134.52" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%)</title><rect x="738.3" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="741.27" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator-- (11 samples, 0.02%)</title><rect x="40.7" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="43.66" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (9 samples, 0.02%)</title><rect x="688.1" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="691.06" y="335.5" ></text>
</g>
<g >
<title>__handle_mm_fault (8 samples, 0.01%)</title><rect x="1171.9" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::operator[] (7 samples, 0.01%)</title><rect x="237.4" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="240.36" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (116 samples, 0.22%)</title><rect x="395.3" y="533" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.34" y="543.5" ></text>
</g>
<g >
<title>filemap_fault (11 samples, 0.02%)</title><rect x="113.5" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.47" y="479.5" ></text>
</g>
<g >
<title>two_way_fm::move_node (33 samples, 0.06%)</title><rect x="203.6" y="197" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.57" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (12 samples, 0.02%)</title><rect x="131.8" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="134.78" y="239.5" ></text>
</g>
<g >
<title>[hydra_pmi_proxy] (5 samples, 0.01%)</title><rect x="10.5" y="549" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.48" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (11 samples, 0.02%)</title><rect x="833.8" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="836.76" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt; &gt; &gt;::~vector (22 samples, 0.04%)</title><rect x="504.6" y="533" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.58" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;AdditionalNonLocalNodeData*&gt;, AdditionalNonLocalNodeData*, AdditionalNonLocalNodeData&gt; (25 samples, 0.05%)</title><rect x="1138.6" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.64" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (12 samples, 0.02%)</title><rect x="467.8" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="470.77" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (12 samples, 0.02%)</title><rect x="279.8" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="282.75" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%)</title><rect x="1064.9" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1067.89" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (533 samples, 1.00%)</title><rect x="126.4" y="309" width="11.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="129.36" y="319.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (8 samples, 0.01%)</title><rect x="108.3" y="245" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.26" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (11 samples, 0.02%)</title><rect x="40.9" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="43.90" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (11 samples, 0.02%)</title><rect x="205.6" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10 samples, 0.02%)</title><rect x="1117.0" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1120.00" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_Node_iterator_base (7 samples, 0.01%)</title><rect x="594.8" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="597.75" y="463.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (9 samples, 0.02%)</title><rect x="1168.5" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1171.53" y="255.5" ></text>
</g>
<g >
<title>finish_task_switch (56 samples, 0.10%)</title><rect x="11.2" y="501" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="14.23" y="511.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::operator* (6 samples, 0.01%)</title><rect x="296.2" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.19" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10 samples, 0.02%)</title><rect x="543.7" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="546.66" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (22 samples, 0.04%)</title><rect x="268.7" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.69" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (23 samples, 0.04%)</title><rect x="395.8" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.78" y="495.5" ></text>
</g>
<g >
<title>filemap_fault (8 samples, 0.01%)</title><rect x="994.3" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; (8 samples, 0.01%)</title><rect x="164.7" y="117" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="167.69" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (12 samples, 0.02%)</title><rect x="17.8" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="20.80" y="639.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_Head_base (5 samples, 0.01%)</title><rect x="622.2" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="625.20" y="479.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%)</title><rect x="94.6" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="97.60" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (30 samples, 0.06%)</title><rect x="1112.7" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1115.74" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (9 samples, 0.02%)</title><rect x="17.3" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="20.30" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::push_back (192 samples, 0.36%)</title><rect x="1144.5" y="549" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1147.55" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_node_allocator (11 samples, 0.02%)</title><rect x="620.9" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="623.85" y="495.5" ></text>
</g>
<g >
<title>data_hashed_edge::data_hashed_edge (8 samples, 0.01%)</title><rect x="392.2" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="395.19" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.01%)</title><rect x="1041.9" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="527.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (38 samples, 0.07%)</title><rect x="108.9" y="325" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (15 samples, 0.03%)</title><rect x="1108.8" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1111.75" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (43 samples, 0.08%)</title><rect x="278.5" y="453" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="281.52" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (25 samples, 0.05%)</title><rect x="282.2" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="285.15" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (7 samples, 0.01%)</title><rect x="935.3" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="938.30" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (36 samples, 0.07%)</title><rect x="426.7" y="485" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="429.71" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3,090 samples, 5.77%)</title><rect x="726.1" y="501" width="68.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="729.15" y="511.5" >std::__..</text>
</g>
<g >
<title>parallel_graph_access::get_first_edge (15 samples, 0.03%)</title><rect x="830.3" y="549" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="833.34" y="559.5" ></text>
</g>
<g >
<title>page_fault (12 samples, 0.02%)</title><rect x="1138.0" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.02" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (5 samples, 0.01%)</title><rect x="485.2" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="488.23" y="463.5" ></text>
</g>
<g >
<title>_int_free (86 samples, 0.16%)</title><rect x="290.2" y="389" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="399.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (6 samples, 0.01%)</title><rect x="1041.4" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.44" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (14 samples, 0.03%)</title><rect x="1080.0" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1082.97" y="431.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, AdditionalNonLocalNodeData*, AdditionalNonLocalNodeData*&gt; (25 samples, 0.05%)</title><rect x="1138.6" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.64" y="447.5" ></text>
</g>
<g >
<title>__GI___poll (5 samples, 0.01%)</title><rect x="444.0" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="446.96" y="479.5" ></text>
</g>
<g >
<title>alloc_pages_vma (5 samples, 0.01%)</title><rect x="1138.8" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.77" y="303.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (34 samples, 0.06%)</title><rect x="138.7" y="341" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="141.70" y="351.5" ></text>
</g>
<g >
<title>initial_partitioning::perform_initial_partitioning (1,388 samples, 2.59%)</title><rect x="200.1" y="405" width="30.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.07" y="415.5" >in..</text>
</g>
<g >
<title>PMPI_Barrier (29 samples, 0.05%)</title><rect x="119.0" y="549" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::~unordered_map (118 samples, 0.22%)</title><rect x="290.2" y="517" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="527.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (218 samples, 0.41%)</title><rect x="697.0" y="389" width="4.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="699.99" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt;::_M_next (52 samples, 0.10%)</title><rect x="134.1" y="245" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="137.05" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (9 samples, 0.02%)</title><rect x="301.6" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.55" y="463.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;AdditionalNonLocalNodeData&gt; (25 samples, 0.05%)</title><rect x="1138.6" y="405" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.64" y="415.5" ></text>
</g>
<g >
<title>prep_new_page (5 samples, 0.01%)</title><rect x="511.0" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.02" y="367.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (6 samples, 0.01%)</title><rect x="1148.3" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1151.30" y="303.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::~allocator (9 samples, 0.02%)</title><rect x="604.3" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="607.34" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt;, std::pair&lt;unsigned long long, unsigned long long&gt;*, std::pair&lt;unsigned long long, unsigned long long&gt; &gt; (23 samples, 0.04%)</title><rect x="293.2" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.17" y="479.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (10 samples, 0.02%)</title><rect x="1008.0" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.04" y="479.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (8 samples, 0.01%)</title><rect x="1170.1" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (11 samples, 0.02%)</title><rect x="464.3" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="467.29" y="479.5" ></text>
</g>
<g >
<title>std::forward&lt;std::piecewise_construct_t const&amp;&gt; (9 samples, 0.02%)</title><rect x="614.3" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="617.33" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="1087.2" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1090.24" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (14 samples, 0.03%)</title><rect x="301.2" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.20" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (14 samples, 0.03%)</title><rect x="329.4" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="332.41" y="511.5" ></text>
</g>
<g >
<title>nss_load_library (5 samples, 0.01%)</title><rect x="109.8" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (11 samples, 0.02%)</title><rect x="671.4" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="674.42" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (5 samples, 0.01%)</title><rect x="404.4" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="407.42" y="479.5" ></text>
</g>
<g >
<title>_int_malloc (8 samples, 0.01%)</title><rect x="242.4" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.39" y="383.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::top (306 samples, 0.57%)</title><rect x="645.7" y="517" width="6.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="648.74" y="527.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_first_edge (5 samples, 0.01%)</title><rect x="46.0" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="48.95" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (376 samples, 0.70%)</title><rect x="444.1" y="501" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="447.07" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="71.1" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="74.12" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::construct&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (58 samples, 0.11%)</title><rect x="391.6" y="485" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="394.57" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (16 samples, 0.03%)</title><rect x="349.6" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="352.65" y="415.5" ></text>
</g>
<g >
<title>x86_pmu_enable (21 samples, 0.04%)</title><rect x="107.7" y="181" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.71" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long long&gt;, true&gt;::_S_cget (35 samples, 0.07%)</title><rect x="59.1" y="629" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="62.11" y="639.5" ></text>
</g>
<g >
<title>do_page_fault (35 samples, 0.07%)</title><rect x="1147.7" y="357" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.68" y="367.5" ></text>
</g>
<g >
<title>parallel_graph_access::getLocalID (57 samples, 0.11%)</title><rect x="426.4" y="533" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="429.35" y="543.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (8 samples, 0.01%)</title><rect x="1170.1" y="581" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_range_check (11 samples, 0.02%)</title><rect x="1001.7" y="565" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1004.65" y="575.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (9 samples, 0.02%)</title><rect x="108.2" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.24" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (5 samples, 0.01%)</title><rect x="212.2" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.21" y="191.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (29 samples, 0.05%)</title><rect x="373.2" y="533" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="376.19" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::operator[] (991 samples, 1.85%)</title><rect x="473.9" y="533" width="21.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="476.94" y="543.5" >s..</text>
</g>
<g >
<title>std::__addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; (9 samples, 0.02%)</title><rect x="601.7" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="604.74" y="479.5" ></text>
</g>
<g >
<title>dummy_operations::run_collective_dummy_operations (73 samples, 0.14%)</title><rect x="993.3" y="597" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="996.32" y="607.5" ></text>
</g>
<g >
<title>bipartition::initial_partition (107 samples, 0.20%)</title><rect x="202.7" y="277" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.71" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;, std::allocator&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt; &gt; &gt;::~vector (6 samples, 0.01%)</title><rect x="266.0" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.04" y="527.5" ></text>
</g>
<g >
<title>maxNodeHeap::increaseKey (5 samples, 0.01%)</title><rect x="220.2" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="223.17" y="159.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (48 samples, 0.09%)</title><rect x="1176.0" y="613" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="623.5" ></text>
</g>
<g >
<title>_int_free (24 samples, 0.04%)</title><rect x="299.3" y="405" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="302.32" y="415.5" ></text>
</g>
<g >
<title>native_write_msr (7 samples, 0.01%)</title><rect x="108.3" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.29" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (34 samples, 0.06%)</title><rect x="522.6" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="525.57" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (12 samples, 0.02%)</title><rect x="213.9" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="216.91" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (63 samples, 0.12%)</title><rect x="1160.0" y="373" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1163.00" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_free (211 samples, 0.39%)</title><rect x="154.1" y="245" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="255.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, unsigned long long&gt; (8 samples, 0.01%)</title><rect x="20.6" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="23.62" y="639.5" ></text>
</g>
<g >
<title>unmap_region (9 samples, 0.02%)</title><rect x="1146.6" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.64" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (188 samples, 0.35%)</title><rect x="486.3" y="485" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="489.33" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (22 samples, 0.04%)</title><rect x="62.3" y="629" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="65.31" y="639.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, long&gt;&amp;&gt; (16 samples, 0.03%)</title><rect x="570.7" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="573.71" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.03%)</title><rect x="300.5" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.54" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (9 samples, 0.02%)</title><rect x="572.7" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="575.71" y="447.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.01%)</title><rect x="1139.1" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1142.06" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="840.7" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="843.72" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_M_next (46 samples, 0.09%)</title><rect x="387.5" y="453" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="390.51" y="463.5" ></text>
</g>
<g >
<title>std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (217 samples, 0.41%)</title><rect x="678.8" y="485" width="4.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="681.84" y="495.5" ></text>
</g>
<g >
<title>std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="312.7" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.73" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (5 samples, 0.01%)</title><rect x="968.6" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="971.61" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (22 samples, 0.04%)</title><rect x="490.7" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="493.72" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 0.01%)</title><rect x="402.3" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.33" y="463.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::param_type::a (9 samples, 0.02%)</title><rect x="990.5" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="993.50" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::operator[] (9 samples, 0.02%)</title><rect x="215.1" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (45 samples, 0.08%)</title><rect x="232.8" y="357" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="235.78" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (23 samples, 0.04%)</title><rect x="409.3" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.31" y="511.5" ></text>
</g>
<g >
<title>do_page_fault (53 samples, 0.10%)</title><rect x="111.3" y="517" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.33" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="245.8" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="248.81" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (32 samples, 0.06%)</title><rect x="578.2" y="421" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="581.22" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (5 samples, 0.01%)</title><rect x="300.8" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.76" y="431.5" ></text>
</g>
<g >
<title>bipartition::initial_partition (378 samples, 0.71%)</title><rect x="216.9" y="261" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.89" y="271.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, long&gt; (22 samples, 0.04%)</title><rect x="20.1" y="629" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="23.14" y="639.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (7 samples, 0.01%)</title><rect x="344.4" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="347.38" y="415.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (21 samples, 0.04%)</title><rect x="107.7" y="149" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.71" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (225 samples, 0.42%)</title><rect x="141.9" y="309" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="144.92" y="319.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (2,441 samples, 4.56%)</title><rect x="868.9" y="469" width="53.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="871.91" y="479.5" >[libm..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, compare_nodes_contains, unsigned long, true&gt;::_S_equals (7 samples, 0.01%)</title><rect x="207.3" y="133" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.28" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::operator[] (6 samples, 0.01%)</title><rect x="79.0" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="82.01" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (21 samples, 0.04%)</title><rect x="1142.7" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.72" y="399.5" ></text>
</g>
<g >
<title>clear_page_erms (5 samples, 0.01%)</title><rect x="1146.1" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.07" y="367.5" ></text>
</g>
<g >
<title>__handle_mm_fault (13 samples, 0.02%)</title><rect x="1138.8" y="309" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.77" y="319.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (1,523 samples, 2.84%)</title><rect x="1008.3" y="517" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.29" y="527.5" >[l..</text>
</g>
<g >
<title>copy_user_generic_unrolled (5 samples, 0.01%)</title><rect x="1040.7" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1043.73" y="319.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (8 samples, 0.01%)</title><rect x="683.9" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.91" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault (72 samples, 0.13%)</title><rect x="1159.9" y="405" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1162.87" y="415.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (18 samples, 0.03%)</title><rect x="224.1" y="149" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="227.09" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="229.1" y="133" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.05" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator-- (7 samples, 0.01%)</title><rect x="692.8" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="695.78" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (10 samples, 0.02%)</title><rect x="391.2" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="394.20" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (22 samples, 0.04%)</title><rect x="375.2" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="378.22" y="479.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.02%)</title><rect x="241.6" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="244.57" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (12 samples, 0.02%)</title><rect x="839.7" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="842.73" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (5 samples, 0.01%)</title><rect x="265.8" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.82" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="224.4" y="101" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="227.38" y="111.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::operator* (11 samples, 0.02%)</title><rect x="525.2" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="528.17" y="527.5" ></text>
</g>
<g >
<title>[hydra_pmi_proxy] (165 samples, 0.31%)</title><rect x="10.1" y="613" width="3.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.07" y="623.5" ></text>
</g>
<g >
<title>_dl_open (5 samples, 0.01%)</title><rect x="109.8" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (140 samples, 0.26%)</title><rect x="508.7" y="501" width="3.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="511.66" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::~vector (22 samples, 0.04%)</title><rect x="504.6" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.58" y="463.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned long long&gt; (11 samples, 0.02%)</title><rect x="691.8" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="694.81" y="335.5" ></text>
</g>
<g >
<title>malloc_consolidate (80 samples, 0.15%)</title><rect x="296.5" y="389" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="399.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (210 samples, 0.39%)</title><rect x="420.1" y="517" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="423.11" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (7 samples, 0.01%)</title><rect x="204.7" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.70" y="159.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::_Bit_iterator (6 samples, 0.01%)</title><rect x="339.8" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="342.77" y="495.5" ></text>
</g>
<g >
<title>do_page_fault (32 samples, 0.06%)</title><rect x="112.7" y="533" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.72" y="543.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;*&gt; (22 samples, 0.04%)</title><rect x="504.6" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.58" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (6 samples, 0.01%)</title><rect x="581.9" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="584.90" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, unsigned long long&gt; (6 samples, 0.01%)</title><rect x="1083.8" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1086.78" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (9 samples, 0.02%)</title><rect x="113.8" y="565" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.75" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (14 samples, 0.03%)</title><rect x="486.0" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="489.02" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (17 samples, 0.03%)</title><rect x="228.5" y="165" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="231.48" y="175.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (14 samples, 0.03%)</title><rect x="106.3" y="581" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.35" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt;, std::pair&lt;unsigned long long, unsigned long long&gt;*&gt; (66 samples, 0.12%)</title><rect x="502.4" y="453" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="505.42" y="463.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (77 samples, 0.14%)</title><rect x="720.1" y="405" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="723.09" y="415.5" ></text>
</g>
<g >
<title>__lock_page_killable (7 samples, 0.01%)</title><rect x="1171.9" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (24 samples, 0.04%)</title><rect x="233.2" y="341" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="236.24" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="394.4" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="397.44" y="463.5" ></text>
</g>
<g >
<title>compare_nodes_contains::operator (5 samples, 0.01%)</title><rect x="131.4" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="134.41" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (286 samples, 0.53%)</title><rect x="158.9" y="181" width="6.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.87" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (196 samples, 0.37%)</title><rect x="384.2" y="485" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="387.21" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (53 samples, 0.10%)</title><rect x="380.2" y="469" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="383.22" y="479.5" ></text>
</g>
<g >
<title>size_constraint_label_propagation::label_propagation (1,443 samples, 2.70%)</title><rect x="168.3" y="373" width="31.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="171.26" y="383.5" >si..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (39 samples, 0.07%)</title><rect x="129.8" y="261" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="132.82" y="271.5" ></text>
</g>
<g >
<title>get_signal (48 samples, 0.09%)</title><rect x="1176.0" y="581" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;NodeData*, unsigned long&gt; (43 samples, 0.08%)</title><rect x="1162.5" y="501" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.54" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, bool&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (5 samples, 0.01%)</title><rect x="409.9" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::size (11 samples, 0.02%)</title><rect x="524.2" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="527.22" y="495.5" ></text>
</g>
<g >
<title>hash_boundary_pair::operator (9 samples, 0.02%)</title><rect x="140.4" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="143.44" y="351.5" ></text>
</g>
<g >
<title>std::_Bit_iterator_base::_Bit_iterator_base (5 samples, 0.01%)</title><rect x="339.8" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="342.79" y="479.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_Head_base (14 samples, 0.03%)</title><rect x="1134.1" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1137.12" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (11 samples, 0.02%)</title><rect x="205.6" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (6 samples, 0.01%)</title><rect x="315.1" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="318.06" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false, false&gt;::_Node_iterator (7 samples, 0.01%)</title><rect x="1122.5" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1125.49" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (59 samples, 0.11%)</title><rect x="934.8" y="421" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="937.77" y="431.5" ></text>
</g>
<g >
<title>[mpiexec.hydra] (23 samples, 0.04%)</title><rect x="14.4" y="549" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.39" y="559.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (80 samples, 0.15%)</title><rect x="227.9" y="197" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.89" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (7 samples, 0.01%)</title><rect x="334.3" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="337.30" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (13 samples, 0.02%)</title><rect x="953.8" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="956.84" y="367.5" ></text>
</g>
<g >
<title>sock_read_iter (19 samples, 0.04%)</title><rect x="108.4" y="341" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (40 samples, 0.07%)</title><rect x="346.3" y="421" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="349.32" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (35 samples, 0.07%)</title><rect x="520.7" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="523.67" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_Tuple_impl (38 samples, 0.07%)</title><rect x="1133.8" y="453" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1136.84" y="463.5" ></text>
</g>
<g >
<title>do_exit (20 samples, 0.04%)</title><rect x="1189.0" y="549" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;unsigned long long*, unsigned long&gt; (10 samples, 0.02%)</title><rect x="969.3" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.31" y="463.5" ></text>
</g>
<g >
<title>x86_pmu_enable (21 samples, 0.04%)</title><rect x="112.8" y="325" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="335.5" ></text>
</g>
<g >
<title>clear_page_erms (9 samples, 0.02%)</title><rect x="1164.4" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.43" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (17 samples, 0.03%)</title><rect x="1000.9" y="565" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1003.88" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (310 samples, 0.58%)</title><rect x="140.8" y="325" width="6.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="143.75" y="335.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (170 samples, 0.32%)</title><rect x="350.2" y="453" width="3.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="353.15" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (7 samples, 0.01%)</title><rect x="223.9" y="117" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="226.87" y="127.5" ></text>
</g>
<g >
<title>setup_new_exec (12 samples, 0.02%)</title><rect x="1189.7" y="549" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.74" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (5 samples, 0.01%)</title><rect x="865.1" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="868.10" y="495.5" ></text>
</g>
<g >
<title>handle_mm_fault (25 samples, 0.05%)</title><rect x="512.5" y="309" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.52" y="319.5" ></text>
</g>
<g >
<title>graph_access::setEdgeRating (10 samples, 0.02%)</title><rect x="167.7" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="170.69" y="383.5" ></text>
</g>
<g >
<title>parhip (53,261 samples, 99.49%)</title><rect x="15.8" y="661" width="1173.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.75" y="671.5" >parhip</text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (36 samples, 0.07%)</title><rect x="108.9" y="197" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.90" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (107 samples, 0.20%)</title><rect x="407.5" y="517" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="410.51" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (19 samples, 0.04%)</title><rect x="1140.9" y="549" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1143.93" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (37 samples, 0.07%)</title><rect x="580.7" y="421" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="583.67" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (7 samples, 0.01%)</title><rect x="1109.9" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1112.90" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (8 samples, 0.01%)</title><rect x="48.2" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="51.20" y="639.5" ></text>
</g>
<g >
<title>schedule (27 samples, 0.05%)</title><rect x="110.0" y="293" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.00" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (8 samples, 0.01%)</title><rect x="146.9" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="149.88" y="287.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::pop_back (5 samples, 0.01%)</title><rect x="638.3" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="641.27" y="527.5" ></text>
</g>
<g >
<title>finish_task_switch (26 samples, 0.05%)</title><rect x="110.0" y="261" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.03" y="271.5" ></text>
</g>
<g >
<title>complete_boundary::build (6 samples, 0.01%)</title><rect x="216.9" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.91" y="239.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (9 samples, 0.02%)</title><rect x="684.7" y="261" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.71" y="271.5" ></text>
</g>
<g >
<title>coarsening::perform_coarsening (114 samples, 0.21%)</title><rect x="200.2" y="309" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.20" y="319.5" ></text>
</g>
<g >
<title>PMPI_Recv (121 samples, 0.23%)</title><rect x="275.0" y="517" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="277.99" y="527.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (5 samples, 0.01%)</title><rect x="211.2" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="214.18" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (13 samples, 0.02%)</title><rect x="805.7" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="808.72" y="543.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%)</title><rect x="959.0" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="961.96" y="399.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (30 samples, 0.06%)</title><rect x="402.5" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.53" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (14 samples, 0.03%)</title><rect x="522.0" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="524.99" y="511.5" ></text>
</g>
<g >
<title>complete_boundary::update_lazy_values (367 samples, 0.69%)</title><rect x="139.5" y="357" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.50" y="367.5" ></text>
</g>
<g >
<title>__fdget (8 samples, 0.01%)</title><rect x="921.0" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="924.04" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (5 samples, 0.01%)</title><rect x="946.9" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="949.94" y="415.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (30 samples, 0.06%)</title><rect x="276.8" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="279.84" y="479.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long long const, long&gt; (10 samples, 0.02%)</title><rect x="954.6" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="957.59" y="351.5" ></text>
</g>
<g >
<title>parallel_graph_access::update_non_contained_block_balance (7 samples, 0.01%)</title><rect x="981.6" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="984.57" y="511.5" ></text>
</g>
<g >
<title>parallel_mh_async::initialize (5,172 samples, 9.66%)</title><rect x="124.8" y="485" width="114.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="127.84" y="495.5" >parallel_mh_as..</text>
</g>
<g >
<title>get_page_from_freelist (13 samples, 0.02%)</title><rect x="584.0" y="277" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.98" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (73 samples, 0.14%)</title><rect x="579.1" y="421" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="582.06" y="431.5" ></text>
</g>
<g >
<title>io_schedule (9 samples, 0.02%)</title><rect x="113.5" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.51" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (20 samples, 0.04%)</title><rect x="451.8" y="357" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="454.83" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (72 samples, 0.13%)</title><rect x="481.2" y="469" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="484.17" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (7 samples, 0.01%)</title><rect x="328.2" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="331.22" y="463.5" ></text>
</g>
<g >
<title>handle_mm_fault (13 samples, 0.02%)</title><rect x="1138.8" y="325" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.77" y="335.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (9 samples, 0.02%)</title><rect x="1189.8" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.76" y="479.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (40 samples, 0.07%)</title><rect x="687.2" y="293" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="690.18" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (88 samples, 0.16%)</title><rect x="393.4" y="517" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="396.40" y="527.5" ></text>
</g>
<g >
<title>mmput (5 samples, 0.01%)</title><rect x="14.1" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.14" y="543.5" ></text>
</g>
<g >
<title>dl_main (10 samples, 0.02%)</title><rect x="15.4" y="581" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.42" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (8 samples, 0.01%)</title><rect x="1100.4" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1103.42" y="463.5" ></text>
</g>
<g >
<title>io_schedule (58 samples, 0.11%)</title><rect x="1166.5" y="357" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1169.55" y="367.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned long long&gt; (26 samples, 0.05%)</title><rect x="722.1" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="725.07" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long long&gt;::operator (10 samples, 0.02%)</title><rect x="1086.1" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1089.07" y="511.5" ></text>
</g>
<g >
<title>do_page_fault (27 samples, 0.05%)</title><rect x="510.7" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="513.71" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::allocate (19 samples, 0.04%)</title><rect x="501.8" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="504.76" y="495.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::operator (18 samples, 0.03%)</title><rect x="194.7" y="325" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="197.67" y="335.5" ></text>
</g>
<g >
<title>schedule (16 samples, 0.03%)</title><rect x="108.5" y="261" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.51" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;Edge*, unsigned long&gt; (19 samples, 0.04%)</title><rect x="471.1" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.08" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (40 samples, 0.07%)</title><rect x="50.6" y="629" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="53.62" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="404.4" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="407.38" y="495.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;*&gt; (22 samples, 0.04%)</title><rect x="504.6" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.58" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10 samples, 0.02%)</title><rect x="262.0" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="264.98" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (9 samples, 0.02%)</title><rect x="70.4" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="73.37" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (43 samples, 0.08%)</title><rect x="468.1" y="469" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="471.12" y="479.5" ></text>
</g>
<g >
<title>random_functions::nextBool (460 samples, 0.86%)</title><rect x="982.0" y="549" width="10.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="985.03" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_free (109 samples, 0.20%)</title><rect x="495.8" y="421" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="431.5" ></text>
</g>
<g >
<title>MPI_Probe (15 samples, 0.03%)</title><rect x="398.0" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="401.01" y="543.5" ></text>
</g>
<g >
<title>std::_Bit_reference::operator= (7 samples, 0.01%)</title><rect x="430.0" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="433.03" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (653 samples, 1.22%)</title><rect x="314.0" y="501" width="14.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="316.98" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (6 samples, 0.01%)</title><rect x="1102.2" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1105.18" y="495.5" ></text>
</g>
<g >
<title>[mpiexec.hydra] (45 samples, 0.08%)</title><rect x="14.3" y="645" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.32" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt;::allocate (11 samples, 0.02%)</title><rect x="397.5" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.50" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="289.3" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="292.25" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="470.4" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="473.41" y="527.5" ></text>
</g>
<g >
<title>__schedule (7 samples, 0.01%)</title><rect x="1171.9" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="367.5" ></text>
</g>
<g >
<title>two_way_fm::assert_directed_boundary_condition (35 samples, 0.07%)</title><rect x="218.9" y="181" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.89" y="191.5" ></text>
</g>
<g >
<title>page_fault (12 samples, 0.02%)</title><rect x="1142.8" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.81" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (7 samples, 0.01%)</title><rect x="269.0" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.99" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (3,154 samples, 5.89%)</title><rect x="553.8" y="517" width="69.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="556.84" y="527.5" >std::un..</text>
</g>
<g >
<title>x86_pmu_enable (16 samples, 0.03%)</title><rect x="1171.5" y="293" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.46" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (69 samples, 0.13%)</title><rect x="481.2" y="453" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="484.22" y="463.5" ></text>
</g>
<g >
<title>vfs_read (38 samples, 0.07%)</title><rect x="108.9" y="405" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="415.5" ></text>
</g>
<g >
<title>parallel_contraction::get_nodes_to_cnodes_ghost_nodes (179 samples, 0.33%)</title><rect x="266.2" y="533" width="4.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.24" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (37 samples, 0.07%)</title><rect x="531.3" y="533" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="534.29" y="543.5" ></text>
</g>
<g >
<title>do_page_fault (12 samples, 0.02%)</title><rect x="1138.0" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.02" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="347.4" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="350.42" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::getBlockSize (12 samples, 0.02%)</title><rect x="533.0" y="565" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.97" y="575.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeWeight (129 samples, 0.24%)</title><rect x="537.2" y="517" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="540.20" y="527.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::operator[] (8 samples, 0.01%)</title><rect x="94.4" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="97.42" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (30 samples, 0.06%)</title><rect x="402.5" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.53" y="495.5" ></text>
</g>
<g >
<title>_int_malloc (11 samples, 0.02%)</title><rect x="205.6" y="69" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (434 samples, 0.81%)</title><rect x="1125.8" y="517" width="9.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1128.81" y="527.5" ></text>
</g>
<g >
<title>std::_Bit_reference::_Bit_reference (32 samples, 0.06%)</title><rect x="863.6" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="866.58" y="495.5" ></text>
</g>
<g >
<title>__schedule (58 samples, 0.11%)</title><rect x="1166.5" y="325" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1169.55" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (80 samples, 0.15%)</title><rect x="296.5" y="437" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="447.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long long const&amp;&gt; (7 samples, 0.01%)</title><rect x="616.9" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="619.88" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::getSecondPartitionIndex (5 samples, 0.01%)</title><rect x="45.6" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="48.58" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_Hash_node (46 samples, 0.09%)</title><rect x="601.9" y="469" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="604.94" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::resize (6 samples, 0.01%)</title><rect x="242.6" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.57" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (39 samples, 0.07%)</title><rect x="552.7" y="485" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="555.74" y="495.5" ></text>
</g>
<g >
<title>__schedule (19 samples, 0.04%)</title><rect x="1171.4" y="341" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.44" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (30 samples, 0.06%)</title><rect x="1079.6" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1082.61" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (82 samples, 0.15%)</title><rect x="273.2" y="421" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.18" y="431.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (1,770 samples, 3.31%)</title><rect x="683.6" y="485" width="39.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.63" y="495.5" >std..</text>
</g>
<g >
<title>x86_pmu_enable (36 samples, 0.07%)</title><rect x="108.9" y="213" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.90" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (18 samples, 0.03%)</title><rect x="468.6" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="471.59" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::_Node_iterator (15 samples, 0.03%)</title><rect x="594.6" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="597.58" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (5 samples, 0.01%)</title><rect x="491.1" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="494.09" y="495.5" ></text>
</g>
<g >
<title>native_write_msr (48 samples, 0.09%)</title><rect x="1166.6" y="229" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1169.61" y="239.5" ></text>
</g>
<g >
<title>operator new (15 samples, 0.03%)</title><rect x="601.4" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="604.41" y="479.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (7 samples, 0.01%)</title><rect x="15.1" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="367.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (25 samples, 0.05%)</title><rect x="1138.6" y="389" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.64" y="399.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="289.3" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="292.25" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (10 samples, 0.02%)</title><rect x="1146.6" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="301.1" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.07" y="479.5" ></text>
</g>
<g >
<title>__handle_mm_fault (9 samples, 0.02%)</title><rect x="994.7" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.69" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (5 samples, 0.01%)</title><rect x="532.9" y="549" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.86" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="409.5" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.47" y="447.5" ></text>
</g>
<g >
<title>schedule_timeout (24 samples, 0.04%)</title><rect x="107.6" y="261" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.65" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (9 samples, 0.02%)</title><rect x="832.2" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="835.19" y="479.5" ></text>
</g>
<g >
<title>PMPI_Recv (65 samples, 0.12%)</title><rect x="520.0" y="533" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="523.01" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt;::_M_next (61 samples, 0.11%)</title><rect x="1120.7" y="469" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1123.74" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (12 samples, 0.02%)</title><rect x="230.2" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="233.18" y="175.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (71 samples, 0.13%)</title><rect x="1170.6" y="597" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.58" y="607.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_Tuple_impl (65 samples, 0.12%)</title><rect x="618.4" y="421" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="621.38" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (13 samples, 0.02%)</title><rect x="221.3" y="101" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="224.30" y="111.5" ></text>
</g>
<g >
<title>dup_mm (5 samples, 0.01%)</title><rect x="10.9" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.88" y="463.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (7 samples, 0.01%)</title><rect x="111.5" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="335.5" ></text>
</g>
<g >
<title>__handle_mm_fault (44 samples, 0.08%)</title><rect x="1164.1" y="261" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.10" y="271.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (5 samples, 0.01%)</title><rect x="462.7" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.68" y="479.5" ></text>
</g>
<g >
<title>alloc_pages_vma (34 samples, 0.06%)</title><rect x="1160.3" y="357" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1163.29" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (16 samples, 0.03%)</title><rect x="395.9" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.93" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (7 samples, 0.01%)</title><rect x="403.4" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.38" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="295.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="298.53" y="495.5" ></text>
</g>
<g >
<title>_dl_relocate_object (52 samples, 0.10%)</title><rect x="1170.9" y="565" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.93" y="575.5" ></text>
</g>
<g >
<title>i2c_dw_isr (5 samples, 0.01%)</title><rect x="1041.7" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.66" y="319.5" ></text>
</g>
<g >
<title>parallel_graph_io::readGraphBinary (7,557 samples, 14.12%)</title><rect x="1003.5" y="581" width="166.5" height="15.0" fill="rgb(174,0,81)" rx="2" ry="2" />
<text  x="1006.46" y="591.5" >parallel_graph_io::re..</text>
</g>
<g >
<title>parallel_graph_access::getNodeLabel (79 samples, 0.15%)</title><rect x="535.5" y="517" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="538.46" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.01%)</title><rect x="1086.7" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1089.67" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (38 samples, 0.07%)</title><rect x="407.7" y="485" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="410.68" y="495.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (15 samples, 0.03%)</title><rect x="1148.5" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1151.45" y="383.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (54 samples, 0.10%)</title><rect x="683.8" y="341" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.85" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt; &gt;::allocate (28 samples, 0.05%)</title><rect x="136.5" y="277" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="139.46" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (11 samples, 0.02%)</title><rect x="960.7" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="963.67" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (216 samples, 0.40%)</title><rect x="832.0" y="485" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="834.97" y="495.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::_Deque_iterator (5 samples, 0.01%)</title><rect x="647.1" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="650.13" y="495.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (8 samples, 0.01%)</title><rect x="347.0" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="350.02" y="367.5" ></text>
</g>
<g >
<title>native_write_msr (12 samples, 0.02%)</title><rect x="14.6" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.56" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (11 samples, 0.02%)</title><rect x="775.2" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="778.21" y="431.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (95 samples, 0.18%)</title><rect x="231.9" y="389" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="234.85" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (7 samples, 0.01%)</title><rect x="1079.5" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1082.46" y="447.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (13 samples, 0.02%)</title><rect x="212.3" y="197" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.32" y="207.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (6 samples, 0.01%)</title><rect x="916.4" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="919.41" y="431.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (133 samples, 0.25%)</title><rect x="708.5" y="389" width="2.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="711.47" y="399.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (6 samples, 0.01%)</title><rect x="1041.7" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.66" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (83 samples, 0.16%)</title><rect x="133.4" y="261" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="136.39" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (197 samples, 0.37%)</title><rect x="323.3" y="421" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="326.26" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::end (5 samples, 0.01%)</title><rect x="70.6" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="73.57" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator++ (8 samples, 0.01%)</title><rect x="718.8" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="721.78" y="447.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.01%)</title><rect x="139.3" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="287.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (7 samples, 0.01%)</title><rect x="994.3" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="303.5" ></text>
</g>
<g >
<title>operator new (18 samples, 0.03%)</title><rect x="501.8" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="504.78" y="463.5" ></text>
</g>
<g >
<title>MPI_Probe (258 samples, 0.48%)</title><rect x="514.3" y="533" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="517.32" y="543.5" ></text>
</g>
<g >
<title>parallel_contraction::update_ghost_nodes_weights (51 samples, 0.10%)</title><rect x="295.3" y="533" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="298.27" y="543.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (21 samples, 0.04%)</title><rect x="107.7" y="165" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.71" y="175.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (10 samples, 0.02%)</title><rect x="403.0" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.97" y="415.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (21 samples, 0.04%)</title><rect x="443.6" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="446.61" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_realloc_insert&lt;unsigned long long&gt; (12 samples, 0.02%)</title><rect x="866.1" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.11" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (108 samples, 0.20%)</title><rect x="775.5" y="421" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="778.45" y="431.5" ></text>
</g>
<g >
<title>do_page_fault (72 samples, 0.13%)</title><rect x="1159.9" y="421" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1162.87" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned long long&gt;, true&gt;::_S_cget (14 samples, 0.03%)</title><rect x="789.6" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="792.56" y="431.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (118 samples, 0.22%)</title><rect x="703.2" y="373" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="706.16" y="383.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (41 samples, 0.08%)</title><rect x="229.7" y="197" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.67" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (795 samples, 1.49%)</title><rect x="770.6" y="437" width="17.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="773.63" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::is_local_node (11 samples, 0.02%)</title><rect x="339.1" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="342.13" y="511.5" ></text>
</g>
<g >
<title>__handle_mm_fault (12 samples, 0.02%)</title><rect x="1142.8" y="309" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.81" y="319.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (597 samples, 1.12%)</title><rect x="683.6" y="405" width="13.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.65" y="415.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (370 samples, 0.69%)</title><rect x="247.2" y="437" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="447.5" ></text>
</g>
<g >
<title>quotient_graph_refinement::perform_a_two_way_refinement (292 samples, 0.55%)</title><rect x="218.7" y="213" width="6.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.72" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long long&gt;, true&gt;::_S_cget (6 samples, 0.01%)</title><rect x="553.4" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="556.38" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (29 samples, 0.05%)</title><rect x="268.6" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.60" y="495.5" ></text>
</g>
<g >
<title>page_fault (27 samples, 0.05%)</title><rect x="510.7" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="513.71" y="495.5" ></text>
</g>
<g >
<title>_start (10 samples, 0.02%)</title><rect x="15.4" y="645" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.42" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (6 samples, 0.01%)</title><rect x="202.8" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.76" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (114 samples, 0.21%)</title><rect x="144.4" y="277" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="147.37" y="287.5" ></text>
</g>
<g >
<title>graph_partitioner::perform_recursive_partitioning (1,384 samples, 2.59%)</title><rect x="200.1" y="373" width="30.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.07" y="383.5" >gr..</text>
</g>
<g >
<title>__do_execve_file.isra.39 (12 samples, 0.02%)</title><rect x="1189.7" y="597" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.74" y="607.5" ></text>
</g>
<g >
<title>PMPI_Init (317 samples, 0.59%)</title><rect x="106.8" y="597" width="7.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.76" y="607.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (5 samples, 0.01%)</title><rect x="204.0" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.04" y="175.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (29 samples, 0.05%)</title><rect x="119.0" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt; &gt;::_M_deallocate_node (91 samples, 0.17%)</title><rect x="163.0" y="133" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="165.97" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_Node_iterator_base (17 samples, 0.03%)</title><rect x="552.1" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="555.12" y="463.5" ></text>
</g>
<g >
<title>quotient_graph_refinement::perform_refinement (368 samples, 0.69%)</title><rect x="217.0" y="229" width="8.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.04" y="239.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (8 samples, 0.01%)</title><rect x="203.9" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.86" y="175.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (259 samples, 0.48%)</title><rect x="1163.5" y="533" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="543.5" ></text>
</g>
<g >
<title>_IO_new_file_write (8 samples, 0.01%)</title><rect x="1170.1" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (18 samples, 0.03%)</title><rect x="522.9" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="525.92" y="463.5" ></text>
</g>
<g >
<title>read_pages (27 samples, 0.05%)</title><rect x="1168.4" y="309" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1171.40" y="319.5" ></text>
</g>
<g >
<title>get_page_from_freelist (12 samples, 0.02%)</title><rect x="512.6" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.63" y="255.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (51 samples, 0.10%)</title><rect x="993.3" y="517" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="996.32" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (143 samples, 0.27%)</title><rect x="1093.0" y="485" width="3.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1095.97" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (78 samples, 0.15%)</title><rect x="1100.1" y="469" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1103.13" y="479.5" ></text>
</g>
<g >
<title>two_way_fm::assert_directed_boundary_condition (50 samples, 0.09%)</title><rect x="209.9" y="229" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="212.88" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (40 samples, 0.07%)</title><rect x="301.7" y="437" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.75" y="447.5" ></text>
</g>
<g >
<title>__pagevec_lru_add_fn (5 samples, 0.01%)</title><rect x="610.6" y="261" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.65" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (24 samples, 0.04%)</title><rect x="408.7" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.70" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_free (8 samples, 0.01%)</title><rect x="1041.9" y="565" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="575.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (719 samples, 1.34%)</title><rect x="355.7" y="437" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (18 samples, 0.03%)</title><rect x="577.3" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="580.32" y="431.5" ></text>
</g>
<g >
<title>contraction::contract_clustering (25 samples, 0.05%)</title><rect x="200.2" y="277" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.20" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (19 samples, 0.04%)</title><rect x="603.1" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="606.09" y="479.5" ></text>
</g>
<g >
<title>__lru_cache_add (9 samples, 0.02%)</title><rect x="610.6" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.56" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::_M_range_check (13 samples, 0.02%)</title><rect x="222.5" y="117" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="225.49" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (102 samples, 0.19%)</title><rect x="260.6" y="469" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="263.62" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (11 samples, 0.02%)</title><rect x="205.6" y="117" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="127.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long long const, unsigned long long&gt; (6 samples, 0.01%)</title><rect x="63.6" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="66.56" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (13 samples, 0.02%)</title><rect x="61.2" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="64.25" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (82 samples, 0.15%)</title><rect x="946.4" y="437" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="949.39" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 0.01%)</title><rect x="1170.6" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::new_node (14 samples, 0.03%)</title><rect x="1148.8" y="565" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1151.80" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="151.8" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="154.80" y="303.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (32 samples, 0.06%)</title><rect x="12.9" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.91" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;KeyValuePair, std::allocator&lt;KeyValuePair&gt; &gt;::operator[] (68 samples, 0.13%)</title><rect x="652.5" y="517" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="655.48" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (719 samples, 1.34%)</title><rect x="355.7" y="469" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="466.1" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="469.09" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (110 samples, 0.21%)</title><rect x="526.1" y="469" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (11 samples, 0.02%)</title><rect x="301.9" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.95" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (7 samples, 0.01%)</title><rect x="265.0" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.03" y="511.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::operator (6 samples, 0.01%)</title><rect x="216.5" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.47" y="207.5" ></text>
</g>
<g >
<title>ghost_node_communication::receive_messages_of_neighbors (178 samples, 0.33%)</title><rect x="350.2" y="501" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="353.15" y="511.5" ></text>
</g>
<g >
<title>std::fill_n&lt;unsigned long long*, unsigned long, unsigned long long&gt; (6 samples, 0.01%)</title><rect x="242.6" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.57" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (32 samples, 0.06%)</title><rect x="79.2" y="629" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="82.23" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (5 samples, 0.01%)</title><rect x="1076.5" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1079.55" y="447.5" ></text>
</g>
<g >
<title>hash_boundary_pair::operator (7 samples, 0.01%)</title><rect x="138.5" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="141.55" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (14 samples, 0.03%)</title><rect x="572.4" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="575.38" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::resize (170 samples, 0.32%)</title><rect x="1158.2" y="549" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1161.22" y="559.5" ></text>
</g>
<g >
<title>balance_management_coarsening::getBlockSize (3,160 samples, 5.90%)</title><rect x="724.6" y="533" width="69.7" height="15.0" fill="rgb(0,171,255)" rx="2" ry="2" />
<text  x="727.60" y="543.5" >balance..</text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::_Deque_iterator (24 samples, 0.04%)</title><rect x="307.5" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="310.46" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="278.4" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="281.38" y="463.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (48 samples, 0.09%)</title><rect x="149.0" y="357" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="152.02" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long&gt; (20 samples, 0.04%)</title><rect x="865.7" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="868.67" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned long long*, unsigned long, unsigned long long&gt; (15 samples, 0.03%)</title><rect x="992.9" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.94" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_addr (7 samples, 0.01%)</title><rect x="1080.1" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1083.12" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;boundary_pair const, data_boundary_pair, hash_boundary_pair, compare_boundary_pair, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt; &gt;::~unordered_map (502 samples, 0.94%)</title><rect x="154.1" y="357" width="11.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (30 samples, 0.06%)</title><rect x="150.4" y="325" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="153.43" y="335.5" ></text>
</g>
<g >
<title>__GI___poll (19 samples, 0.04%)</title><rect x="519.5" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="522.55" y="479.5" ></text>
</g>
<g >
<title>size_constraint_label_propagation::match_internal (1,453 samples, 2.71%)</title><rect x="168.0" y="389" width="32.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="171.04" y="399.5" >si..</text>
</g>
<g >
<title>prepare_exit_to_usermode (6 samples, 0.01%)</title><rect x="584.5" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="587.50" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (10 samples, 0.02%)</title><rect x="288.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="291.50" y="495.5" ></text>
</g>
<g >
<title>do_IRQ (6 samples, 0.01%)</title><rect x="922.6" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.56" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="78.9" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="81.90" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (11 samples, 0.02%)</title><rect x="217.2" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.17" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (18 samples, 0.03%)</title><rect x="711.4" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="714.40" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (29 samples, 0.05%)</title><rect x="150.5" y="309" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="153.45" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (50 samples, 0.09%)</title><rect x="287.3" y="453" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="290.29" y="463.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.01%)</title><rect x="1163.3" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.31" y="447.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (8 samples, 0.01%)</title><rect x="1170.1" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (12 samples, 0.02%)</title><rect x="840.6" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="843.63" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::_M_range_check (56 samples, 0.10%)</title><rect x="854.3" y="485" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="857.26" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::operator (6 samples, 0.01%)</title><rect x="280.9" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="283.92" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (16 samples, 0.03%)</title><rect x="53.3" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="56.33" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (1,523 samples, 2.84%)</title><rect x="1008.3" y="533" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.29" y="543.5" >[l..</text>
</g>
<g >
<title>two_way_fm::int_ext_degree (65 samples, 0.12%)</title><rect x="211.7" y="213" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="214.66" y="223.5" ></text>
</g>
<g >
<title>two_way_fm::move_node (77 samples, 0.14%)</title><rect x="211.4" y="229" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="214.40" y="239.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (113 samples, 0.21%)</title><rect x="235.0" y="389" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="238.03" y="399.5" ></text>
</g>
<g >
<title>balance_management_coarsening::setBlockSize (15 samples, 0.03%)</title><rect x="335.9" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="338.89" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::operator++ (13 samples, 0.02%)</title><rect x="471.8" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.78" y="543.5" ></text>
</g>
<g >
<title>distributed_evolutionary_partitioning::perform_partitioning (5,786 samples, 10.81%)</title><rect x="119.6" y="533" width="127.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="122.64" y="543.5" >distributed_evol..</text>
</g>
<g >
<title>handle_mm_fault (9 samples, 0.02%)</title><rect x="391.2" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="394.22" y="367.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (7 samples, 0.01%)</title><rect x="312.8" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.84" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (29 samples, 0.05%)</title><rect x="822.8" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="825.78" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (448 samples, 0.84%)</title><rect x="475.5" y="501" width="9.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="478.51" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (146 samples, 0.27%)</title><rect x="702.5" y="389" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="705.54" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (9 samples, 0.02%)</title><rect x="214.3" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="217.31" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (29 samples, 0.05%)</title><rect x="531.4" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="534.43" y="511.5" ></text>
</g>
<g >
<title>finish_task_switch (15 samples, 0.03%)</title><rect x="14.5" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.54" y="495.5" ></text>
</g>
<g >
<title>__libc_start_main (45 samples, 0.08%)</title><rect x="14.3" y="629" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.32" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::operator[] (11 samples, 0.02%)</title><rect x="216.6" y="229" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.62" y="239.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (32 samples, 0.06%)</title><rect x="12.9" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.91" y="479.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeWeight (101 samples, 0.19%)</title><rect x="802.1" y="549" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="805.06" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt;::_M_next (14 samples, 0.03%)</title><rect x="396.9" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="399.86" y="463.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="684.0" y="245" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.96" y="255.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_first_invalid_edge (13 samples, 0.02%)</title><rect x="856.7" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="859.70" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::operator[] (543 samples, 1.01%)</title><rect x="126.2" y="325" width="12.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="129.25" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (32 samples, 0.06%)</title><rect x="532.1" y="533" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.11" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (14 samples, 0.03%)</title><rect x="106.3" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.35" y="495.5" ></text>
</g>
<g >
<title>complete_boundary::build (25 samples, 0.05%)</title><rect x="200.2" y="261" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.20" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::operator++ (6 samples, 0.01%)</title><rect x="281.1" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="284.05" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (11 samples, 0.02%)</title><rect x="205.6" y="133" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="143.5" ></text>
</g>
<g >
<title>do_group_exit (48 samples, 0.09%)</title><rect x="1176.0" y="565" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;KeyValuePair, std::allocator&lt;KeyValuePair&gt; &gt;::operator[] (49 samples, 0.09%)</title><rect x="677.5" y="517" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="680.52" y="527.5" ></text>
</g>
<g >
<title>munmap_chunk (8 samples, 0.01%)</title><rect x="1041.9" y="549" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="559.5" ></text>
</g>
<g >
<title>__do_page_fault (52 samples, 0.10%)</title><rect x="111.3" y="501" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.33" y="511.5" ></text>
</g>
<g >
<title>two_way_fm::perform_refinement (85 samples, 0.16%)</title><rect x="203.2" y="213" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.20" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (61 samples, 0.11%)</title><rect x="152.0" y="293" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="155.02" y="303.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (43 samples, 0.08%)</title><rect x="993.3" y="501" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="996.32" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (49 samples, 0.09%)</title><rect x="802.9" y="517" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="805.92" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (15 samples, 0.03%)</title><rect x="405.7" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="408.70" y="463.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::hash (159 samples, 0.30%)</title><rect x="667.8" y="501" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="670.76" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::size (42 samples, 0.08%)</title><rect x="854.6" y="469" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="857.56" y="479.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (1,580 samples, 2.95%)</title><rect x="683.6" y="469" width="34.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.63" y="479.5" >st..</text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple&lt;void, true&gt; (37 samples, 0.07%)</title><rect x="622.1" y="485" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="625.06" y="495.5" ></text>
</g>
<g >
<title>contraction::contract (25 samples, 0.05%)</title><rect x="200.2" y="293" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.20" y="303.5" ></text>
</g>
<g >
<title>do_page_fault (13 samples, 0.02%)</title><rect x="1138.8" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.77" y="367.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; const&amp;&gt; (9 samples, 0.02%)</title><rect x="1119.8" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1122.75" y="447.5" ></text>
</g>
<g >
<title>__do_page_fault (8 samples, 0.01%)</title><rect x="994.3" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="479.5" ></text>
</g>
<g >
<title>handle_mm_fault (16 samples, 0.03%)</title><rect x="1163.0" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.95" y="399.5" ></text>
</g>
<g >
<title>std::_Bit_iterator_base::_Bit_iterator_base (40 samples, 0.07%)</title><rect x="861.3" y="485" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="864.26" y="495.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (17 samples, 0.03%)</title><rect x="1164.3" y="229" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.25" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (57 samples, 0.11%)</title><rect x="958.4" y="437" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="961.45" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (27 samples, 0.05%)</title><rect x="97.1" y="629" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="100.11" y="639.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (10 samples, 0.02%)</title><rect x="207.9" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.89" y="255.5" ></text>
</g>
<g >
<title>irq_work_interrupt (5 samples, 0.01%)</title><rect x="1167.7" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1170.67" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (342 samples, 0.64%)</title><rect x="961.0" y="469" width="7.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="963.96" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::allocate (76 samples, 0.14%)</title><rect x="389.9" y="485" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="392.90" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (13 samples, 0.02%)</title><rect x="346.9" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="349.91" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (31 samples, 0.06%)</title><rect x="789.2" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="792.19" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::pop_back (115 samples, 0.21%)</title><rect x="639.2" y="501" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="642.17" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (109 samples, 0.20%)</title><rect x="495.8" y="437" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (542 samples, 1.01%)</title><rect x="541.9" y="501" width="11.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="544.88" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_free (41 samples, 0.08%)</title><rect x="163.8" y="85" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="166.79" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (6 samples, 0.01%)</title><rect x="208.2" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.20" y="239.5" ></text>
</g>
<g >
<title>operator new (79 samples, 0.15%)</title><rect x="1128.7" y="469" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1131.72" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt;::_Node_iterator_base (7 samples, 0.01%)</title><rect x="1086.5" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1089.49" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (7 samples, 0.01%)</title><rect x="1156.0" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1158.99" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (23 samples, 0.04%)</title><rect x="957.9" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="960.90" y="447.5" ></text>
</g>
<g >
<title>__x64_sys_poll (5 samples, 0.01%)</title><rect x="462.6" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.57" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;::allocate (5 samples, 0.01%)</title><rect x="103.2" y="645" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="106.22" y="655.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (21 samples, 0.04%)</title><rect x="112.8" y="293" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, is_boundary&gt; (6 samples, 0.01%)</title><rect x="131.9" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="134.91" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.02%)</title><rect x="462.4" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.41" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_read (28 samples, 0.05%)</title><rect x="110.0" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="463.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (29 samples, 0.05%)</title><rect x="683.8" y="325" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.85" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (11 samples, 0.02%)</title><rect x="1156.2" y="549" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1159.23" y="559.5" ></text>
</g>
<g >
<title>distributed_partitioner::perform_partitioning (39,894 samples, 74.52%)</title><rect x="114.0" y="597" width="879.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="607.5" >distributed_partitioner::perform_partitioning</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::allocate (318 samples, 0.59%)</title><rect x="604.5" y="469" width="7.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="607.54" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_Node_iterator_base (18 samples, 0.03%)</title><rect x="473.5" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="476.50" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (7 samples, 0.01%)</title><rect x="470.9" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="473.90" y="495.5" ></text>
</g>
<g >
<title>schedule (31 samples, 0.06%)</title><rect x="12.9" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.93" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::_M_realloc_insert&lt;AdditionalNonLocalNodeData const&amp;&gt; (27 samples, 0.05%)</title><rect x="1138.6" y="533" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.60" y="543.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (5 samples, 0.01%)</title><rect x="1169.0" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1172.04" y="335.5" ></text>
</g>
<g >
<title>copy_process (6 samples, 0.01%)</title><rect x="10.9" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.88" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (343 samples, 0.64%)</title><rect x="375.8" y="501" width="7.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="378.79" y="511.5" ></text>
</g>
<g >
<title>__do_page_fault (27 samples, 0.05%)</title><rect x="1145.7" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.72" y="479.5" ></text>
</g>
<g >
<title>maxNodeHeap::insert (10 samples, 0.02%)</title><rect x="227.0" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.00" y="207.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::pair&lt;unsigned long long, unsigned long long&gt; &gt; (34 samples, 0.06%)</title><rect x="502.5" y="437" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="505.53" y="447.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (93 samples, 0.17%)</title><rect x="686.6" y="341" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="689.56" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt;::_Node_iterator_base (16 samples, 0.03%)</title><rect x="1057.6" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1060.57" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (79 samples, 0.15%)</title><rect x="1039.3" y="357" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1042.34" y="367.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (190 samples, 0.35%)</title><rect x="340.8" y="453" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="343.76" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (9 samples, 0.02%)</title><rect x="47.3" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="50.30" y="639.5" ></text>
</g>
<g >
<title>PartialBoundary::contains (13 samples, 0.02%)</title><rect x="217.1" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.13" y="191.5" ></text>
</g>
<g >
<title>coarsening::perform_coarsening (82 samples, 0.15%)</title><rect x="215.1" y="293" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%)</title><rect x="218.1" y="117" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.12" y="127.5" ></text>
</g>
<g >
<title>native_write_msr (49 samples, 0.09%)</title><rect x="11.3" y="421" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="14.34" y="431.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long long const, long&gt; (25 samples, 0.05%)</title><rect x="777.3" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="780.28" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (9 samples, 0.02%)</title><rect x="265.2" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.18" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (12 samples, 0.02%)</title><rect x="943.0" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="946.02" y="415.5" ></text>
</g>
<g >
<title>native_write_msr (26 samples, 0.05%)</title><rect x="13.0" y="341" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.00" y="351.5" ></text>
</g>
<g >
<title>parallel_label_compress&lt;linear_probing_hashmap&gt;::perform_parallel_label_compression (16,742 samples, 31.27%)</title><rect x="624.2" y="565" width="369.1" height="15.0" fill="rgb(0,255,34)" rx="2" ry="2" />
<text  x="627.25" y="575.5" >parallel_label_compress&lt;linear_probing_hashmap&gt;::p..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (16 samples, 0.03%)</title><rect x="952.7" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="955.74" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (125 samples, 0.23%)</title><rect x="464.5" y="485" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="467.53" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="194.2" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="197.23" y="335.5" ></text>
</g>
<g >
<title>get_page_from_freelist (5 samples, 0.01%)</title><rect x="1162.3" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.29" y="335.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::find (900 samples, 1.68%)</title><rect x="657.4" y="517" width="19.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="660.40" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (117 samples, 0.22%)</title><rect x="122.3" y="405" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="415.5" ></text>
</g>
<g >
<title>__do_page_cache_readahead (54 samples, 0.10%)</title><rect x="1167.8" y="325" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1170.85" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (8 samples, 0.01%)</title><rect x="719.4" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="722.38" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (10 samples, 0.02%)</title><rect x="539.8" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="542.83" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_M_head (6 samples, 0.01%)</title><rect x="1134.5" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1137.50" y="431.5" ></text>
</g>
<g >
<title>_IO_new_file_xsputn (8 samples, 0.01%)</title><rect x="1170.1" y="549" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (5 samples, 0.01%)</title><rect x="41.7" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="44.72" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (12 samples, 0.02%)</title><rect x="224.2" y="117" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="227.23" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;::allocate (310 samples, 0.58%)</title><rect x="604.7" y="453" width="6.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="607.69" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (17 samples, 0.03%)</title><rect x="960.5" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="963.54" y="463.5" ></text>
</g>
<g >
<title>_int_free (211 samples, 0.39%)</title><rect x="154.1" y="229" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (20 samples, 0.04%)</title><rect x="40.2" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="43.18" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (6 samples, 0.01%)</title><rect x="208.0" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.98" y="239.5" ></text>
</g>
<g >
<title>std::sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, node_ordering::order_nodes_degree (28 samples, 0.05%)</title><rect x="312.7" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.73" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_default_append (170 samples, 0.32%)</title><rect x="1158.2" y="533" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1161.22" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10 samples, 0.02%)</title><rect x="347.4" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="350.40" y="431.5" ></text>
</g>
<g >
<title>page_fault (29 samples, 0.05%)</title><rect x="512.4" y="357" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.43" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (12 samples, 0.02%)</title><rect x="133.8" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="136.79" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_M_next (32 samples, 0.06%)</title><rect x="498.3" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="501.30" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;::construct&lt;std::pair&lt;unsigned int const, is_boundary&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (37 samples, 0.07%)</title><rect x="137.1" y="261" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="140.09" y="271.5" ></text>
</g>
<g >
<title>x86_pmu_enable (6 samples, 0.01%)</title><rect x="1171.9" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.93" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple&lt;void, true&gt; (18 samples, 0.03%)</title><rect x="1136.2" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1139.17" y="527.5" ></text>
</g>
<g >
<title>distributed_partitioner::vcycle (39,894 samples, 74.52%)</title><rect x="114.0" y="581" width="879.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="591.5" >distributed_partitioner::vcycle</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;QElement&lt;maxNodeHeap::Data&gt; &gt;::allocate (8 samples, 0.01%)</title><rect x="227.0" y="101" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.03" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt;::operator[] (11 samples, 0.02%)</title><rect x="864.4" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="867.39" y="527.5" ></text>
</g>
<g >
<title>contraction::contract_clustering (24 samples, 0.04%)</title><rect x="215.1" y="261" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_addr (18 samples, 0.03%)</title><rect x="1105.6" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1108.58" y="415.5" ></text>
</g>
<g >
<title>std::_Bit_iterator_base::_Bit_iterator_base (12 samples, 0.02%)</title><rect x="430.7" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="433.74" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (70 samples, 0.13%)</title><rect x="263.1" y="485" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="266.11" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (258 samples, 0.48%)</title><rect x="1163.5" y="501" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="511.5" ></text>
</g>
<g >
<title>__libc_fork (17 samples, 0.03%)</title><rect x="14.5" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.50" y="543.5" ></text>
</g>
<g >
<title>prep_new_page (5 samples, 0.01%)</title><rect x="994.7" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.71" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (5 samples, 0.01%)</title><rect x="389.0" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="391.97" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;AdditionalNonLocalNodeData*&gt;, AdditionalNonLocalNodeData*&gt; (25 samples, 0.05%)</title><rect x="1138.6" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.64" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::vector (15 samples, 0.03%)</title><rect x="992.9" y="549" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.94" y="559.5" ></text>
</g>
<g >
<title>__handle_mm_fault (9 samples, 0.02%)</title><rect x="1142.2" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.23" y="447.5" ></text>
</g>
<g >
<title>__GI___poll (18 samples, 0.03%)</title><rect x="462.4" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.39" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (30 samples, 0.06%)</title><rect x="597.0" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="600.02" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (22 samples, 0.04%)</title><rect x="245.4" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="248.43" y="479.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (49 samples, 0.09%)</title><rect x="943.8" y="373" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="946.81" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;, std::allocator&lt;std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt; &gt; &gt;::operator[] (6 samples, 0.01%)</title><rect x="504.4" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.36" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (10 samples, 0.02%)</title><rect x="335.6" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="338.61" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="230.0" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.98" y="159.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (12 samples, 0.02%)</title><rect x="279.2" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="282.16" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="148.9" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="151.91" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (16 samples, 0.03%)</title><rect x="486.0" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="488.98" y="479.5" ></text>
</g>
<g >
<title>do_page_fault (12 samples, 0.02%)</title><rect x="1115.7" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.67" y="415.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (5 samples, 0.01%)</title><rect x="209.6" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="212.59" y="223.5" ></text>
</g>
<g >
<title>balance_management_coarsening::update_non_contained_block_balance (7 samples, 0.01%)</title><rect x="353.9" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="356.92" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (7 samples, 0.01%)</title><rect x="406.1" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.12" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (119 samples, 0.22%)</title><rect x="543.2" y="469" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="546.22" y="479.5" ></text>
</g>
<g >
<title>PartialBoundary::contains (7 samples, 0.01%)</title><rect x="203.0" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.98" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (5 samples, 0.01%)</title><rect x="328.3" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="331.27" y="447.5" ></text>
</g>
<g >
<title>balance_management_coarsening::update_non_contained_block_balance (1,488 samples, 2.78%)</title><rect x="927.1" y="485" width="32.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="930.10" y="495.5" >ba..</text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="229.0" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.03" y="159.5" ></text>
</g>
<g >
<title>__do_page_fault (13 samples, 0.02%)</title><rect x="1138.8" y="341" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.77" y="351.5" ></text>
</g>
<g >
<title>__handle_mm_fault (7 samples, 0.01%)</title><rect x="110.8" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.75" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (49 samples, 0.09%)</title><rect x="587.5" y="421" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="590.50" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="406.4" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.38" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;NodeData*, NodeData*, std::allocator&lt;NodeData&gt; &gt; (87 samples, 0.16%)</title><rect x="1146.9" y="517" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.86" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::resize (19 samples, 0.04%)</title><rect x="471.1" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.08" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (20 samples, 0.04%)</title><rect x="1167.9" y="277" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1170.87" y="287.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeWeight (37 samples, 0.07%)</title><rect x="1000.5" y="597" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1003.53" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::emplace_back&lt;unsigned long long&gt; (7 samples, 0.01%)</title><rect x="340.4" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="343.37" y="495.5" ></text>
</g>
<g >
<title>prep_new_page (10 samples, 0.02%)</title><rect x="584.0" y="261" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="587.04" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned long long&gt;, true&gt;::_S_cget (9 samples, 0.02%)</title><rect x="789.9" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="792.87" y="447.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::operator (389 samples, 0.73%)</title><rect x="982.6" y="517" width="8.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="985.61" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (43 samples, 0.08%)</title><rect x="242.7" y="453" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.70" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::_Deque_iterator (8 samples, 0.01%)</title><rect x="46.7" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="49.72" y="639.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;*&gt; (6 samples, 0.01%)</title><rect x="266.0" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.04" y="479.5" ></text>
</g>
<g >
<title>PMPI_Barrier (227 samples, 0.42%)</title><rect x="114.0" y="565" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="575.5" ></text>
</g>
<g >
<title>__GI_munmap (10 samples, 0.02%)</title><rect x="1146.6" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::push_back (39 samples, 0.07%)</title><rect x="292.9" y="517" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.87" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="538.2" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="541.22" y="511.5" ></text>
</g>
<g >
<title>graph_partitioner::perform_recursive_partitioning_internal (1,384 samples, 2.59%)</title><rect x="200.1" y="357" width="30.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.07" y="367.5" >gr..</text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (33 samples, 0.06%)</title><rect x="721.9" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="724.91" y="447.5" ></text>
</g>
<g >
<title>complete_boundary::assert_bnodes_in_boundaries (98 samples, 0.18%)</title><rect x="206.5" y="261" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.48" y="271.5" ></text>
</g>
<g >
<title>__handle_mm_fault (34 samples, 0.06%)</title><rect x="610.2" y="325" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.18" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (16 samples, 0.03%)</title><rect x="121.4" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="124.44" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="122.1" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.06" y="463.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (11 samples, 0.02%)</title><rect x="44.0" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="46.99" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (31 samples, 0.06%)</title><rect x="396.5" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="399.51" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (115 samples, 0.21%)</title><rect x="482.8" y="469" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="485.85" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (8 samples, 0.01%)</title><rect x="233.8" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="236.77" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_valptr (10 samples, 0.02%)</title><rect x="281.2" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="284.18" y="511.5" ></text>
</g>
<g >
<title>_dl_map_object (14 samples, 0.03%)</title><rect x="1170.6" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.60" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::end (5 samples, 0.01%)</title><rect x="393.3" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="396.29" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false, false&gt;::_Node_iterator (5 samples, 0.01%)</title><rect x="1086.8" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1089.84" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;KeyValuePair, std::allocator&lt;KeyValuePair&gt; &gt;::operator[] (62 samples, 0.12%)</title><rect x="675.9" y="501" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="678.87" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (6 samples, 0.01%)</title><rect x="12.6" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.56" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator-- (7 samples, 0.01%)</title><rect x="681.2" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="684.16" y="447.5" ></text>
</g>
<g >
<title>prep_new_page (20 samples, 0.04%)</title><rect x="111.8" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.79" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::_Node_iterator (10 samples, 0.02%)</title><rect x="553.6" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="556.60" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="830.4" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="833.45" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (19 samples, 0.04%)</title><rect x="1109.5" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1112.46" y="479.5" ></text>
</g>
<g >
<title>release_pages (7 samples, 0.01%)</title><rect x="1146.7" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.67" y="287.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (45 samples, 0.08%)</title><rect x="240.8" y="341" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="243.85" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_default_append (7 samples, 0.01%)</title><rect x="525.6" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="528.56" y="527.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_first_edge (32 samples, 0.06%)</title><rect x="1001.3" y="597" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1004.34" y="607.5" ></text>
</g>
<g >
<title>handle_mm_fault (10 samples, 0.02%)</title><rect x="1162.3" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.29" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::operator[] (850 samples, 1.59%)</title><rect x="374.6" y="533" width="18.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="377.55" y="543.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (18 samples, 0.03%)</title><rect x="212.6" y="197" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.61" y="207.5" ></text>
</g>
<g >
<title>parallel_graph_access::new_edge (4,839 samples, 9.04%)</title><rect x="1042.1" y="565" width="106.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1045.14" y="575.5" >parallel_grap..</text>
</g>
<g >
<title>[libmpich.so.0.0.0] (157 samples, 0.29%)</title><rect x="107.2" y="517" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.21" y="527.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (40 samples, 0.07%)</title><rect x="492.4" y="437" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="495.39" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="334.3" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="337.26" y="511.5" ></text>
</g>
<g >
<title>flush_old_exec (5 samples, 0.01%)</title><rect x="14.1" y="549" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.14" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (68 samples, 0.13%)</title><rect x="390.0" y="437" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="393.03" y="447.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (1,055 samples, 1.97%)</title><rect x="683.6" y="437" width="23.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.65" y="447.5" >s..</text>
</g>
<g >
<title>__handle_mm_fault (9 samples, 0.02%)</title><rect x="108.2" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.24" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, hashed_edge const&amp;&gt; (10 samples, 0.02%)</title><rect x="494.3" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="497.33" y="431.5" ></text>
</g>
<g >
<title>ksys_read (258 samples, 0.48%)</title><rect x="1163.5" y="453" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (93 samples, 0.17%)</title><rect x="689.3" y="341" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="692.29" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (67 samples, 0.13%)</title><rect x="535.7" y="501" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="538.73" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_node (18 samples, 0.03%)</title><rect x="292.4" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.40" y="463.5" ></text>
</g>
<g >
<title>__lru_cache_add (5 samples, 0.01%)</title><rect x="512.9" y="261" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.89" y="271.5" ></text>
</g>
<g >
<title>do_page_fault (8 samples, 0.01%)</title><rect x="994.3" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::is_interface_node (14 samples, 0.03%)</title><rect x="926.0" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="929.00" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (86 samples, 0.16%)</title><rect x="290.2" y="421" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (521 samples, 0.97%)</title><rect x="316.3" y="453" width="11.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="319.34" y="463.5" ></text>
</g>
<g >
<title>complete_boundary::contains (52 samples, 0.10%)</title><rect x="206.7" y="245" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.75" y="255.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (7 samples, 0.01%)</title><rect x="1041.9" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::is_interface_node (15 samples, 0.03%)</title><rect x="866.4" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.40" y="543.5" ></text>
</g>
<g >
<title>do_page_fault (12 samples, 0.02%)</title><rect x="994.6" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.62" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (124 samples, 0.23%)</title><rect x="965.6" y="421" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="968.59" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (234 samples, 0.44%)</title><rect x="526.1" y="533" width="5.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::allocate (9 samples, 0.02%)</title><rect x="866.1" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.11" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::_M_deallocate (19 samples, 0.04%)</title><rect x="504.6" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.65" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (11 samples, 0.02%)</title><rect x="1116.8" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1119.75" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (15 samples, 0.03%)</title><rect x="717.5" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="720.46" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;NodeData&gt; &gt;::deallocate (11 samples, 0.02%)</title><rect x="1146.6" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::getTargetPE (63 samples, 0.12%)</title><rect x="427.6" y="533" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="430.61" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="323.0" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="326.02" y="431.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned long long&gt; (6 samples, 0.01%)</title><rect x="688.5" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="691.48" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (7 samples, 0.01%)</title><rect x="531.9" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="534.91" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (8 samples, 0.01%)</title><rect x="769.2" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="772.24" y="463.5" ></text>
</g>
<g >
<title>hmap_wrapper&lt;linear_probing_hashmap&gt;::operator[] (1,083 samples, 2.02%)</title><rect x="654.8" y="549" width="23.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="657.75" y="559.5" >h..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (12 samples, 0.02%)</title><rect x="158.9" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.87" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::push_back (113 samples, 0.21%)</title><rect x="1136.7" y="549" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1139.70" y="559.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::size (176 samples, 0.33%)</title><rect x="641.8" y="501" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="644.81" y="511.5" ></text>
</g>
<g >
<title>alloc_pages_vma (19 samples, 0.04%)</title><rect x="1164.3" y="245" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.25" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (10 samples, 0.02%)</title><rect x="407.0" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.98" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (6 samples, 0.01%)</title><rect x="200.5" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.53" y="223.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;Edge*, unsigned long, Edge&gt; (170 samples, 0.32%)</title><rect x="1158.2" y="453" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1161.22" y="463.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (11 samples, 0.02%)</title><rect x="510.9" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="513.88" y="399.5" ></text>
</g>
<g >
<title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="685.1" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="688.10" y="335.5" ></text>
</g>
<g >
<title>sysmalloc (6 samples, 0.01%)</title><rect x="611.3" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="614.31" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (17 samples, 0.03%)</title><rect x="300.5" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.51" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (545 samples, 1.02%)</title><rect x="1029.6" y="405" width="12.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1032.60" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (5 samples, 0.01%)</title><rect x="151.8" y="261" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="154.82" y="271.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (19 samples, 0.04%)</title><rect x="867.7" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="870.66" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::operator (14 samples, 0.03%)</title><rect x="622.9" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="625.88" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (10 samples, 0.02%)</title><rect x="926.1" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="929.09" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;node_ordering::order_nodes_degree (157 samples, 0.29%)</title><rect x="680.1" y="453" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="683.14" y="463.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (8 samples, 0.01%)</title><rect x="15.1" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (6 samples, 0.01%)</title><rect x="204.7" y="117" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.72" y="127.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, unsigned long long&gt; (16 samples, 0.03%)</title><rect x="1120.0" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1122.95" y="447.5" ></text>
</g>
<g >
<title>complete_boundary::contains (10 samples, 0.02%)</title><rect x="223.0" y="165" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="226.04" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (17 samples, 0.03%)</title><rect x="925.3" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="928.27" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (13 samples, 0.02%)</title><rect x="700.7" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="703.69" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;KeyValuePair, std::allocator&lt;KeyValuePair&gt; &gt;::operator[] (7 samples, 0.01%)</title><rect x="308.0" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="310.99" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_eq (5 samples, 0.01%)</title><rect x="153.2" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="156.23" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault (27 samples, 0.05%)</title><rect x="510.7" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="513.71" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (23 samples, 0.04%)</title><rect x="578.4" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="581.42" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (40 samples, 0.07%)</title><rect x="1157.3" y="549" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1160.33" y="559.5" ></text>
</g>
<g >
<title>initial_partitioning::perform_initial_partitioning (1,388 samples, 2.59%)</title><rect x="200.1" y="421" width="30.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.07" y="431.5" >in..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (17 samples, 0.03%)</title><rect x="965.7" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="968.70" y="415.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (22 samples, 0.04%)</title><rect x="1161.5" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.46" y="447.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::back (277 samples, 0.52%)</title><rect x="646.3" y="501" width="6.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="649.33" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (86 samples, 0.16%)</title><rect x="290.2" y="437" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (65 samples, 0.12%)</title><rect x="520.0" y="517" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="523.01" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (947 samples, 1.77%)</title><rect x="769.4" y="453" width="20.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="772.42" y="463.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;*&gt; (24 samples, 0.04%)</title><rect x="409.9" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::erase (224 samples, 0.42%)</title><rect x="831.8" y="517" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="834.84" y="527.5" ></text>
</g>
<g >
<title>do_page_fault (17 samples, 0.03%)</title><rect x="1162.9" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.93" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (34 samples, 0.06%)</title><rect x="710.7" y="357" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="713.65" y="367.5" ></text>
</g>
<g >
<title>parallel_graph_access::update_non_contained_block_balance (5 samples, 0.01%)</title><rect x="981.9" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="984.92" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::~unordered_map (32 samples, 0.06%)</title><rect x="532.1" y="549" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.11" y="559.5" ></text>
</g>
<g >
<title>MPI_Probe (170 samples, 0.32%)</title><rect x="350.2" y="485" width="3.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="353.15" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="208.2" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.22" y="223.5" ></text>
</g>
<g >
<title>sock_poll (6 samples, 0.01%)</title><rect x="1040.9" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1043.86" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::size (30 samples, 0.06%)</title><rect x="236.7" y="341" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="239.70" y="351.5" ></text>
</g>
<g >
<title>load_elf_binary (12 samples, 0.02%)</title><rect x="1189.7" y="565" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.74" y="575.5" ></text>
</g>
<g >
<title>x86_pmu_enable (48 samples, 0.09%)</title><rect x="1166.6" y="277" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1169.61" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (142 samples, 0.27%)</title><rect x="826.5" y="517" width="3.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="829.50" y="527.5" ></text>
</g>
<g >
<title>alloc_pages_vma (24 samples, 0.04%)</title><rect x="111.7" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.72" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (82 samples, 0.15%)</title><rect x="273.2" y="485" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.18" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (14 samples, 0.03%)</title><rect x="106.3" y="565" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.35" y="575.5" ></text>
</g>
<g >
<title>quotient_graph_refinement::perform_refinement (388 samples, 0.72%)</title><rect x="206.5" y="277" width="8.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.48" y="287.5" ></text>
</g>
<g >
<title>x86_pmu_enable (7 samples, 0.01%)</title><rect x="994.3" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (839 samples, 1.57%)</title><rect x="1066.0" y="501" width="18.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1069.04" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator++ (12 samples, 0.02%)</title><rect x="713.0" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="715.99" y="431.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt; &gt; (24 samples, 0.04%)</title><rect x="409.9" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="479.5" ></text>
</g>
<g >
<title>MPI_Wait (5 samples, 0.01%)</title><rect x="922.7" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.72" y="511.5" ></text>
</g>
<g >
<title>io_schedule (22 samples, 0.04%)</title><rect x="112.8" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (21 samples, 0.04%)</title><rect x="682.9" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="685.90" y="399.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (8 samples, 0.01%)</title><rect x="620.0" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="622.99" y="463.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::_M_gen_rand (9 samples, 0.02%)</title><rect x="355.0" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.05" y="479.5" ></text>
</g>
<g >
<title>PartialBoundary::contains (14 samples, 0.03%)</title><rect x="225.7" y="213" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.73" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (14 samples, 0.03%)</title><rect x="410.6" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="413.59" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (140 samples, 0.26%)</title><rect x="1110.8" y="501" width="3.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1113.76" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (370 samples, 0.69%)</title><rect x="247.2" y="453" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="463.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (5 samples, 0.01%)</title><rect x="403.5" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.54" y="415.5" ></text>
</g>
<g >
<title>bipartition::post_fm (374 samples, 0.70%)</title><rect x="216.9" y="245" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.91" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (12 samples, 0.02%)</title><rect x="531.8" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="534.80" y="479.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (5 samples, 0.01%)</title><rect x="1116.0" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.96" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.02%)</title><rect x="279.8" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="282.79" y="447.5" ></text>
</g>
<g >
<title>__schedule (9 samples, 0.02%)</title><rect x="108.2" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.24" y="287.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (7 samples, 0.01%)</title><rect x="15.1" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="351.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long long const, long&gt; (5 samples, 0.01%)</title><rect x="324.4" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="327.39" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::allocate (12 samples, 0.02%)</title><rect x="302.8" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="305.81" y="463.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (11 samples, 0.02%)</title><rect x="684.7" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.66" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::~vector (14 samples, 0.03%)</title><rect x="969.5" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.54" y="511.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (50 samples, 0.09%)</title><rect x="1166.6" y="293" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1169.57" y="303.5" ></text>
</g>
<g >
<title>unmap_page_range (48 samples, 0.09%)</title><rect x="1176.0" y="469" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="479.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (5 samples, 0.01%)</title><rect x="211.3" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="214.29" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (29 samples, 0.05%)</title><rect x="835.8" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="838.83" y="479.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned int const&amp;&gt;::_Tuple_impl (7 samples, 0.01%)</title><rect x="137.8" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="140.76" y="239.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (719 samples, 1.34%)</title><rect x="355.7" y="405" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::construct&lt;unsigned long long, unsigned long long&gt; (19 samples, 0.04%)</title><rect x="865.7" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="868.67" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_addr (24 samples, 0.04%)</title><rect x="774.7" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="777.68" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::find (6 samples, 0.01%)</title><rect x="202.8" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.76" y="191.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (29 samples, 0.05%)</title><rect x="119.0" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (78 samples, 0.15%)</title><rect x="943.3" y="405" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="946.31" y="415.5" ></text>
</g>
<g >
<title>alloc_pages_vma (14 samples, 0.03%)</title><rect x="610.2" y="309" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.25" y="319.5" ></text>
</g>
<g >
<title>native_write_msr (9 samples, 0.02%)</title><rect x="1189.8" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.76" y="463.5" ></text>
</g>
<g >
<title>std::copy&lt;std::move_iterator&lt;Node*&gt;, Node*&gt; (21 samples, 0.04%)</title><rect x="1142.7" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.72" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (1,523 samples, 2.84%)</title><rect x="1008.3" y="421" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.29" y="431.5" >[l..</text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (11 samples, 0.02%)</title><rect x="295.4" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="298.44" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (178 samples, 0.33%)</title><rect x="508.0" y="517" width="4.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="511.04" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator-- (12 samples, 0.02%)</title><rect x="713.3" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="716.25" y="431.5" ></text>
</g>
<g >
<title>__libc_read (259 samples, 0.48%)</title><rect x="1163.5" y="517" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="527.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::operator (6 samples, 0.01%)</title><rect x="216.5" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.47" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_execve (12 samples, 0.02%)</title><rect x="1189.7" y="613" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.74" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (37 samples, 0.07%)</title><rect x="837.4" y="485" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="840.37" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (43 samples, 0.08%)</title><rect x="242.7" y="421" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.70" y="431.5" ></text>
</g>
<g >
<title>prep_new_page (7 samples, 0.01%)</title><rect x="1146.0" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.03" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_M_next (29 samples, 0.05%)</title><rect x="262.2" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="265.21" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::setNodeLabel (1,188 samples, 2.22%)</title><rect x="840.9" y="549" width="26.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="843.92" y="559.5" >p..</text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::find (5 samples, 0.01%)</title><rect x="1169.3" y="565" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1172.32" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (30 samples, 0.06%)</title><rect x="268.6" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.58" y="511.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="313.0" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.99" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (12 samples, 0.02%)</title><rect x="1087.6" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1090.61" y="543.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (28 samples, 0.05%)</title><rect x="312.7" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.73" y="495.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (7 samples, 0.01%)</title><rect x="204.9" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.85" y="175.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (1,523 samples, 2.84%)</title><rect x="1008.3" y="453" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.29" y="463.5" >[l..</text>
</g>
<g >
<title>parallel_graph_access::new_edge (58 samples, 0.11%)</title><rect x="244.1" y="485" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="247.06" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.04%)</title><rect x="268.7" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.69" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (17 samples, 0.03%)</title><rect x="522.9" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="525.92" y="447.5" ></text>
</g>
<g >
<title>page_fault (51 samples, 0.10%)</title><rect x="1164.0" y="325" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.99" y="335.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_first_invalid_edge (15 samples, 0.03%)</title><rect x="1002.0" y="597" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1005.05" y="607.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (31 samples, 0.06%)</title><rect x="222.2" y="149" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="225.18" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt; &gt;::_M_allocate_buckets (6 samples, 0.01%)</title><rect x="133.5" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="136.55" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (11 samples, 0.02%)</title><rect x="598.3" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="601.32" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (43 samples, 0.08%)</title><rect x="242.7" y="469" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.70" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (13 samples, 0.02%)</title><rect x="425.7" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="428.69" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (227 samples, 0.42%)</title><rect x="114.0" y="453" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (273 samples, 0.51%)</title><rect x="159.1" y="165" width="6.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="162.14" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (30 samples, 0.06%)</title><rect x="937.1" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="940.07" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (71 samples, 0.13%)</title><rect x="1175.5" y="645" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1178.54" y="655.5" ></text>
</g>
<g >
<title>error_entry (6 samples, 0.01%)</title><rect x="512.3" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.29" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (846 samples, 1.58%)</title><rect x="374.6" y="517" width="18.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="377.62" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (18 samples, 0.03%)</title><rect x="405.3" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="408.26" y="463.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (9 samples, 0.02%)</title><rect x="403.6" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.65" y="447.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (5 samples, 0.01%)</title><rect x="462.1" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.15" y="415.5" ></text>
</g>
<g >
<title>_dl_start (10 samples, 0.02%)</title><rect x="13.9" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.92" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (26 samples, 0.05%)</title><rect x="107.6" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="431.5" ></text>
</g>
<g >
<title>handle_mm_fault (7 samples, 0.01%)</title><rect x="110.8" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.75" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (594 samples, 1.11%)</title><rect x="1110.1" y="517" width="13.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1113.05" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_addr (16 samples, 0.03%)</title><rect x="39.0" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="42.03" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt; &gt;::_M_node_allocator (6 samples, 0.01%)</title><rect x="163.4" y="117" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="166.39" y="127.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (21 samples, 0.04%)</title><rect x="223.6" y="149" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="226.63" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.01%)</title><rect x="268.0" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.02" y="463.5" ></text>
</g>
<g >
<title>__GI___poll (15 samples, 0.03%)</title><rect x="424.4" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="427.41" y="495.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (10 samples, 0.02%)</title><rect x="168.0" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="171.04" y="383.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (12 samples, 0.02%)</title><rect x="243.3" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="246.27" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;Node*, unsigned long&gt; (25 samples, 0.05%)</title><rect x="1162.0" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.96" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (6 samples, 0.01%)</title><rect x="551.0" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="554.00" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (11 samples, 0.02%)</title><rect x="340.3" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="343.28" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (317 samples, 0.59%)</title><rect x="85.2" y="629" width="7.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="88.23" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt;::_M_next (160 samples, 0.30%)</title><rect x="159.4" y="133" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="162.42" y="143.5" ></text>
</g>
<g >
<title>_dl_start_final (10 samples, 0.02%)</title><rect x="15.4" y="613" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.42" y="623.5" ></text>
</g>
<g >
<title>sock_recvmsg (6 samples, 0.01%)</title><rect x="12.6" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.56" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;KeyValuePair, std::allocator&lt;KeyValuePair&gt; &gt;::operator[] (11 samples, 0.02%)</title><rect x="312.4" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.42" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (47 samples, 0.09%)</title><rect x="59.9" y="629" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="62.88" y="639.5" ></text>
</g>
<g >
<title>__do_munmap (8 samples, 0.01%)</title><rect x="1041.9" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (7 samples, 0.01%)</title><rect x="1127.6" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1130.64" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_free (14 samples, 0.03%)</title><rect x="969.5" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.54" y="431.5" ></text>
</g>
<g >
<title>operator new (6 samples, 0.01%)</title><rect x="1126.9" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1129.92" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple (5 samples, 0.01%)</title><rect x="620.3" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="623.34" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long long const, long&gt;::pair&lt;unsigned long long const&amp;&gt; (10 samples, 0.02%)</title><rect x="959.3" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="962.31" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (10 samples, 0.02%)</title><rect x="926.5" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="929.47" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (24 samples, 0.04%)</title><rect x="224.6" y="133" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="227.60" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="1117.7" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1120.70" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (8 samples, 0.01%)</title><rect x="113.8" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.77" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (17 samples, 0.03%)</title><rect x="406.3" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.27" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (70 samples, 0.13%)</title><rect x="393.7" y="485" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="396.69" y="495.5" ></text>
</g>
<g >
<title>PartialBoundary::contains (36 samples, 0.07%)</title><rect x="206.8" y="229" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.77" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (85 samples, 0.16%)</title><rect x="1100.1" y="485" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1103.07" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (20 samples, 0.04%)</title><rect x="1084.5" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1087.53" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (8 samples, 0.01%)</title><rect x="1104.6" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1107.63" y="447.5" ></text>
</g>
<g >
<title>PartialBoundary::contains (6 samples, 0.01%)</title><rect x="202.8" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.76" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (9 samples, 0.02%)</title><rect x="374.0" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="376.96" y="527.5" ></text>
</g>
<g >
<title>data_boundary_pair::~data_boundary_pair (287 samples, 0.54%)</title><rect x="158.9" y="229" width="6.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.85" y="239.5" ></text>
</g>
<g >
<title>schedule (8 samples, 0.01%)</title><rect x="15.1" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="447.5" ></text>
</g>
<g >
<title>maxNodeHeap::decreaseKey (6 samples, 0.01%)</title><rect x="227.6" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.58" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (5 samples, 0.01%)</title><rect x="525.4" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="528.41" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (15 samples, 0.03%)</title><rect x="965.1" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="968.06" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (8 samples, 0.01%)</title><rect x="408.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.52" y="495.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (8 samples, 0.01%)</title><rect x="1170.1" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (22 samples, 0.04%)</title><rect x="469.1" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.07" y="495.5" ></text>
</g>
<g >
<title>x86_pmu_enable (12 samples, 0.02%)</title><rect x="14.6" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.56" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (18 samples, 0.03%)</title><rect x="345.7" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.74" y="415.5" ></text>
</g>
<g >
<title>do_sys_poll (12 samples, 0.02%)</title><rect x="15.0" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.03" y="511.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (12 samples, 0.02%)</title><rect x="202.2" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.21" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (6 samples, 0.01%)</title><rect x="210.2" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.23" y="175.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (227 samples, 0.42%)</title><rect x="114.0" y="501" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (203 samples, 0.38%)</title><rect x="127.8" y="277" width="4.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="130.77" y="287.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (31 samples, 0.06%)</title><rect x="1176.4" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.42" y="463.5" ></text>
</g>
<g >
<title>__GI___poll (5 samples, 0.01%)</title><rect x="268.0" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.02" y="479.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::~allocator (5 samples, 0.01%)</title><rect x="1135.9" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1138.93" y="527.5" ></text>
</g>
<g >
<title>finish_task_switch (7 samples, 0.01%)</title><rect x="1171.9" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="351.5" ></text>
</g>
<g >
<title>[hydra_pmi_proxy] (106 samples, 0.20%)</title><rect x="10.5" y="565" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.48" y="575.5" ></text>
</g>
<g >
<title>ret_from_intr (7 samples, 0.01%)</title><rect x="1041.7" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.66" y="415.5" ></text>
</g>
<g >
<title>ext4_mpage_readpages (25 samples, 0.05%)</title><rect x="1168.4" y="277" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1171.44" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (13 samples, 0.02%)</title><rect x="956.8" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="959.82" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="313.2" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="316.23" y="431.5" ></text>
</g>
<g >
<title>__x64_sys_mmap (5 samples, 0.01%)</title><rect x="1170.6" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="431.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::pair&lt;unsigned long long, unsigned long long&gt; &gt; (7 samples, 0.01%)</title><rect x="293.2" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.24" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (28 samples, 0.05%)</title><rect x="127.0" y="261" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="129.96" y="271.5" ></text>
</g>
<g >
<title>_dl_map_object (5 samples, 0.01%)</title><rect x="13.9" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.92" y="527.5" ></text>
</g>
<g >
<title>all (53,534 samples, 100%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (17 samples, 0.03%)</title><rect x="280.0" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="283.02" y="479.5" ></text>
</g>
<g >
<title>_int_malloc (5 samples, 0.01%)</title><rect x="289.3" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="292.32" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (6 samples, 0.01%)</title><rect x="549.8" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="552.83" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="943.6" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="946.61" y="367.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (18 samples, 0.03%)</title><rect x="274.6" y="373" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="277.59" y="383.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (16 samples, 0.03%)</title><rect x="1189.1" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.10" y="463.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::_S_buffer_size (6 samples, 0.01%)</title><rect x="46.9" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="49.90" y="639.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, Node*, Node*&gt; (21 samples, 0.04%)</title><rect x="1142.7" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.72" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="202.6" y="245" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.60" y="255.5" ></text>
</g>
<g >
<title>ghost_node_communication::addLabel (193 samples, 0.36%)</title><rect x="336.3" y="517" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="339.27" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (349 samples, 0.65%)</title><rect x="565.2" y="469" width="7.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="568.22" y="479.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (258 samples, 0.48%)</title><rect x="1163.5" y="389" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="399.5" ></text>
</g>
<g >
<title>sock_read_iter (26 samples, 0.05%)</title><rect x="107.6" y="325" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::at (79 samples, 0.15%)</title><rect x="854.0" y="501" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="856.99" y="511.5" ></text>
</g>
<g >
<title>_int_malloc (66 samples, 0.12%)</title><rect x="916.5" y="405" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="919.55" y="415.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (16 samples, 0.03%)</title><rect x="1171.5" y="277" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.46" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::operator[] (11 samples, 0.02%)</title><rect x="855.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="858.49" y="495.5" ></text>
</g>
<g >
<title>std::operator-&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt; (38 samples, 0.07%)</title><rect x="306.1" y="469" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="309.07" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (22 samples, 0.04%)</title><rect x="324.0" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="327.01" y="415.5" ></text>
</g>
<g >
<title>exit_mmap (5 samples, 0.01%)</title><rect x="14.1" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.14" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (6 samples, 0.01%)</title><rect x="1077.4" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1080.39" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (34 samples, 0.06%)</title><rect x="473.1" y="517" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="476.15" y="527.5" ></text>
</g>
<g >
<title>sock_recvmsg (28 samples, 0.05%)</title><rect x="110.0" y="357" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (6 samples, 0.01%)</title><rect x="219.4" y="117" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.44" y="127.5" ></text>
</g>
<g >
<title>get_page_from_freelist (6 samples, 0.01%)</title><rect x="471.2" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.19" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, compare_boundary_pair, unsigned long, true&gt;::_S_equals (46 samples, 0.09%)</title><rect x="152.0" y="277" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="155.04" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::push_back (5 samples, 0.01%)</title><rect x="470.6" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="473.64" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::operator (8 samples, 0.01%)</title><rect x="264.7" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="267.65" y="495.5" ></text>
</g>
<g >
<title>do_page_fault (29 samples, 0.05%)</title><rect x="512.4" y="341" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.43" y="351.5" ></text>
</g>
<g >
<title>ext4_filemap_fault (8 samples, 0.01%)</title><rect x="994.3" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.02%)</title><rect x="15.0" y="549" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.03" y="559.5" ></text>
</g>
<g >
<title>graph_access::getNodeWeight (12 samples, 0.02%)</title><rect x="194.1" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="197.10" y="367.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (8 samples, 0.01%)</title><rect x="403.2" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.21" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::getBlockSize (3,260 samples, 6.09%)</title><rect x="722.7" y="549" width="71.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="725.69" y="559.5" >parallel..</text>
</g>
<g >
<title>page_fault (8 samples, 0.01%)</title><rect x="994.3" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (5 samples, 0.01%)</title><rect x="49.7" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="52.70" y="639.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (7 samples, 0.01%)</title><rect x="1189.4" y="645" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.45" y="655.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, long&gt; const&amp;&gt; (10 samples, 0.02%)</title><rect x="580.8" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="583.85" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::_Node_iterator (25 samples, 0.05%)</title><rect x="540.8" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="543.84" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::UNSAFE_metis_style_adjwgt_array (16 samples, 0.03%)</title><rect x="246.8" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="249.80" y="527.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10 samples, 0.02%)</title><rect x="1162.3" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.29" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (7 samples, 0.01%)</title><rect x="572.1" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="575.09" y="447.5" ></text>
</g>
<g >
<title>malloc_consolidate (6 samples, 0.01%)</title><rect x="227.1" y="37" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.07" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long long&gt;, true&gt;::_S_cget (22 samples, 0.04%)</title><rect x="792.0" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="795.01" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (140 samples, 0.26%)</title><rect x="542.9" y="485" width="3.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="545.93" y="495.5" ></text>
</g>
<g >
<title>__lock_page_killable (9 samples, 0.02%)</title><rect x="108.2" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.24" y="335.5" ></text>
</g>
<g >
<title>random_functions::nextBool (61 samples, 0.11%)</title><rect x="354.1" y="533" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="357.08" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (8 samples, 0.01%)</title><rect x="242.4" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.39" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (14 samples, 0.03%)</title><rect x="469.9" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.86" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (7 samples, 0.01%)</title><rect x="218.1" y="133" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.08" y="143.5" ></text>
</g>
<g >
<title>two_way_fm::init_queue_with_boundary (22 samples, 0.04%)</title><rect x="227.0" y="213" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.00" y="223.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (7 samples, 0.01%)</title><rect x="207.7" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.67" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (208 samples, 0.39%)</title><rect x="495.8" y="517" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (126 samples, 0.24%)</title><rect x="692.9" y="357" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="695.93" y="367.5" ></text>
</g>
<g >
<title>schedule (8 samples, 0.01%)</title><rect x="994.3" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (27 samples, 0.05%)</title><rect x="928.9" y="405" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="931.91" y="415.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (46 samples, 0.09%)</title><rect x="687.0" y="309" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="690.04" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_addr (8 samples, 0.01%)</title><rect x="794.0" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="797.01" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (106 samples, 0.20%)</title><rect x="709.1" y="373" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="712.06" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::allocate (6 samples, 0.01%)</title><rect x="470.0" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.95" y="479.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (39 samples, 0.07%)</title><rect x="107.6" y="469" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.58" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (16 samples, 0.03%)</title><rect x="147.1" y="309" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="150.06" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (102 samples, 0.19%)</title><rect x="260.6" y="453" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="263.62" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (370 samples, 0.69%)</title><rect x="247.2" y="421" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (10 samples, 0.02%)</title><rect x="302.9" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="305.85" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (10 samples, 0.02%)</title><rect x="685.8" y="261" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="688.83" y="271.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (26 samples, 0.05%)</title><rect x="107.6" y="277" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="287.5" ></text>
</g>
<g >
<title>do_sys_poll (34 samples, 0.06%)</title><rect x="12.9" y="517" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.89" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;Node*, Node*, std::allocator&lt;Node&gt; &gt; (21 samples, 0.04%)</title><rect x="1142.7" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.72" y="527.5" ></text>
</g>
<g >
<title>handle_fasteoi_irq (6 samples, 0.01%)</title><rect x="1041.7" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.66" y="383.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_Head_base (19 samples, 0.04%)</title><rect x="622.5" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="625.46" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (300 samples, 0.56%)</title><rect x="106.8" y="565" width="6.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.81" y="575.5" ></text>
</g>
<g >
<title>__lru_cache_add (7 samples, 0.01%)</title><rect x="112.3" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.30" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (403 samples, 0.75%)</title><rect x="960.0" y="501" width="8.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="962.99" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (124 samples, 0.23%)</title><rect x="1075.1" y="485" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1078.05" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.02%)</title><rect x="467.8" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="470.81" y="463.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (7 samples, 0.01%)</title><rect x="1041.9" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (18 samples, 0.03%)</title><rect x="570.0" y="389" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="573.00" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;::allocate (12 samples, 0.02%)</title><rect x="263.7" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="266.68" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (72 samples, 0.13%)</title><rect x="273.4" y="389" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.40" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (5 samples, 0.01%)</title><rect x="208.8" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.80" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::construct&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (18 samples, 0.03%)</title><rect x="289.5" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="292.52" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="50.3" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="53.27" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="958.8" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="961.78" y="431.5" ></text>
</g>
<g >
<title>MPI_Probe (16 samples, 0.03%)</title><rect x="272.8" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="275.83" y="527.5" ></text>
</g>
<g >
<title>std::sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, node_ordering::order_nodes_degree (1,987 samples, 3.71%)</title><rect x="678.8" y="517" width="43.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="681.84" y="527.5" >std:..</text>
</g>
<g >
<title>io_schedule (7 samples, 0.01%)</title><rect x="111.5" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, compare_hashed_edge, unsigned long, true&gt;::_S_equals (98 samples, 0.18%)</title><rect x="483.0" y="453" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="486.00" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (10 samples, 0.02%)</title><rect x="98.7" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="101.72" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (8 samples, 0.01%)</title><rect x="139.3" y="245" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="255.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (42 samples, 0.08%)</title><rect x="311.5" y="469" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="314.49" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (226 samples, 0.42%)</title><rect x="696.8" y="405" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="699.81" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (16 samples, 0.03%)</title><rect x="282.3" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="285.31" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::operator[] (389 samples, 0.73%)</title><rect x="256.4" y="517" width="8.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="259.43" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (9 samples, 0.02%)</title><rect x="144.1" y="261" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="147.13" y="271.5" ></text>
</g>
<g >
<title>bipartition::post_fm (107 samples, 0.20%)</title><rect x="202.7" y="261" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.71" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (375 samples, 0.70%)</title><rect x="928.3" y="453" width="8.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="931.27" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::destroy&lt;unsigned long long&gt; (6 samples, 0.01%)</title><rect x="641.1" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="644.13" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (31 samples, 0.06%)</title><rect x="550.8" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="553.85" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;Edge*, unsigned long, Edge&gt; (170 samples, 0.32%)</title><rect x="1158.2" y="517" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1161.22" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (5 samples, 0.01%)</title><rect x="135.4" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="138.38" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (5 samples, 0.01%)</title><rect x="92.6" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="95.59" y="639.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (118 samples, 0.22%)</title><rect x="1172.9" y="645" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1175.94" y="655.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;true, true, std::random_access_iterator_tag&gt;::__copy_m&lt;NodeData&gt; (87 samples, 0.16%)</title><rect x="1146.9" y="405" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.86" y="415.5" ></text>
</g>
<g >
<title>std::tuple&lt;hashed_edge const&amp;&gt;::tuple&lt;void, true&gt; (9 samples, 0.02%)</title><rect x="495.5" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.50" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::push_back (172 samples, 0.32%)</title><rect x="500.6" y="533" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="503.57" y="543.5" ></text>
</g>
<g >
<title>__schedule (31 samples, 0.06%)</title><rect x="12.9" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.93" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_Tuple_impl (11 samples, 0.02%)</title><rect x="1136.3" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1139.31" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::init_balance_management (4,108 samples, 7.67%)</title><rect x="533.6" y="565" width="90.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="536.59" y="575.5" >parallel_g..</text>
</g>
<g >
<title>__alloc_pages_nodemask (6 samples, 0.01%)</title><rect x="1115.7" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.70" y="335.5" ></text>
</g>
<g >
<title>[unknown] (807 samples, 1.51%)</title><rect x="85.2" y="645" width="17.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="88.23" y="655.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (719 samples, 1.34%)</title><rect x="355.7" y="421" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (999 samples, 1.87%)</title><rect x="598.8" y="485" width="22.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="601.83" y="495.5" >s..</text>
</g>
<g >
<title>maxNodeHeap::changeKey (14 samples, 0.03%)</title><rect x="220.0" y="165" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="223.04" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, long&gt;&amp;&gt; (22 samples, 0.04%)</title><rect x="776.1" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="779.07" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;, true&gt;::_S_get (11 samples, 0.02%)</title><rect x="603.8" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="606.79" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long long&gt;, true&gt;::_S_cget (11 samples, 0.02%)</title><rect x="597.4" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="600.44" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (7 samples, 0.01%)</title><rect x="337.4" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="340.41" y="463.5" ></text>
</g>
<g >
<title>hmap_wrapper&lt;linear_probing_hashmap&gt;::operator[] (13 samples, 0.02%)</title><rect x="94.0" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="96.98" y="639.5" ></text>
</g>
<g >
<title>PMPI_Barrier (719 samples, 1.34%)</title><rect x="355.7" y="549" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long long*, unsigned long&gt; (15 samples, 0.03%)</title><rect x="992.9" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.94" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_M_head (16 samples, 0.03%)</title><rect x="619.4" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="622.40" y="399.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple&lt;void, true&gt; (8 samples, 0.01%)</title><rect x="623.2" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="626.19" y="511.5" ></text>
</g>
<g >
<title>handle_mm_fault (12 samples, 0.02%)</title><rect x="1115.7" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.67" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::find (22 samples, 0.04%)</title><rect x="208.7" y="213" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.71" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="219.4" y="101" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.44" y="111.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (117 samples, 0.22%)</title><rect x="122.3" y="373" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::_M_range_check (8 samples, 0.01%)</title><rect x="338.9" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="341.87" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (12 samples, 0.02%)</title><rect x="327.9" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="330.89" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (32 samples, 0.06%)</title><rect x="285.2" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="288.20" y="463.5" ></text>
</g>
<g >
<title>complete_boundary::insert (11 samples, 0.02%)</title><rect x="200.2" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.20" y="255.5" ></text>
</g>
<g >
<title>std::_Bit_reference::operator= (11 samples, 0.02%)</title><rect x="1052.1" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1055.13" y="543.5" ></text>
</g>
<g >
<title>__x64_sys_poll (35 samples, 0.07%)</title><rect x="12.9" y="533" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.89" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long long&gt;, true&gt;::_S_cget (12 samples, 0.02%)</title><rect x="587.0" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="589.95" y="415.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (7 samples, 0.01%)</title><rect x="108.3" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.29" y="223.5" ></text>
</g>
<g >
<title>std::_Bit_reference::_Bit_reference (10 samples, 0.02%)</title><rect x="1053.6" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1056.65" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (37 samples, 0.07%)</title><rect x="259.5" y="453" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="262.47" y="463.5" ></text>
</g>
<g >
<title>initial_partitioning::perform_initial_partitioning (379 samples, 0.71%)</title><rect x="216.9" y="277" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.86" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (11 samples, 0.02%)</title><rect x="1115.7" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.70" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (398 samples, 0.74%)</title><rect x="960.1" y="485" width="8.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="963.10" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (149 samples, 0.28%)</title><rect x="464.2" y="501" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="467.20" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_node_allocator (24 samples, 0.04%)</title><rect x="603.5" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="606.50" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (157 samples, 0.29%)</title><rect x="688.6" y="373" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="691.61" y="383.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::top (9 samples, 0.02%)</title><rect x="654.4" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="657.44" y="543.5" ></text>
</g>
<g >
<title>parallel_graph_io::readGraphWeighted (7,573 samples, 14.15%)</title><rect x="1003.1" y="597" width="166.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1006.11" y="607.5" >parallel_graph_io::re..</text>
</g>
<g >
<title>two_way_fm::move_node (145 samples, 0.27%)</title><rect x="219.8" y="181" width="3.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.84" y="191.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (1,523 samples, 2.84%)</title><rect x="1008.3" y="437" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.29" y="447.5" >[l..</text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::pop (6 samples, 0.01%)</title><rect x="100.8" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="103.79" y="639.5" ></text>
</g>
<g >
<title>new_do_write (8 samples, 0.01%)</title><rect x="1170.1" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (26 samples, 0.05%)</title><rect x="1115.5" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.54" y="479.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (227 samples, 0.42%)</title><rect x="114.0" y="533" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="543.5" ></text>
</g>
<g >
<title>__GI___poll (37 samples, 0.07%)</title><rect x="419.2" y="469" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="422.21" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (5 samples, 0.01%)</title><rect x="1076.8" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1079.84" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (7 samples, 0.01%)</title><rect x="1076.8" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1079.79" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (5 samples, 0.01%)</title><rect x="230.5" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="233.46" y="175.5" ></text>
</g>
<g >
<title>complete_boundary::assert_boundaries_are_bnodes (25 samples, 0.05%)</title><rect x="225.7" y="245" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.68" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (502 samples, 0.94%)</title><rect x="154.1" y="341" width="11.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (121 samples, 0.23%)</title><rect x="464.6" y="469" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="467.62" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;coarseningEdge, std::allocator&lt;coarseningEdge&gt; &gt;::at (9 samples, 0.02%)</title><rect x="167.7" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="170.71" y="367.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (10 samples, 0.02%)</title><rect x="1008.0" y="549" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.04" y="559.5" ></text>
</g>
<g >
<title>mmput (20 samples, 0.04%)</title><rect x="1189.0" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (7 samples, 0.01%)</title><rect x="1001.9" y="565" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1004.89" y="575.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (57 samples, 0.11%)</title><rect x="423.2" y="485" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="426.16" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (29 samples, 0.05%)</title><rect x="119.0" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::new_edge (11 samples, 0.02%)</title><rect x="242.0" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="244.99" y="511.5" ></text>
</g>
<g >
<title>alloc_pages_vma (12 samples, 0.02%)</title><rect x="512.6" y="277" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.63" y="287.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 0.01%)</title><rect x="1138.8" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.77" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (210 samples, 0.39%)</title><rect x="127.6" y="293" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="130.62" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (6 samples, 0.01%)</title><rect x="397.7" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.74" y="495.5" ></text>
</g>
<g >
<title>graph_access::setEdgeWeight (18 samples, 0.03%)</title><rect x="121.9" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="124.86" y="495.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (46 samples, 0.09%)</title><rect x="583.6" y="405" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.62" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (8 samples, 0.01%)</title><rect x="402.3" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.33" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (5 samples, 0.01%)</title><rect x="206.3" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.28" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_poll (11 samples, 0.02%)</title><rect x="419.7" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="422.72" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::deallocate (23 samples, 0.04%)</title><rect x="933.8" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="936.81" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long long&gt;, true&gt;::_S_cget (12 samples, 0.02%)</title><rect x="1124.3" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1127.31" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (237 samples, 0.44%)</title><rect x="546.3" y="469" width="5.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="549.31" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (13 samples, 0.02%)</title><rect x="224.2" y="133" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="227.20" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (8 samples, 0.01%)</title><rect x="246.6" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="249.62" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_Hash_node (9 samples, 0.02%)</title><rect x="491.8" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="494.80" y="495.5" ></text>
</g>
<g >
<title>do_page_fault (12 samples, 0.02%)</title><rect x="1142.8" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.81" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (13 samples, 0.02%)</title><rect x="702.9" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="705.87" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_clone (7 samples, 0.01%)</title><rect x="10.9" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.88" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (9 samples, 0.02%)</title><rect x="295.5" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="298.49" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (559 samples, 1.04%)</title><rect x="582.2" y="469" width="12.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="585.17" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (9 samples, 0.02%)</title><rect x="70.9" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="73.92" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::__detail::_Select1st, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (7 samples, 0.01%)</title><rect x="147.3" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="150.26" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (51 samples, 0.10%)</title><rect x="1056.8" y="533" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1059.82" y="543.5" ></text>
</g>
<g >
<title>_int_free (6 samples, 0.01%)</title><rect x="292.6" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.65" y="399.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;true, AdditionalNonLocalNodeData*, AdditionalNonLocalNodeData*&gt; (25 samples, 0.05%)</title><rect x="1138.6" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.64" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (43 samples, 0.08%)</title><rect x="993.3" y="485" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="996.32" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt;, true&gt;::_S_get (7 samples, 0.01%)</title><rect x="1127.9" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1130.91" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (171 samples, 0.32%)</title><rect x="107.2" y="533" width="3.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.16" y="543.5" ></text>
</g>
<g >
<title>do_dlopen (5 samples, 0.01%)</title><rect x="109.8" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (24 samples, 0.04%)</title><rect x="408.7" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.70" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (20 samples, 0.04%)</title><rect x="621.4" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="624.42" y="479.5" ></text>
</g>
<g >
<title>ghost_node_communication::receive_messages_of_neighbors (431 samples, 0.81%)</title><rect x="340.6" y="501" width="9.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="343.61" y="511.5" ></text>
</g>
<g >
<title>quotient_graph_refinement::perform_a_two_way_refinement (197 samples, 0.37%)</title><rect x="226.2" y="245" width="4.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="229.23" y="255.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (81 samples, 0.15%)</title><rect x="1039.3" y="373" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1042.30" y="383.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (20 samples, 0.04%)</title><rect x="394.7" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="397.72" y="447.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (31 samples, 0.06%)</title><rect x="711.8" y="405" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="714.82" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (18 samples, 0.03%)</title><rect x="1169.4" y="565" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1172.43" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::_M_range_check (21 samples, 0.04%)</title><rect x="139.0" y="309" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="141.97" y="319.5" ></text>
</g>
<g >
<title>get_signal (20 samples, 0.04%)</title><rect x="1189.0" y="581" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="591.5" ></text>
</g>
<g >
<title>page_fault (35 samples, 0.07%)</title><rect x="1147.7" y="373" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.68" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (30 samples, 0.06%)</title><rect x="928.8" y="421" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="931.85" y="431.5" ></text>
</g>
<g >
<title>poll_schedule_timeout.constprop.11 (32 samples, 0.06%)</title><rect x="12.9" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.91" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_realloc_insert&lt;unsigned long long&gt; (8 samples, 0.01%)</title><rect x="242.4" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.39" y="479.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (80 samples, 0.15%)</title><rect x="117.2" y="405" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="120.21" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (70 samples, 0.13%)</title><rect x="681.8" y="405" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="684.82" y="415.5" ></text>
</g>
<g >
<title>maxNodeHeap::changeKey (11 samples, 0.02%)</title><rect x="227.6" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.56" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (19 samples, 0.04%)</title><rect x="282.2" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="285.24" y="479.5" ></text>
</g>
<g >
<title>page_fault (485 samples, 0.91%)</title><rect x="1177.5" y="645" width="10.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1180.46" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (28 samples, 0.05%)</title><rect x="234.4" y="373" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="237.39" y="383.5" ></text>
</g>
<g >
<title>operator new (284 samples, 0.53%)</title><rect x="605.2" y="437" width="6.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="608.22" y="447.5" ></text>
</g>
<g >
<title>schedule_tail (57 samples, 0.11%)</title><rect x="11.2" y="517" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="14.21" y="527.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (101 samples, 0.19%)</title><rect x="719.6" y="421" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="722.56" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (227 samples, 0.42%)</title><rect x="114.0" y="485" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="495.5" ></text>
</g>
<g >
<title>ret_from_fork (16 samples, 0.03%)</title><rect x="14.5" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.52" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (43 samples, 0.08%)</title><rect x="242.7" y="485" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.70" y="495.5" ></text>
</g>
<g >
<title>lru_cache_add (5 samples, 0.01%)</title><rect x="1168.7" y="245" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1171.73" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::at (7 samples, 0.01%)</title><rect x="194.2" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="197.21" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::operator[] (10 samples, 0.02%)</title><rect x="373.0" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="375.97" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (32 samples, 0.06%)</title><rect x="1092.3" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1095.27" y="495.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (7 samples, 0.01%)</title><rect x="1161.1" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.06" y="335.5" ></text>
</g>
<g >
<title>alloc_pages_vma (11 samples, 0.02%)</title><rect x="1145.9" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.94" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long long&gt;, true&gt;::_S_cget (7 samples, 0.01%)</title><rect x="1085.9" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1088.92" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (12 samples, 0.02%)</title><rect x="206.2" y="261" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.17" y="271.5" ></text>
</g>
<g >
<title>__gethostbyname_r (8 samples, 0.01%)</title><rect x="109.8" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (175 samples, 0.33%)</title><rect x="1130.8" y="485" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1133.84" y="495.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (7 samples, 0.01%)</title><rect x="112.3" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.30" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (5 samples, 0.01%)</title><rect x="523.4" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="526.45" y="527.5" ></text>
</g>
<g >
<title>parallel_graph_access::is_interface_node (55 samples, 0.10%)</title><rect x="1154.5" y="549" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1157.53" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (11 samples, 0.02%)</title><rect x="205.6" y="85" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="95.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;unsigned long long const&amp;&gt; &gt; (5 samples, 0.01%)</title><rect x="1134.9" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1137.89" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (80 samples, 0.15%)</title><rect x="296.5" y="501" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::getCNode (24 samples, 0.04%)</title><rect x="255.5" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="258.48" y="527.5" ></text>
</g>
<g >
<title>_int_free (11 samples, 0.02%)</title><rect x="835.2" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="838.23" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (5 samples, 0.01%)</title><rect x="933.3" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="936.28" y="383.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::operator (50 samples, 0.09%)</title><rect x="354.2" y="501" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="357.23" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (379 samples, 0.71%)</title><rect x="281.8" y="501" width="8.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="284.82" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::at (10 samples, 0.02%)</title><rect x="338.8" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="341.85" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (131 samples, 0.24%)</title><rect x="239.0" y="485" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="495.5" ></text>
</g>
<g >
<title>__libc_read (27 samples, 0.05%)</title><rect x="107.6" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.58" y="463.5" ></text>
</g>
<g >
<title>__vfs_read (26 samples, 0.05%)</title><rect x="107.6" y="357" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="367.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::_Bit_iterator (16 samples, 0.03%)</title><rect x="430.7" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="433.65" y="527.5" ></text>
</g>
<g >
<title>__handle_mm_fault (19 samples, 0.04%)</title><rect x="510.8" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="513.82" y="431.5" ></text>
</g>
<g >
<title>size_constraint_label_propagation::label_propagation (81 samples, 0.15%)</title><rect x="200.9" y="261" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.93" y="271.5" ></text>
</g>
<g >
<title>parallel_graph_access::getGlobalID (5 samples, 0.01%)</title><rect x="849.2" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="852.21" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;hashed_edge const, data_hashed_edge&gt;::pair&lt;hashed_edge const&amp;&gt; (30 samples, 0.06%)</title><rect x="493.9" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="496.89" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (11 samples, 0.02%)</title><rect x="47.6" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="50.58" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="468.3" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="471.25" y="463.5" ></text>
</g>
<g >
<title>parallel_graph_access::getLocalID (47 samples, 0.09%)</title><rect x="522.4" y="533" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="525.39" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (18 samples, 0.03%)</title><rect x="221.2" y="117" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="224.19" y="127.5" ></text>
</g>
<g >
<title>alloc_pages_vma (6 samples, 0.01%)</title><rect x="471.2" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.19" y="335.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (80 samples, 0.15%)</title><rect x="966.5" y="405" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="969.54" y="415.5" ></text>
</g>
<g >
<title>_dl_start_final (71 samples, 0.13%)</title><rect x="1170.6" y="613" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.58" y="623.5" ></text>
</g>
<g >
<title>__handle_mm_fault (22 samples, 0.04%)</title><rect x="1145.8" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.83" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_ptr (5 samples, 0.01%)</title><rect x="153.8" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="156.85" y="303.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;Edge*, unsigned long, Edge&gt; (19 samples, 0.04%)</title><rect x="471.1" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.08" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (8 samples, 0.01%)</title><rect x="146.9" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="149.88" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (7 samples, 0.01%)</title><rect x="712.0" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="714.97" y="399.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (11 samples, 0.02%)</title><rect x="462.1" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.15" y="447.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="470.0" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.97" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_v (9 samples, 0.02%)</title><rect x="153.8" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="156.76" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (67 samples, 0.13%)</title><rect x="130.8" y="261" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="133.77" y="271.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (29 samples, 0.05%)</title><rect x="403.2" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.21" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (10 samples, 0.02%)</title><rect x="1158.0" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1160.99" y="543.5" ></text>
</g>
<g >
<title>do_group_exit (20 samples, 0.04%)</title><rect x="1189.0" y="565" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (5 samples, 0.01%)</title><rect x="263.0" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="265.95" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (243 samples, 0.45%)</title><rect x="1078.6" y="469" width="5.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1081.56" y="479.5" ></text>
</g>
<g >
<title>handle_mm_fault (12 samples, 0.02%)</title><rect x="1142.8" y="325" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.81" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (11 samples, 0.02%)</title><rect x="992.6" y="549" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.61" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::at (6 samples, 0.01%)</title><rect x="295.8" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="298.80" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_free (18 samples, 0.03%)</title><rect x="933.9" y="357" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="936.87" y="367.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (117 samples, 0.22%)</title><rect x="220.5" y="165" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="223.46" y="175.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (5 samples, 0.01%)</title><rect x="300.8" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.76" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (55 samples, 0.10%)</title><rect x="348.9" y="485" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="351.85" y="495.5" ></text>
</g>
<g >
<title>handle_mm_fault (13 samples, 0.02%)</title><rect x="113.5" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.47" y="543.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (20 samples, 0.04%)</title><rect x="1189.0" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (23 samples, 0.04%)</title><rect x="345.7" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.70" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (124 samples, 0.23%)</title><rect x="528.5" y="517" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="531.52" y="527.5" ></text>
</g>
<g >
<title>search_binary_handler (5 samples, 0.01%)</title><rect x="14.1" y="581" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.14" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (20 samples, 0.04%)</title><rect x="337.2" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="340.19" y="495.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (131 samples, 0.24%)</title><rect x="239.0" y="405" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (7 samples, 0.01%)</title><rect x="166.5" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="169.45" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (20 samples, 0.04%)</title><rect x="956.7" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="959.66" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::pair&lt;unsigned long long, unsigned long long&gt; const&amp;&gt; (5 samples, 0.01%)</title><rect x="292.9" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.93" y="511.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (17 samples, 0.03%)</title><rect x="1147.8" y="277" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.77" y="287.5" ></text>
</g>
<g >
<title>parallel_graph_access::getBlockSize (686 samples, 1.28%)</title><rect x="313.3" y="533" width="15.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="316.34" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::find (32 samples, 0.06%)</title><rect x="206.9" y="213" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.86" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (6 samples, 0.01%)</title><rect x="133.9" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="136.92" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::operator[] (31 samples, 0.06%)</title><rect x="237.8" y="389" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="240.78" y="399.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (10 samples, 0.02%)</title><rect x="1146.6" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="399.5" ></text>
</g>
<g >
<title>parallel_graph_access::setNodeLabel (103 samples, 0.19%)</title><rect x="1154.2" y="565" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1157.20" y="575.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (6 samples, 0.01%)</title><rect x="1041.4" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.44" y="319.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::_Deque_iterator (133 samples, 0.25%)</title><rect x="649.5" y="469" width="2.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="652.51" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (54 samples, 0.10%)</title><rect x="426.4" y="501" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="429.42" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::setEdgeWeight (15 samples, 0.03%)</title><rect x="470.7" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="473.75" y="543.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long long*, unsigned long, unsigned long long&gt; (11 samples, 0.02%)</title><rect x="513.2" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.22" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.01%)</title><rect x="203.0" y="133" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.00" y="143.5" ></text>
</g>
<g >
<title>__handle_mm_fault (30 samples, 0.06%)</title><rect x="112.7" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.74" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::setEdgeWeight (231 samples, 0.43%)</title><rect x="1149.1" y="565" width="5.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1152.11" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (28 samples, 0.05%)</title><rect x="406.1" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.05" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (92 samples, 0.17%)</title><rect x="846.6" y="485" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="849.56" y="495.5" ></text>
</g>
<g >
<title>label_propagation_refinement::perform_refinement (352 samples, 0.66%)</title><rect x="230.7" y="405" width="7.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="233.71" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::find (1,309 samples, 2.45%)</title><rect x="1058.1" y="549" width="28.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1061.10" y="559.5" >st..</text>
</g>
<g >
<title>_dl_map_object_deps (6 samples, 0.01%)</title><rect x="13.9" y="565" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.92" y="575.5" ></text>
</g>
<g >
<title>do_sys_poll (6 samples, 0.01%)</title><rect x="981.2" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="984.20" y="383.5" ></text>
</g>
<g >
<title>__do_execve_file.isra.39 (5 samples, 0.01%)</title><rect x="14.1" y="597" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.14" y="607.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (10 samples, 0.02%)</title><rect x="1008.0" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.04" y="527.5" ></text>
</g>
<g >
<title>uncoarsening::perform_uncoarsening (355 samples, 0.66%)</title><rect x="230.7" y="421" width="7.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="233.66" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (13 samples, 0.02%)</title><rect x="469.2" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.25" y="463.5" ></text>
</g>
<g >
<title>hydra_pmi_proxy (196 samples, 0.37%)</title><rect x="10.0" y="661" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>finish_task_switch (56 samples, 0.10%)</title><rect x="1166.6" y="309" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1169.57" y="319.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (227 samples, 0.42%)</title><rect x="114.0" y="421" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="431.5" ></text>
</g>
<g >
<title>ksys_mmap_pgoff (5 samples, 0.01%)</title><rect x="1170.6" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="415.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (69 samples, 0.13%)</title><rect x="442.6" y="517" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="445.55" y="527.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::uniform_int_distribution (38 samples, 0.07%)</title><rect x="991.3" y="533" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="994.33" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (330 samples, 0.62%)</title><rect x="937.8" y="437" width="7.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="940.75" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;QElement&lt;maxNodeHeap::Data&gt;, std::allocator&lt;QElement&lt;maxNodeHeap::Data&gt; &gt; &gt;::_M_realloc_insert&lt;QElement&lt;maxNodeHeap::Data&gt; &gt; (8 samples, 0.01%)</title><rect x="227.0" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.03" y="159.5" ></text>
</g>
<g >
<title>ghost_node_communication::receive_messages_of_neighbors (4,617 samples, 8.62%)</title><rect x="868.1" y="517" width="101.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="871.08" y="527.5" >ghost_node_c..</text>
</g>
<g >
<title>std::operator==&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt; (9 samples, 0.02%)</title><rect x="293.5" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.48" y="415.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;&amp;&gt; (19 samples, 0.04%)</title><rect x="1106.4" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1109.37" y="447.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::pop (5 samples, 0.01%)</title><rect x="654.0" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="656.98" y="543.5" ></text>
</g>
<g >
<title>page_fault (32 samples, 0.06%)</title><rect x="112.7" y="549" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.72" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::_M_default_append (25 samples, 0.05%)</title><rect x="1162.0" y="533" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.96" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (14 samples, 0.03%)</title><rect x="969.0" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.01" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (43 samples, 0.08%)</title><rect x="774.3" y="389" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="777.26" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (322 samples, 0.60%)</title><rect x="506.1" y="533" width="7.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="509.12" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="330.0" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="332.98" y="511.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (12 samples, 0.02%)</title><rect x="14.6" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.56" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (9 samples, 0.02%)</title><rect x="18.7" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="21.73" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (19 samples, 0.04%)</title><rect x="929.1" y="389" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="932.09" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (11 samples, 0.02%)</title><rect x="1001.0" y="549" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1004.01" y="559.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple (82 samples, 0.15%)</title><rect x="618.0" y="437" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="621.03" y="447.5" ></text>
</g>
<g >
<title>std::__detail::operator==&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; (20 samples, 0.04%)</title><rect x="540.1" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="543.07" y="527.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::find (178 samples, 0.33%)</title><rect x="308.7" y="501" width="4.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="311.74" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, compare_hashed_edge, unsigned long, true&gt;::_S_equals (36 samples, 0.07%)</title><rect x="259.5" y="437" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="262.49" y="447.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (10 samples, 0.02%)</title><rect x="551.2" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="554.18" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (11 samples, 0.02%)</title><rect x="205.6" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (5 samples, 0.01%)</title><rect x="551.0" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="554.02" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (18 samples, 0.03%)</title><rect x="208.8" y="197" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.78" y="207.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (14 samples, 0.03%)</title><rect x="226.7" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="229.70" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (12 samples, 0.02%)</title><rect x="577.7" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="580.72" y="431.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (6 samples, 0.01%)</title><rect x="112.3" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.32" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::resize (25 samples, 0.05%)</title><rect x="969.0" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="971.98" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator++ (8 samples, 0.01%)</title><rect x="697.2" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="700.21" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::find (5 samples, 0.01%)</title><rect x="70.3" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="73.26" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false, false&gt;::_Node_iterator (7 samples, 0.01%)</title><rect x="1057.9" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1060.95" y="543.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (48 samples, 0.09%)</title><rect x="233.9" y="389" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="236.95" y="399.5" ></text>
</g>
<g >
<title>_dl_start (10 samples, 0.02%)</title><rect x="15.4" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.42" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_addr (10 samples, 0.02%)</title><rect x="588.4" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="591.36" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (985 samples, 1.84%)</title><rect x="474.0" y="517" width="21.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="476.99" y="527.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="300.6" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.58" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10 samples, 0.02%)</title><rect x="790.1" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="793.07" y="447.5" ></text>
</g>
<g >
<title>dw_readl (6 samples, 0.01%)</title><rect x="1041.4" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.44" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2,355 samples, 4.40%)</title><rect x="738.4" y="485" width="51.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="741.38" y="495.5" >std::..</text>
</g>
<g >
<title>__GI___libc_free (10 samples, 0.02%)</title><rect x="532.6" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.60" y="447.5" ></text>
</g>
<g >
<title>handle_mm_fault (23 samples, 0.04%)</title><rect x="583.9" y="341" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.89" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::construct&lt;AdditionalNonLocalNodeData, AdditionalNonLocalNodeData const&amp;&gt; (64 samples, 0.12%)</title><rect x="1137.2" y="533" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1140.19" y="543.5" ></text>
</g>
<g >
<title>two_way_fm::move_node_back (35 samples, 0.07%)</title><rect x="204.3" y="197" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.30" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (77 samples, 0.14%)</title><rect x="799.7" y="517" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="802.66" y="527.5" ></text>
</g>
<g >
<title>complete_boundary::build (1,311 samples, 2.45%)</title><rect x="125.1" y="373" width="28.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="128.08" y="383.5" >co..</text>
</g>
<g >
<title>complete_boundary::assert_boundaries_are_bnodes (44 samples, 0.08%)</title><rect x="217.7" y="213" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.70" y="223.5" ></text>
</g>
<g >
<title>native_write_msr (22 samples, 0.04%)</title><rect x="110.1" y="181" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.07" y="191.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (227 samples, 0.42%)</title><rect x="114.0" y="517" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="527.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (5 samples, 0.01%)</title><rect x="610.8" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.78" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.02%)</title><rect x="288.1" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="291.08" y="431.5" ></text>
</g>
<g >
<title>__GI___poll (112 samples, 0.21%)</title><rect x="1038.9" y="389" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1041.92" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (12 samples, 0.02%)</title><rect x="586.3" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="589.33" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets (80 samples, 0.15%)</title><rect x="296.5" y="469" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="479.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (87 samples, 0.16%)</title><rect x="1146.9" y="389" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.86" y="399.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (36 samples, 0.07%)</title><rect x="108.9" y="181" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.90" y="191.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned long long&gt; (7 samples, 0.01%)</title><rect x="686.3" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="689.27" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (5 samples, 0.01%)</title><rect x="204.9" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.90" y="159.5" ></text>
</g>
<g >
<title>__GI___poll (37 samples, 0.07%)</title><rect x="370.7" y="373" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="373.70" y="383.5" ></text>
</g>
<g >
<title>parallel_graph_access::setCNode (7 samples, 0.01%)</title><rect x="429.7" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="432.70" y="543.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, boundary_pair const, data_boundary_pair&gt; (8 samples, 0.01%)</title><rect x="146.4" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="149.44" y="239.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (10 samples, 0.02%)</title><rect x="1008.0" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.04" y="543.5" ></text>
</g>
<g >
<title>finish_task_switch (21 samples, 0.04%)</title><rect x="112.8" y="357" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;QElement&lt;maxNodeHeap::Data&gt;, std::allocator&lt;QElement&lt;maxNodeHeap::Data&gt; &gt; &gt;::push_back (8 samples, 0.01%)</title><rect x="227.0" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.03" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (11 samples, 0.02%)</title><rect x="337.3" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="340.32" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (11 samples, 0.02%)</title><rect x="221.9" y="101" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="224.91" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (15 samples, 0.03%)</title><rect x="486.0" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="489.00" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (30 samples, 0.06%)</title><rect x="536.2" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="539.19" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (11 samples, 0.02%)</title><rect x="768.5" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="771.51" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (287 samples, 0.54%)</title><rect x="446.0" y="405" width="6.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="449.04" y="415.5" ></text>
</g>
<g >
<title>__GI___libc_free (10 samples, 0.02%)</title><rect x="292.6" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.56" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::_M_range_check (14 samples, 0.03%)</title><rect x="224.8" y="117" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="227.76" y="127.5" ></text>
</g>
<g >
<title>handle_mm_fault (8 samples, 0.01%)</title><rect x="1171.9" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt; &gt;::deallocate (46 samples, 0.09%)</title><rect x="163.7" y="117" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="166.68" y="127.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (6 samples, 0.01%)</title><rect x="981.3" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="984.35" y="431.5" ></text>
</g>
<g >
<title>__handle_mm_fault (50 samples, 0.09%)</title><rect x="111.4" y="469" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.37" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;unsigned long long*, unsigned long&gt; (6 samples, 0.01%)</title><rect x="242.6" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.57" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (326 samples, 0.61%)</title><rect x="612.7" y="453" width="7.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="615.65" y="463.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10 samples, 0.02%)</title><rect x="610.3" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.27" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::push_back (83 samples, 0.16%)</title><rect x="1141.4" y="549" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1144.35" y="559.5" ></text>
</g>
<g >
<title>do_syscall_64 (12 samples, 0.02%)</title><rect x="15.0" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.03" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (137 samples, 0.26%)</title><rect x="183.6" y="325" width="3.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="186.63" y="335.5" ></text>
</g>
<g >
<title>x86_pmu_enable (15 samples, 0.03%)</title><rect x="108.5" y="197" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.51" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_execve (5 samples, 0.01%)</title><rect x="14.1" y="613" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.14" y="623.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::operator (403 samples, 0.75%)</title><rect x="982.3" y="533" width="8.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="985.32" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (2,442 samples, 4.56%)</title><rect x="868.9" y="485" width="53.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="871.89" y="495.5" >[libm..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;::deallocate (40 samples, 0.07%)</title><rect x="530.1" y="453" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="533.15" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (12 samples, 0.02%)</title><rect x="994.6" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.62" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (49 samples, 0.09%)</title><rect x="348.9" y="437" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="351.92" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_first_edge (44 samples, 0.08%)</title><rect x="855.7" y="517" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="858.73" y="527.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, hashed_edge const&amp;&gt;::_Tuple_impl (9 samples, 0.02%)</title><rect x="392.6" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="395.58" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_node (54 samples, 0.10%)</title><rect x="499.0" y="469" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="502.03" y="479.5" ></text>
</g>
<g >
<title>graph_access::new_edge (49 samples, 0.09%)</title><rect x="120.1" y="469" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="123.14" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (13 samples, 0.02%)</title><rect x="464.2" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="467.24" y="495.5" ></text>
</g>
<g >
<title>finish_task_switch (22 samples, 0.04%)</title><rect x="107.7" y="213" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.69" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::_M_range_check (25 samples, 0.05%)</title><rect x="428.3" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="431.34" y="511.5" ></text>
</g>
<g >
<title>_int_malloc (7 samples, 0.01%)</title><rect x="409.5" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.49" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (20 samples, 0.04%)</title><rect x="302.7" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="305.72" y="479.5" ></text>
</g>
<g >
<title>do_page_fault (8 samples, 0.01%)</title><rect x="1171.9" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="527.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::operator (54 samples, 0.10%)</title><rect x="354.2" y="517" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="357.16" y="527.5" ></text>
</g>
<g >
<title>std::move&lt;unsigned long long&amp;&gt; (5 samples, 0.01%)</title><rect x="68.8" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="71.76" y="639.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes (1,995 samples, 3.73%)</title><rect x="678.7" y="549" width="44.0" height="15.0" fill="rgb(230,0,255)" rx="2" ry="2" />
<text  x="681.71" y="559.5" >node..</text>
</g>
<g >
<title>io_schedule (9 samples, 0.02%)</title><rect x="108.2" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.24" y="319.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (10 samples, 0.02%)</title><rect x="15.4" y="597" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.42" y="607.5" ></text>
</g>
<g >
<title>generic_file_read_iter (258 samples, 0.48%)</title><rect x="1163.5" y="373" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="383.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (21 samples, 0.04%)</title><rect x="684.6" y="309" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.58" y="319.5" ></text>
</g>
<g >
<title>page_fault (8 samples, 0.01%)</title><rect x="110.7" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.73" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (13 samples, 0.02%)</title><rect x="467.8" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="470.77" y="495.5" ></text>
</g>
<g >
<title>parallel_contraction::build_quotient_graph_locally (456 samples, 0.85%)</title><rect x="255.3" y="533" width="10.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="258.33" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (6 samples, 0.01%)</title><rect x="836.6" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="839.60" y="463.5" ></text>
</g>
<g >
<title>__handle_mm_fault (14 samples, 0.03%)</title><rect x="471.2" y="341" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.16" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (57 samples, 0.11%)</title><rect x="1129.1" y="437" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1132.12" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (32 samples, 0.06%)</title><rect x="285.2" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="288.20" y="447.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (116 samples, 0.22%)</title><rect x="987.9" y="501" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="990.94" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::start_construction (19 samples, 0.04%)</title><rect x="471.1" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.08" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_Hash_node (7 samples, 0.01%)</title><rect x="53.8" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="56.84" y="639.5" ></text>
</g>
<g >
<title>operator new (69 samples, 0.13%)</title><rect x="390.0" y="453" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="393.03" y="463.5" ></text>
</g>
<g >
<title>size_constraint_label_propagation::match_internal (81 samples, 0.15%)</title><rect x="200.9" y="277" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.93" y="287.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (12 samples, 0.02%)</title><rect x="684.2" y="261" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.20" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (50 samples, 0.09%)</title><rect x="74.9" y="629" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="77.94" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (19 samples, 0.04%)</title><rect x="323.5" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="326.55" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (5 samples, 0.01%)</title><rect x="211.3" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="214.29" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (70 samples, 0.13%)</title><rect x="943.3" y="389" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="946.35" y="399.5" ></text>
</g>
<g >
<title>complete_boundary::insert (617 samples, 1.15%)</title><rect x="125.9" y="357" width="13.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="128.90" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (27 samples, 0.05%)</title><rect x="132.8" y="245" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="135.75" y="255.5" ></text>
</g>
<g >
<title>quotient_graph_refinement::perform_refinement (237 samples, 0.44%)</title><rect x="225.4" y="261" width="5.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.35" y="271.5" ></text>
</g>
<g >
<title>do_sys_poll (6 samples, 0.01%)</title><rect x="241.7" y="261" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="244.68" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::_Node_iterator (22 samples, 0.04%)</title><rect x="473.4" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="476.41" y="511.5" ></text>
</g>
<g >
<title>complete_boundary::getUnderlyingQuotientGraph (5 samples, 0.01%)</title><rect x="154.0" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="156.98" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;::deallocate (10 samples, 0.02%)</title><rect x="292.6" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.56" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::at (26 samples, 0.05%)</title><rect x="1001.5" y="581" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1004.47" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (49 samples, 0.09%)</title><rect x="551.5" y="485" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="554.53" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (45 samples, 0.08%)</title><rect x="279.6" y="501" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="282.57" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (20 samples, 0.04%)</title><rect x="410.5" y="533" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="413.53" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (370 samples, 0.69%)</title><rect x="247.2" y="389" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_node_allocator (7 samples, 0.01%)</title><rect x="58.1" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="61.05" y="639.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::param_type::param_type (6 samples, 0.01%)</title><rect x="991.2" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="994.20" y="543.5" ></text>
</g>
<g >
<title>__handle_mm_fault (22 samples, 0.04%)</title><rect x="583.9" y="325" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.91" y="335.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;&amp;&gt; (6 samples, 0.01%)</title><rect x="966.2" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="969.21" y="399.5" ></text>
</g>
<g >
<title>x86_pmu_enable (8 samples, 0.01%)</title><rect x="113.5" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.53" y="367.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (15 samples, 0.03%)</title><rect x="214.2" y="197" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="217.18" y="207.5" ></text>
</g>
<g >
<title>parallel_graph_access::update_non_contained_block_balance (1,506 samples, 2.81%)</title><rect x="926.8" y="501" width="33.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="929.80" y="511.5" >pa..</text>
</g>
<g >
<title>__page_cache_alloc (24 samples, 0.04%)</title><rect x="1167.9" y="309" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1170.87" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (24 samples, 0.04%)</title><rect x="956.6" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="959.60" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (28 samples, 0.05%)</title><rect x="77.6" y="629" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="80.56" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (163 samples, 0.30%)</title><rect x="1061.1" y="501" width="3.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1064.08" y="511.5" ></text>
</g>
<g >
<title>hmap_wrapper&lt;linear_probing_hashmap&gt;::clear (162 samples, 0.30%)</title><rect x="304.7" y="533" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="307.66" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_v (5 samples, 0.01%)</title><rect x="491.2" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="494.20" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::end (37 samples, 0.07%)</title><rect x="473.1" y="533" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="476.13" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::find (18 samples, 0.03%)</title><rect x="300.5" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.51" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (28 samples, 0.05%)</title><rect x="489.2" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="492.24" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="384.1" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="387.08" y="463.5" ></text>
</g>
<g >
<title>balance_management_coarsening::init (133 samples, 0.25%)</title><rect x="300.2" y="517" width="3.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.23" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="968.9" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="971.87" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple (5 samples, 0.01%)</title><rect x="69.6" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="72.56" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="345.8" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.77" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_M_next (61 samples, 0.11%)</title><rect x="592.8" y="437" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="595.81" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (117 samples, 0.22%)</title><rect x="122.3" y="357" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="367.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::operator* (5 samples, 0.01%)</title><rect x="46.3" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="49.30" y="639.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (11 samples, 0.02%)</title><rect x="867.8" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="870.79" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (7 samples, 0.01%)</title><rect x="269.9" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="272.94" y="527.5" ></text>
</g>
<g >
<title>_int_free (30 samples, 0.06%)</title><rect x="530.3" y="421" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="533.35" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::_M_range_check (13 samples, 0.02%)</title><rect x="229.3" y="149" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="232.32" y="159.5" ></text>
</g>
<g >
<title>__lock_page_killable (9 samples, 0.02%)</title><rect x="113.5" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.51" y="463.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, long&gt;&amp;&gt; (11 samples, 0.02%)</title><rect x="66.0" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="69.01" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::allocate (10 samples, 0.02%)</title><rect x="289.2" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="292.21" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (194 samples, 0.36%)</title><rect x="282.7" y="485" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="285.73" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (6 samples, 0.01%)</title><rect x="121.6" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="124.60" y="431.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (9 samples, 0.02%)</title><rect x="1189.8" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.76" y="495.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (8 samples, 0.01%)</title><rect x="219.4" y="133" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.40" y="143.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, long&gt;&amp;&gt; (5 samples, 0.01%)</title><rect x="839.8" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="842.80" y="415.5" ></text>
</g>
<g >
<title>std::istream::read (259 samples, 0.48%)</title><rect x="1163.5" y="565" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (47 samples, 0.09%)</title><rect x="935.0" y="405" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="938.04" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (558 samples, 1.04%)</title><rect x="582.2" y="453" width="12.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="585.17" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::at (39 samples, 0.07%)</title><rect x="428.1" y="517" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="431.14" y="527.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="227.0" y="69" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.03" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (8 samples, 0.01%)</title><rect x="932.0" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="935.04" y="383.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (16 samples, 0.03%)</title><rect x="66.5" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="69.54" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;Edge*, unsigned long&gt; (19 samples, 0.04%)</title><rect x="471.1" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.08" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (261 samples, 0.49%)</title><rect x="732.3" y="453" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="735.27" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (8 samples, 0.01%)</title><rect x="1041.9" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="495.5" ></text>
</g>
<g >
<title>MPI_Probe (190 samples, 0.35%)</title><rect x="340.8" y="485" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="343.76" y="495.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_Tuple_impl (26 samples, 0.05%)</title><rect x="622.3" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="625.31" y="479.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (38 samples, 0.07%)</title><rect x="108.9" y="309" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="319.5" ></text>
</g>
<g >
<title>handle_mm_fault (48 samples, 0.09%)</title><rect x="1164.0" y="277" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.03" y="287.5" ></text>
</g>
<g >
<title>operator new (5 samples, 0.01%)</title><rect x="1177.3" y="645" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1180.35" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (125 samples, 0.23%)</title><rect x="719.0" y="437" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="722.03" y="447.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (6 samples, 0.01%)</title><rect x="922.6" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.56" y="399.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (8 samples, 0.01%)</title><rect x="1164.8" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.78" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (17 samples, 0.03%)</title><rect x="936.1" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="939.14" y="431.5" ></text>
</g>
<g >
<title>operator new (11 samples, 0.02%)</title><rect x="397.5" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.50" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (719 samples, 1.34%)</title><rect x="355.7" y="485" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="495.5" ></text>
</g>
<g >
<title>quality_metrics::edge_cut (6 samples, 0.01%)</title><rect x="218.8" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.76" y="191.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::operator[] (1,053 samples, 1.97%)</title><rect x="655.4" y="533" width="23.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="658.39" y="543.5" >l..</text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (27 samples, 0.05%)</title><rect x="76.9" y="629" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="79.94" y="639.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_Head_base (6 samples, 0.01%)</title><rect x="1136.4" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1139.42" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (114 samples, 0.21%)</title><rect x="714.9" y="389" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="717.93" y="399.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (29 samples, 0.05%)</title><rect x="119.0" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="479.5" ></text>
</g>
<g >
<title>page_fault (27 samples, 0.05%)</title><rect x="1145.7" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.72" y="511.5" ></text>
</g>
<g >
<title>__GI___poll (15 samples, 0.03%)</title><rect x="118.6" y="389" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.62" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (11 samples, 0.02%)</title><rect x="265.8" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.75" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (6 samples, 0.01%)</title><rect x="17.1" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="20.08" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (210 samples, 0.39%)</title><rect x="323.2" y="437" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="326.20" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, hashed_edge const&amp;&gt;::_M_head (11 samples, 0.02%)</title><rect x="494.7" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="497.71" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::deallocate (27 samples, 0.05%)</title><rect x="499.5" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="502.49" y="463.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (16 samples, 0.03%)</title><rect x="1171.5" y="309" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.46" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (103 samples, 0.19%)</title><rect x="790.6" y="485" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="793.55" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned long long*, unsigned long, unsigned long long&gt; (6 samples, 0.01%)</title><rect x="242.6" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.57" y="479.5" ></text>
</g>
<g >
<title>__GI___poll (15 samples, 0.03%)</title><rect x="241.5" y="325" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="244.49" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (144 samples, 0.27%)</title><rect x="404.3" y="517" width="3.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="407.33" y="527.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::find (5 samples, 0.01%)</title><rect x="43.8" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="46.79" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (5 samples, 0.01%)</title><rect x="1112.6" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1115.59" y="431.5" ></text>
</g>
<g >
<title>std::fill_n&lt;Edge*, unsigned long, Edge&gt; (170 samples, 0.32%)</title><rect x="1158.2" y="469" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1161.22" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (17 samples, 0.03%)</title><rect x="958.0" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="961.03" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;::allocate (75 samples, 0.14%)</title><rect x="389.9" y="469" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="392.92" y="479.5" ></text>
</g>
<g >
<title>do_page_fault (10 samples, 0.02%)</title><rect x="108.2" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.22" y="447.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (99 samples, 0.18%)</title><rect x="686.4" y="357" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="689.43" y="367.5" ></text>
</g>
<g >
<title>balance_management_coarsening::update_non_contained_block_balance (5 samples, 0.01%)</title><rect x="981.9" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="984.92" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (28 samples, 0.05%)</title><rect x="700.1" y="325" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="703.07" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (145 samples, 0.27%)</title><rect x="820.2" y="533" width="3.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="823.22" y="543.5" ></text>
</g>
<g >
<title>std::operator!=&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt; (9 samples, 0.02%)</title><rect x="293.5" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.48" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (9 samples, 0.02%)</title><rect x="344.3" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="347.33" y="431.5" ></text>
</g>
<g >
<title>PMPI_Scan (30 samples, 0.06%)</title><rect x="402.5" y="533" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.53" y="543.5" ></text>
</g>
<g >
<title>finish_task_switch (9 samples, 0.02%)</title><rect x="113.5" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.51" y="399.5" ></text>
</g>
<g >
<title>do_exit (48 samples, 0.09%)</title><rect x="1176.0" y="549" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="559.5" ></text>
</g>
<g >
<title>two_way_fm::assert_only_boundary_nodes (21 samples, 0.04%)</title><rect x="219.2" y="165" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.20" y="175.5" ></text>
</g>
<g >
<title>finish_task_switch (8 samples, 0.01%)</title><rect x="108.3" y="261" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.26" y="271.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (19 samples, 0.04%)</title><rect x="108.4" y="293" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (17 samples, 0.03%)</title><rect x="405.7" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="408.68" y="479.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (5 samples, 0.01%)</title><rect x="408.4" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.39" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (13 samples, 0.02%)</title><rect x="773.2" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="776.18" y="415.5" ></text>
</g>
<g >
<title>internal_build_graph (119 samples, 0.22%)</title><rect x="119.6" y="501" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="122.64" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (6 samples, 0.01%)</title><rect x="686.9" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="689.91" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::_M_range_check (48 samples, 0.09%)</title><rect x="236.3" y="357" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="239.31" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (6 samples, 0.01%)</title><rect x="681.5" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="684.47" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, long&gt; (18 samples, 0.03%)</title><rect x="954.4" y="357" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="957.41" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (27 samples, 0.05%)</title><rect x="980.8" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="983.75" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (6 samples, 0.01%)</title><rect x="336.1" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="339.09" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (99 samples, 0.18%)</title><rect x="498.2" y="501" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="501.19" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_dlopen_mode (5 samples, 0.01%)</title><rect x="109.8" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.81" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::deallocate (19 samples, 0.04%)</title><rect x="504.6" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.65" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (177 samples, 0.33%)</title><rect x="491.4" y="501" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="494.35" y="511.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (6 samples, 0.01%)</title><rect x="230.4" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="233.44" y="191.5" ></text>
</g>
<g >
<title>new_sync_read (26 samples, 0.05%)</title><rect x="107.6" y="341" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="351.5" ></text>
</g>
<g >
<title>parallel_contraction::contract_to_distributed_quotient (2,402 samples, 4.49%)</title><rect x="247.2" y="549" width="52.9" height="15.0" fill="rgb(0,26,255)" rx="2" ry="2" />
<text  x="250.17" y="559.5" >paral..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::allocate (48 samples, 0.09%)</title><rect x="492.3" y="485" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="495.26" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::setEdgeWeight (26 samples, 0.05%)</title><rect x="245.3" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="248.34" y="495.5" ></text>
</g>
<g >
<title>vfs_read (19 samples, 0.04%)</title><rect x="108.4" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (7 samples, 0.01%)</title><rect x="840.0" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="842.99" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (144 samples, 0.27%)</title><rect x="257.1" y="469" width="3.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="260.11" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (8 samples, 0.01%)</title><rect x="945.3" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="948.33" y="431.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (24 samples, 0.04%)</title><rect x="43.0" y="629" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="46.02" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (474 samples, 0.89%)</title><rect x="452.4" y="517" width="10.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="455.36" y="527.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::operator-- (56 samples, 0.10%)</title><rect x="647.7" y="485" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="650.65" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long long&gt;, true&gt;::_S_cget (5 samples, 0.01%)</title><rect x="1117.1" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1120.11" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::operator[] (385 samples, 0.72%)</title><rect x="281.7" y="517" width="8.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="284.71" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::operator[] (9 samples, 0.02%)</title><rect x="200.2" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.22" y="223.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (14 samples, 0.03%)</title><rect x="106.3" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.35" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::operator (30 samples, 0.06%)</title><rect x="472.1" y="533" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="475.07" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (10 samples, 0.02%)</title><rect x="265.5" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.53" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (44 samples, 0.08%)</title><rect x="569.4" y="421" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="572.43" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="208.0" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.98" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (9 samples, 0.02%)</title><rect x="594.2" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="597.16" y="447.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (7 samples, 0.01%)</title><rect x="101.8" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="104.76" y="639.5" ></text>
</g>
<g >
<title>parallel_graph_access::setNodeLabel (5 samples, 0.01%)</title><rect x="345.4" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.44" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (18 samples, 0.03%)</title><rect x="207.1" y="165" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.12" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (20 samples, 0.04%)</title><rect x="279.0" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="282.00" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (258 samples, 0.48%)</title><rect x="514.3" y="501" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="517.32" y="511.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (8 samples, 0.01%)</title><rect x="113.5" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.53" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;::operator[] (10 samples, 0.02%)</title><rect x="265.5" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.53" y="527.5" ></text>
</g>
<g >
<title>handle_mm_fault (9 samples, 0.02%)</title><rect x="108.2" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.24" y="415.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (18 samples, 0.03%)</title><rect x="994.5" y="549" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.53" y="559.5" ></text>
</g>
<g >
<title>poll_schedule_timeout.constprop.11 (8 samples, 0.01%)</title><rect x="15.1" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="495.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (5 samples, 0.01%)</title><rect x="1139.1" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1142.08" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (15 samples, 0.03%)</title><rect x="294.8" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="297.83" y="495.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.04%)</title><rect x="136.6" y="245" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="139.61" y="255.5" ></text>
</g>
<g >
<title>[[stack]] (2,645 samples, 4.94%)</title><rect x="20.9" y="645" width="58.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="23.93" y="655.5" >[[stac..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;unsigned long long*&gt;, unsigned long long*, unsigned long long&gt; (56 samples, 0.10%)</title><rect x="512.0" y="485" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.99" y="495.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (1,310 samples, 2.45%)</title><rect x="683.6" y="453" width="28.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.63" y="463.5" >st..</text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (7 samples, 0.01%)</title><rect x="994.3" y="261" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (26 samples, 0.05%)</title><rect x="1155.2" y="533" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1158.17" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::deallocate (10 samples, 0.02%)</title><rect x="292.6" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="295.56" y="447.5" ></text>
</g>
<g >
<title>quality_metrics::objective (12 samples, 0.02%)</title><rect x="238.5" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.49" y="463.5" ></text>
</g>
<g >
<title>graph_partitioner::single_run (704 samples, 1.32%)</title><rect x="215.1" y="309" width="15.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (49 samples, 0.09%)</title><rect x="1176.0" y="629" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.03" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (6 samples, 0.01%)</title><rect x="323.8" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="326.83" y="383.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (19 samples, 0.04%)</title><rect x="166.2" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="169.23" y="383.5" ></text>
</g>
<g >
<title>alloc_pages_vma (18 samples, 0.03%)</title><rect x="1147.7" y="293" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.75" y="303.5" ></text>
</g>
<g >
<title>std::move&lt;unsigned long long&amp;&gt; (10 samples, 0.02%)</title><rect x="683.4" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.39" y="447.5" ></text>
</g>
<g >
<title>native_write_msr (7 samples, 0.01%)</title><rect x="994.3" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="239.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::end (28 samples, 0.05%)</title><rect x="307.4" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="310.37" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (8 samples, 0.01%)</title><rect x="1170.3" y="597" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.27" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="214.4" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="217.40" y="159.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (131 samples, 0.24%)</title><rect x="239.0" y="389" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;::deallocate (5 samples, 0.01%)</title><rect x="933.1" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="936.08" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.01%)</title><rect x="301.6" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.64" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (6 samples, 0.01%)</title><rect x="968.7" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="971.72" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (13 samples, 0.02%)</title><rect x="228.5" y="149" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="231.55" y="159.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (23 samples, 0.04%)</title><rect x="110.0" y="213" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.05" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (31 samples, 0.06%)</title><rect x="540.7" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="543.73" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;unsigned long long*, unsigned long&gt; (15 samples, 0.03%)</title><rect x="992.9" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.94" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (640 samples, 1.20%)</title><rect x="945.8" y="453" width="14.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="948.77" y="463.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (9 samples, 0.02%)</title><rect x="611.1" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="614.11" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::end (10 samples, 0.02%)</title><rect x="281.5" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="284.49" y="527.5" ></text>
</g>
<g >
<title>random_functions::nextBool (19 samples, 0.04%)</title><rect x="194.6" y="357" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="197.65" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (32 samples, 0.06%)</title><rect x="39.4" y="629" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="42.38" y="639.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes (28 samples, 0.05%)</title><rect x="312.7" y="533" width="0.6" height="15.0" fill="rgb(230,0,255)" rx="2" ry="2" />
<text  x="315.73" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, hashed_edge const&amp;&gt;::_Tuple_impl (16 samples, 0.03%)</title><rect x="494.6" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="497.64" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::getCNode (44 samples, 0.08%)</title><rect x="372.2" y="533" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="375.22" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (5 samples, 0.01%)</title><rect x="397.2" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.24" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (11 samples, 0.02%)</title><rect x="245.6" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="248.56" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (6 samples, 0.01%)</title><rect x="1100.8" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1103.82" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::find (11 samples, 0.02%)</title><rect x="70.7" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="73.68" y="639.5" ></text>
</g>
<g >
<title>std::operator-&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt; (158 samples, 0.30%)</title><rect x="642.2" y="485" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="645.21" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long long&gt;::operator (12 samples, 0.02%)</title><rect x="792.6" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="795.56" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="313.2" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="316.23" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::size (8 samples, 0.01%)</title><rect x="167.5" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="170.49" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (33 samples, 0.06%)</title><rect x="57.2" y="629" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="60.24" y="639.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;*&gt;::pointer_to (6 samples, 0.01%)</title><rect x="835.5" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="838.52" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (415 samples, 0.78%)</title><rect x="729.1" y="485" width="9.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="732.12" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (11 samples, 0.02%)</title><rect x="265.8" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.75" y="511.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (8 samples, 0.01%)</title><rect x="1170.1" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_remove_bucket_begin (13 samples, 0.02%)</title><rect x="932.3" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="935.31" y="415.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;NodeData*&gt;, NodeData*&gt; (87 samples, 0.16%)</title><rect x="1146.9" y="469" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.86" y="479.5" ></text>
</g>
<g >
<title>operator new (9 samples, 0.02%)</title><rect x="866.1" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.11" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::operator (10 samples, 0.02%)</title><rect x="471.6" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.56" y="543.5" ></text>
</g>
<g >
<title>__GI___poll (190 samples, 0.35%)</title><rect x="918.1" y="437" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="921.07" y="447.5" ></text>
</g>
<g >
<title>PMPI_Barrier (1,524 samples, 2.85%)</title><rect x="1008.3" y="565" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.26" y="575.5" >PM..</text>
</g>
<g >
<title>[libmpich.so.0.0.0] (1,523 samples, 2.84%)</title><rect x="1008.3" y="485" width="33.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1011.29" y="495.5" >[l..</text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;unsigned long long const&amp;&gt; &gt; (14 samples, 0.03%)</title><rect x="66.9" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="69.91" y="639.5" ></text>
</g>
<g >
<title>__libc_fork (75 samples, 0.14%)</title><rect x="10.8" y="549" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.84" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::deallocate (41 samples, 0.08%)</title><rect x="530.1" y="469" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="533.13" y="479.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (13 samples, 0.02%)</title><rect x="521.1" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="524.07" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (650 samples, 1.21%)</title><rect x="945.6" y="469" width="14.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="948.58" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt;, std::pair&lt;unsigned long long, unsigned long long&gt;*, std::pair&lt;unsigned long long, unsigned long long&gt; &gt; (69 samples, 0.13%)</title><rect x="502.4" y="485" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="505.35" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (16 samples, 0.03%)</title><rect x="51.5" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="54.51" y="639.5" ></text>
</g>
<g >
<title>clear_page_erms (8 samples, 0.01%)</title><rect x="610.3" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.29" y="255.5" ></text>
</g>
<g >
<title>two_way_fm::assert_every_boundary_nodes (14 samples, 0.03%)</title><rect x="226.4" y="197" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="229.36" y="207.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (7 samples, 0.01%)</title><rect x="396.1" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="399.07" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (23 samples, 0.04%)</title><rect x="1124.1" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1127.07" y="511.5" ></text>
</g>
<g >
<title>two_way_fm::init_queue_with_boundary (19 samples, 0.04%)</title><rect x="211.0" y="229" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.98" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::end (65 samples, 0.12%)</title><rect x="1056.7" y="549" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1059.67" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (11 samples, 0.02%)</title><rect x="323.7" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="326.72" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.01%)</title><rect x="397.8" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.76" y="479.5" ></text>
</g>
<g >
<title>_int_free (10 samples, 0.02%)</title><rect x="504.8" y="357" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.84" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_addr (6 samples, 0.01%)</title><rect x="603.4" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="606.35" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (52 samples, 0.10%)</title><rect x="380.2" y="453" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="383.24" y="463.5" ></text>
</g>
<g >
<title>complete_boundary::build (21 samples, 0.04%)</title><rect x="215.1" y="245" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (21 samples, 0.04%)</title><rect x="550.9" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="553.93" y="447.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (7 samples, 0.01%)</title><rect x="403.4" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.38" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (6 samples, 0.01%)</title><rect x="36.7" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="39.69" y="639.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (232 samples, 0.43%)</title><rect x="701.8" y="421" width="5.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="704.79" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, hashed_edge const&amp;&gt; (5 samples, 0.01%)</title><rect x="392.5" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="395.45" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long long const, unsigned long long&gt;::pair&lt;unsigned long long const&amp;, 0ul&gt; (66 samples, 0.12%)</title><rect x="1132.2" y="453" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1135.16" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (24 samples, 0.04%)</title><rect x="409.9" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="447.5" ></text>
</g>
<g >
<title>finish_task_switch (7 samples, 0.01%)</title><rect x="111.5" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_ptr (6 samples, 0.01%)</title><rect x="37.1" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="40.09" y="639.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (12 samples, 0.02%)</title><rect x="312.8" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.84" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_deallocate (11 samples, 0.02%)</title><rect x="1146.6" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="527.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::find (7 samples, 0.01%)</title><rect x="203.0" y="181" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.98" y="191.5" ></text>
</g>
<g >
<title>dw_readl (6 samples, 0.01%)</title><rect x="922.6" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.56" y="351.5" ></text>
</g>
<g >
<title>parallel_contraction::compute_label_mapping (39 samples, 0.07%)</title><rect x="265.4" y="533" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.38" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;boundary_pair const, data_boundary_pair, hash_boundary_pair, compare_boundary_pair, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt; &gt;::operator[] (315 samples, 0.59%)</title><rect x="140.6" y="341" width="7.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="143.64" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (8 samples, 0.01%)</title><rect x="1101.6" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1104.59" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_addr (6 samples, 0.01%)</title><rect x="954.0" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="957.00" y="335.5" ></text>
</g>
<g >
<title>malloc_consolidate (5 samples, 0.01%)</title><rect x="409.9" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (42 samples, 0.08%)</title><rect x="54.9" y="629" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="57.92" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (16 samples, 0.03%)</title><rect x="280.0" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="283.04" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (42 samples, 0.08%)</title><rect x="567.0" y="437" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="570.05" y="447.5" ></text>
</g>
<g >
<title>ghost_node_communication::receive_messages_of_neighbors (8 samples, 0.01%)</title><rect x="981.9" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="984.86" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (43 samples, 0.08%)</title><rect x="242.7" y="437" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.70" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (9 samples, 0.02%)</title><rect x="113.8" y="549" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.75" y="559.5" ></text>
</g>
<g >
<title>contraction::contract (1,823 samples, 3.41%)</title><rect x="125.1" y="405" width="40.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="128.08" y="415.5" >con..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;, true&gt;::_S_get (5 samples, 0.01%)</title><rect x="492.1" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="495.13" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int const, is_boundary, hash_boundary_nodes, compare_nodes_contains, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt; &gt;::~unordered_map (286 samples, 0.53%)</title><rect x="158.9" y="197" width="6.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.87" y="207.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (8 samples, 0.01%)</title><rect x="403.8" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.85" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (39 samples, 0.07%)</title><rect x="346.3" y="405" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="349.34" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (8 samples, 0.01%)</title><rect x="957.7" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="960.68" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (404 samples, 0.75%)</title><rect x="611.6" y="469" width="8.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="614.55" y="479.5" ></text>
</g>
<g >
<title>page_fault (8 samples, 0.01%)</title><rect x="1171.9" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (11 samples, 0.02%)</title><rect x="578.0" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="580.98" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="78.8" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="81.79" y="639.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.01%)</title><rect x="1143.1" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1146.07" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (7 samples, 0.01%)</title><rect x="205.4" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.42" y="207.5" ></text>
</g>
<g >
<title>native_write_msr (15 samples, 0.03%)</title><rect x="108.5" y="149" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.51" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::resize (44 samples, 0.08%)</title><rect x="1162.5" y="549" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.51" y="559.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::size (16 samples, 0.03%)</title><rect x="654.1" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="657.09" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::~_Vector_base (14 samples, 0.03%)</title><rect x="969.5" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.54" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (8 samples, 0.01%)</title><rect x="691.3" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="694.34" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (6 samples, 0.01%)</title><rect x="474.6" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="477.62" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;Node&gt; &gt;::construct&lt;Node, Node const&amp;&gt; (40 samples, 0.07%)</title><rect x="1141.7" y="533" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1144.73" y="543.5" ></text>
</g>
<g >
<title>[mpiexec.hydra] (45 samples, 0.08%)</title><rect x="14.3" y="597" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.32" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (211 samples, 0.39%)</title><rect x="154.1" y="325" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; (15 samples, 0.03%)</title><rect x="679.8" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="682.81" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (22 samples, 0.04%)</title><rect x="348.2" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="351.17" y="383.5" ></text>
</g>
<g >
<title>PartialBoundary::insert (24 samples, 0.04%)</title><rect x="205.3" y="261" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.31" y="271.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::operator-- (7 samples, 0.01%)</title><rect x="307.2" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="310.22" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (12 samples, 0.02%)</title><rect x="956.8" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="959.82" y="399.5" ></text>
</g>
<g >
<title>page_fault (23 samples, 0.04%)</title><rect x="1171.4" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.37" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="323.0" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="326.00" y="447.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (9 samples, 0.02%)</title><rect x="610.6" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.56" y="319.5" ></text>
</g>
<g >
<title>uncoarsening::perform_uncoarsening (243 samples, 0.45%)</title><rect x="225.2" y="293" width="5.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.22" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_read (19 samples, 0.04%)</title><rect x="108.4" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="431.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;&amp;&gt; (6 samples, 0.01%)</title><rect x="1080.6" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1083.63" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (5 samples, 0.01%)</title><rect x="210.6" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.63" y="175.5" ></text>
</g>
<g >
<title>do_page_fault (27 samples, 0.05%)</title><rect x="1145.7" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.72" y="495.5" ></text>
</g>
<g >
<title>ksys_read (6 samples, 0.01%)</title><rect x="12.6" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.56" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (80 samples, 0.15%)</title><rect x="296.5" y="485" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="495.5" ></text>
</g>
<g >
<title>page_fault (14 samples, 0.03%)</title><rect x="113.4" y="581" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.44" y="591.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (7 samples, 0.01%)</title><rect x="210.0" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.01" y="191.5" ></text>
</g>
<g >
<title>__do_fault (5 samples, 0.01%)</title><rect x="110.8" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.80" y="447.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (43 samples, 0.08%)</title><rect x="403.2" y="485" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.21" y="495.5" ></text>
</g>
<g >
<title>_int_free (14 samples, 0.03%)</title><rect x="969.5" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.54" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeWeight (20 samples, 0.04%)</title><rect x="345.0" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.00" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (5 samples, 0.01%)</title><rect x="202.4" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.36" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::at (6 samples, 0.01%)</title><rect x="429.1" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="432.06" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (15 samples, 0.03%)</title><rect x="1157.7" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1160.66" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (117 samples, 0.22%)</title><rect x="122.3" y="453" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (30 samples, 0.06%)</title><rect x="339.6" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="342.62" y="511.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (139 samples, 0.26%)</title><rect x="324.5" y="405" width="3.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="327.50" y="415.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (7 samples, 0.01%)</title><rect x="139.3" y="133" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="143.5" ></text>
</g>
<g >
<title>do_page_fault (22 samples, 0.04%)</title><rect x="1171.4" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.40" y="511.5" ></text>
</g>
<g >
<title>__GI___poll (38 samples, 0.07%)</title><rect x="980.6" y="437" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="983.64" y="447.5" ></text>
</g>
<g >
<title>__GI___poll (25 samples, 0.05%)</title><rect x="451.8" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="454.77" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.02%)</title><rect x="1189.7" y="645" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.74" y="655.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (28 samples, 0.05%)</title><rect x="221.0" y="149" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="224.01" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (67 samples, 0.13%)</title><rect x="404.6" y="501" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="407.58" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator++ (14 samples, 0.03%)</title><rect x="707.3" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="710.32" y="415.5" ></text>
</g>
<g >
<title>__do_page_fault (10 samples, 0.02%)</title><rect x="1162.3" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.29" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (12 samples, 0.02%)</title><rect x="158.9" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.87" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_poll (9 samples, 0.02%)</title><rect x="981.2" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="984.15" y="399.5" ></text>
</g>
<g >
<title>_int_free (20 samples, 0.04%)</title><rect x="164.3" y="69" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="167.25" y="79.5" ></text>
</g>
<g >
<title>std::pair&lt;hashed_edge const, data_hashed_edge&gt;::pair&lt;hashed_edge const&amp;, 0ul&gt; (6 samples, 0.01%)</title><rect x="264.2" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="267.21" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_v (7 samples, 0.01%)</title><rect x="54.3" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="57.35" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, bool&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (31 samples, 0.06%)</title><rect x="406.7" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.71" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (11 samples, 0.02%)</title><rect x="205.6" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::destroy&lt;unsigned long long&gt; (17 samples, 0.03%)</title><rect x="641.3" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="644.26" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_addr (22 samples, 0.04%)</title><rect x="37.4" y="629" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="40.38" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (13 samples, 0.02%)</title><rect x="839.4" y="405" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="842.40" y="415.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (9 samples, 0.02%)</title><rect x="13.9" y="597" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.92" y="607.5" ></text>
</g>
<g >
<title>_dl_start (71 samples, 0.13%)</title><rect x="1170.6" y="629" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.58" y="639.5" ></text>
</g>
<g >
<title>error_entry (5 samples, 0.01%)</title><rect x="1162.8" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.82" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;NodeData&gt;::construct&lt;NodeData, NodeData const&amp;&gt; (61 samples, 0.11%)</title><rect x="1145.2" y="517" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.23" y="527.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (36 samples, 0.07%)</title><rect x="12.9" y="565" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.89" y="575.5" ></text>
</g>
<g >
<title>__handle_mm_fault (21 samples, 0.04%)</title><rect x="1171.4" y="453" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.42" y="463.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (10 samples, 0.02%)</title><rect x="1148.6" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1151.56" y="367.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (12 samples, 0.02%)</title><rect x="45.2" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="48.20" y="639.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.01%)</title><rect x="14.1" y="645" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.14" y="655.5" ></text>
</g>
<g >
<title>[hydra_pmi_proxy] (164 samples, 0.31%)</title><rect x="10.1" y="597" width="3.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.07" y="607.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (26 samples, 0.05%)</title><rect x="13.0" y="373" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.00" y="383.5" ></text>
</g>
<g >
<title>std::operator==&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt; (19 samples, 0.04%)</title><rect x="503.5" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="506.46" y="431.5" ></text>
</g>
<g >
<title>complete_boundary::update_lazy_values (8 samples, 0.01%)</title><rect x="215.3" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.26" y="239.5" ></text>
</g>
<g >
<title>ghost_node_communication::update_ghost_node_data (436 samples, 0.81%)</title><rect x="340.5" y="517" width="9.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="343.54" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::destroy&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt; (287 samples, 0.54%)</title><rect x="158.9" y="261" width="6.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.85" y="271.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned long long&gt;::operator (13 samples, 0.02%)</title><rect x="592.3" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="595.33" y="431.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (146 samples, 0.27%)</title><rect x="714.2" y="405" width="3.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="717.22" y="415.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (10 samples, 0.02%)</title><rect x="208.1" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.11" y="255.5" ></text>
</g>
<g >
<title>dl_main (70 samples, 0.13%)</title><rect x="1170.6" y="581" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.60" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (24 samples, 0.04%)</title><rect x="960.4" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="963.39" y="479.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;double&gt; (8 samples, 0.01%)</title><rect x="1170.1" y="597" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (28 samples, 0.05%)</title><rect x="110.0" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (57 samples, 0.11%)</title><rect x="839.1" y="453" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="842.07" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (36 samples, 0.07%)</title><rect x="12.9" y="549" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.89" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator++ (8 samples, 0.01%)</title><rect x="688.9" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="691.94" y="351.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (7 samples, 0.01%)</title><rect x="994.3" y="245" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (6 samples, 0.01%)</title><rect x="266.0" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.04" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (6 samples, 0.01%)</title><rect x="1080.3" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1083.27" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, bool&gt;, false&gt; &gt; &gt;::_M_deallocate_node (9 samples, 0.02%)</title><rect x="410.2" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="413.22" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (5 samples, 0.01%)</title><rect x="726.0" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="729.04" y="511.5" ></text>
</g>
<g >
<title>_start (48,480 samples, 90.56%)</title><rect x="103.6" y="645" width="1068.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="106.57" y="655.5" >_start</text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (7 samples, 0.01%)</title><rect x="122.1" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.11" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (82 samples, 0.15%)</title><rect x="273.2" y="501" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.18" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (24 samples, 0.04%)</title><rect x="370.9" y="357" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="373.85" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (41 samples, 0.08%)</title><rect x="999.6" y="565" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1002.62" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (7 samples, 0.01%)</title><rect x="866.7" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.73" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (12 samples, 0.02%)</title><rect x="395.5" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.49" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="148.1" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="151.07" y="335.5" ></text>
</g>
<g >
<title>__x64_sys_read (258 samples, 0.48%)</title><rect x="1163.5" y="469" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="479.5" ></text>
</g>
<g >
<title>_int_malloc (10 samples, 0.02%)</title><rect x="136.8" y="213" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="139.83" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;QElement&lt;maxNodeHeap::Data&gt;, std::allocator&lt;QElement&lt;maxNodeHeap::Data&gt; &gt; &gt;::_M_allocate (8 samples, 0.01%)</title><rect x="227.0" y="133" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.03" y="143.5" ></text>
</g>
<g >
<title>native_write_msr (7 samples, 0.01%)</title><rect x="111.5" y="261" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="271.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (190 samples, 0.35%)</title><rect x="398.3" y="517" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="401.34" y="527.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::_Bit_iterator (9 samples, 0.02%)</title><rect x="525.0" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="527.97" y="527.5" ></text>
</g>
<g >
<title>random_functions::nextBool (6 samples, 0.01%)</title><rect x="216.5" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.47" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (6 samples, 0.01%)</title><rect x="830.8" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="833.85" y="543.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (5 samples, 0.01%)</title><rect x="1162.3" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.29" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="242.4" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.39" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt;::allocate (19 samples, 0.04%)</title><rect x="501.8" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="504.76" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="408.1" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.15" y="463.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (215 samples, 0.40%)</title><rect x="692.1" y="389" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="695.07" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (5 samples, 0.01%)</title><rect x="393.5" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="396.53" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_addr (10 samples, 0.02%)</title><rect x="578.7" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="581.71" y="383.5" ></text>
</g>
<g >
<title>sock_poll (5 samples, 0.01%)</title><rect x="921.5" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="924.53" y="383.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (519 samples, 0.97%)</title><rect x="970.1" y="485" width="11.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="973.06" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::construct&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (81 samples, 0.15%)</title><rect x="493.3" y="485" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="496.32" y="495.5" ></text>
</g>
<g >
<title>handle_mm_fault (8 samples, 0.01%)</title><rect x="994.3" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (62 samples, 0.12%)</title><rect x="832.8" y="437" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="835.79" y="447.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.02%)</title><rect x="969.0" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.03" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (6 samples, 0.01%)</title><rect x="567.3" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="570.29" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="466.1" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="469.07" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="866.6" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.55" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (291 samples, 0.54%)</title><rect x="158.8" y="309" width="6.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.76" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="52.3" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="55.32" y="639.5" ></text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (6 samples, 0.01%)</title><rect x="1176.6" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.60" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_free (6 samples, 0.01%)</title><rect x="36.6" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="39.56" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (9 samples, 0.02%)</title><rect x="225.8" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.84" y="191.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="263.7" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="266.75" y="447.5" ></text>
</g>
<g >
<title>native_write_msr (21 samples, 0.04%)</title><rect x="112.8" y="277" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="287.5" ></text>
</g>
<g >
<title>edge_ratings::rate (8 samples, 0.01%)</title><rect x="200.8" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.75" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (10 samples, 0.02%)</title><rect x="1076.4" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1079.44" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (30 samples, 0.06%)</title><rect x="402.5" y="421" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.53" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="426.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="429.53" y="495.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10 samples, 0.02%)</title><rect x="1138.1" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.07" y="447.5" ></text>
</g>
<g >
<title>std::copy&lt;std::move_iterator&lt;NodeData*&gt;, NodeData*&gt; (87 samples, 0.16%)</title><rect x="1146.9" y="453" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.86" y="463.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, long&gt; (58 samples, 0.11%)</title><rect x="776.6" y="405" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="779.56" y="415.5" ></text>
</g>
<g >
<title>__handle_mm_fault (16 samples, 0.03%)</title><rect x="1163.0" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.95" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (26 samples, 0.05%)</title><rect x="959.1" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="962.11" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned long long&gt;, true&gt;::_S_cget (5 samples, 0.01%)</title><rect x="577.9" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="580.87" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;AdditionalNonLocalNodeData, std::allocator&lt;AdditionalNonLocalNodeData&gt; &gt;::at (9 samples, 0.02%)</title><rect x="269.5" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="272.48" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (376 samples, 0.70%)</title><rect x="444.1" y="421" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="447.07" y="431.5" ></text>
</g>
<g >
<title>_int_malloc (10 samples, 0.02%)</title><rect x="969.0" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.03" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (13 samples, 0.02%)</title><rect x="1039.0" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1042.01" y="383.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (234 samples, 0.44%)</title><rect x="80.0" y="645" width="5.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="83.05" y="655.5" ></text>
</g>
<g >
<title>__lru_cache_add (5 samples, 0.01%)</title><rect x="1168.7" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1171.73" y="239.5" ></text>
</g>
<g >
<title>__do_page_fault (7 samples, 0.01%)</title><rect x="110.8" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="113.75" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt;::construct&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::pair&lt;unsigned long long, unsigned long long&gt; const&amp;&gt; (11 samples, 0.02%)</title><rect x="501.2" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="504.21" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::build_from_metis_weighted (108 samples, 0.20%)</title><rect x="243.6" y="501" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="246.65" y="511.5" ></text>
</g>
<g >
<title>sock_recvmsg (26 samples, 0.05%)</title><rect x="107.6" y="309" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (17 samples, 0.03%)</title><rect x="349.6" y="421" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="352.62" y="431.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (6 samples, 0.01%)</title><rect x="210.7" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.74" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (13 samples, 0.02%)</title><rect x="469.2" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.25" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (49 samples, 0.09%)</title><rect x="583.6" y="421" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="586.62" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (31 samples, 0.06%)</title><rect x="474.8" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="477.76" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (323 samples, 0.60%)</title><rect x="937.9" y="421" width="7.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="940.90" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::size (14 samples, 0.03%)</title><rect x="856.3" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="859.35" y="479.5" ></text>
</g>
<g >
<title>malloc_consolidate (13 samples, 0.02%)</title><rect x="969.6" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.56" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (7 samples, 0.01%)</title><rect x="212.4" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.43" y="175.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (227 samples, 0.42%)</title><rect x="114.0" y="469" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (337 samples, 0.63%)</title><rect x="961.1" y="453" width="7.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="964.07" y="463.5" ></text>
</g>
<g >
<title>io_schedule (8 samples, 0.01%)</title><rect x="994.3" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.27" y="367.5" ></text>
</g>
<g >
<title>initial_partitioning::perform_initial_partitioning (379 samples, 0.71%)</title><rect x="216.9" y="293" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.86" y="303.5" ></text>
</g>
<g >
<title>__vfs_read (38 samples, 0.07%)</title><rect x="108.9" y="389" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="399.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (15 samples, 0.03%)</title><rect x="108.5" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.51" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (212 samples, 0.40%)</title><rect x="142.2" y="293" width="4.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="145.21" y="303.5" ></text>
</g>
<g >
<title>do_syscall_64 (21 samples, 0.04%)</title><rect x="370.9" y="341" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="373.92" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (10 samples, 0.02%)</title><rect x="260.4" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="263.40" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (12 samples, 0.02%)</title><rect x="550.2" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="553.21" y="431.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned long long&gt; (17 samples, 0.03%)</title><rect x="712.1" y="389" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="715.13" y="399.5" ></text>
</g>
<g >
<title>parallel_graph_access::is_interface_node (6 samples, 0.01%)</title><rect x="429.3" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="432.33" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (8 samples, 0.01%)</title><rect x="215.3" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.26" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (45 samples, 0.08%)</title><rect x="474.4" y="485" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="477.45" y="495.5" ></text>
</g>
<g >
<title>get_page_from_freelist (16 samples, 0.03%)</title><rect x="1164.3" y="213" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1167.28" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false, false&gt;::_Node_iterator (10 samples, 0.02%)</title><rect x="1084.7" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1087.73" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (13 samples, 0.02%)</title><rect x="182.0" y="341" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="184.97" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator-- (5 samples, 0.01%)</title><rect x="702.4" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="705.43" y="399.5" ></text>
</g>
<g >
<title>std::fill_n&lt;unsigned long long*, unsigned long, unsigned long long&gt; (15 samples, 0.03%)</title><rect x="992.9" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.94" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (211 samples, 0.39%)</title><rect x="825.7" y="533" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="828.69" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (30 samples, 0.06%)</title><rect x="206.9" y="197" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.88" y="207.5" ></text>
</g>
<g >
<title>do_page_fault (14 samples, 0.03%)</title><rect x="471.2" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.16" y="399.5" ></text>
</g>
<g >
<title>std::_Bit_reference::_Bit_reference (10 samples, 0.02%)</title><rect x="340.0" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="343.04" y="479.5" ></text>
</g>
<g >
<title>_int_malloc (32 samples, 0.06%)</title><rect x="492.6" y="421" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="495.57" y="431.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6 samples, 0.01%)</title><rect x="462.3" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="465.26" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (19 samples, 0.04%)</title><rect x="373.4" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="376.41" y="527.5" ></text>
</g>
<g >
<title>PMPI_Recv (190 samples, 0.35%)</title><rect x="398.3" y="533" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="401.34" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (5 samples, 0.01%)</title><rect x="859.7" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="862.68" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (5 samples, 0.01%)</title><rect x="409.9" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (5 samples, 0.01%)</title><rect x="956.5" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="959.49" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (45 samples, 0.08%)</title><rect x="522.4" y="517" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="525.43" y="527.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 0.01%)</title><rect x="12.5" y="533" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.53" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_addr (7 samples, 0.01%)</title><rect x="1125.5" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1128.53" y="479.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (18 samples, 0.03%)</title><rect x="312.8" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.84" y="463.5" ></text>
</g>
<g >
<title>x86_pmu_enable (51 samples, 0.10%)</title><rect x="11.3" y="469" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="14.30" y="479.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (6 samples, 0.01%)</title><rect x="935.7" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="938.70" y="383.5" ></text>
</g>
<g >
<title>graph_partitioner::perform_partitioning (5,145 samples, 9.61%)</title><rect x="125.1" y="453" width="113.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="128.08" y="463.5" >graph_partitio..</text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::operator[] (71 samples, 0.13%)</title><rect x="347.2" y="453" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="350.24" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (6 samples, 0.01%)</title><rect x="1058.6" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1061.56" y="543.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (5 samples, 0.01%)</title><rect x="106.7" y="549" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.65" y="559.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (18 samples, 0.03%)</title><rect x="994.5" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.53" y="543.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (16 samples, 0.03%)</title><rect x="688.3" y="325" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="691.26" y="335.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (227 samples, 0.42%)</title><rect x="114.0" y="549" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.97" y="559.5" ></text>
</g>
<g >
<title>graph_partitioner::perform_partitioning (674 samples, 1.26%)</title><rect x="200.2" y="341" width="14.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.20" y="351.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (17 samples, 0.03%)</title><rect x="684.1" y="293" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.11" y="303.5" ></text>
</g>
<g >
<title>parallel_graph_access::is_local_node (49 samples, 0.09%)</title><rect x="857.0" y="517" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="859.99" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;std::move_iterator&lt;Node*&gt;, Node*&gt; (21 samples, 0.04%)</title><rect x="1142.7" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.72" y="479.5" ></text>
</g>
<g >
<title>free_unref_page_list (10 samples, 0.02%)</title><rect x="1189.2" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.23" y="415.5" ></text>
</g>
<g >
<title>_int_free (110 samples, 0.21%)</title><rect x="526.1" y="421" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="431.5" ></text>
</g>
<g >
<title>__schedule (8 samples, 0.01%)</title><rect x="15.1" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.11" y="431.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned long long&gt; (22 samples, 0.04%)</title><rect x="696.3" y="341" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="699.32" y="351.5" ></text>
</g>
<g >
<title>parallel_graph_access::getTargetPE (10 samples, 0.02%)</title><rect x="45.7" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="48.69" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (9 samples, 0.02%)</title><rect x="268.4" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.36" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_ptr (6 samples, 0.01%)</title><rect x="152.7" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="155.72" y="239.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (23 samples, 0.04%)</title><rect x="111.7" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.72" y="447.5" ></text>
</g>
<g >
<title>PMPI_Barrier (370 samples, 0.69%)</title><rect x="247.2" y="533" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="543.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long long const&amp;&gt; (24 samples, 0.04%)</title><rect x="67.2" y="629" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="70.24" y="639.5" ></text>
</g>
<g >
<title>new_sync_read (38 samples, 0.07%)</title><rect x="108.9" y="373" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (28 samples, 0.05%)</title><rect x="559.4" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="562.35" y="463.5" ></text>
</g>
<g >
<title>__GI_munmap (8 samples, 0.01%)</title><rect x="1041.9" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="543.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (53 samples, 0.10%)</title><rect x="1107.5" y="453" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1110.47" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (560 samples, 1.05%)</title><rect x="1097.7" y="501" width="12.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1100.71" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (173 samples, 0.32%)</title><rect x="389.2" y="501" width="3.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="392.17" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long&gt; (5 samples, 0.01%)</title><rect x="65.0" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="67.95" y="639.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (6 samples, 0.01%)</title><rect x="219.7" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.71" y="175.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (14 samples, 0.03%)</title><rect x="620.5" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="623.52" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (118 samples, 0.22%)</title><rect x="290.2" y="501" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (37 samples, 0.07%)</title><rect x="267.3" y="485" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="270.32" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (5 samples, 0.01%)</title><rect x="49.8" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="52.81" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (28 samples, 0.05%)</title><rect x="532.2" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.20" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;NodeData*, unsigned long&gt; (43 samples, 0.08%)</title><rect x="1162.5" y="485" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.54" y="495.5" ></text>
</g>
<g >
<title>ret_from_fork (62 samples, 0.12%)</title><rect x="11.1" y="533" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="14.12" y="543.5" ></text>
</g>
<g >
<title>parallel_graph_access::update_non_contained_block_balance (150 samples, 0.28%)</title><rect x="345.5" y="485" width="3.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.55" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="212.5" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.48" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (15 samples, 0.03%)</title><rect x="207.2" y="149" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.19" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (6 samples, 0.01%)</title><rect x="569.6" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="572.58" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::deallocate (14 samples, 0.03%)</title><rect x="969.5" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.54" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (19 samples, 0.04%)</title><rect x="1144.1" y="549" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1147.13" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long long*, unsigned long&gt; (6 samples, 0.01%)</title><rect x="242.6" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.57" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (11 samples, 0.02%)</title><rect x="166.8" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="169.81" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (6 samples, 0.01%)</title><rect x="266.0" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.04" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="278.3" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="281.34" y="479.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::end (8 samples, 0.01%)</title><rect x="464.0" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="466.98" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (122 samples, 0.23%)</title><rect x="107.3" y="501" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.29" y="511.5" ></text>
</g>
<g >
<title>i2c_dw_isr (6 samples, 0.01%)</title><rect x="922.6" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.56" y="367.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (28 samples, 0.05%)</title><rect x="312.7" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.73" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;::allocate (6 samples, 0.01%)</title><rect x="601.3" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="604.28" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (333 samples, 0.62%)</title><rect x="376.0" y="485" width="7.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="379.01" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (9 samples, 0.02%)</title><rect x="329.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="332.52" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_free (29 samples, 0.05%)</title><rect x="299.2" y="421" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="302.21" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (110 samples, 0.21%)</title><rect x="526.1" y="501" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="511.5" ></text>
</g>
<g >
<title>openaux (14 samples, 0.03%)</title><rect x="1170.6" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.60" y="543.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, unsigned long long const&amp;&gt; (8 samples, 0.01%)</title><rect x="62.9" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="65.95" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::size (5 samples, 0.01%)</title><rect x="76.1" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="79.10" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (9 samples, 0.02%)</title><rect x="61.0" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="64.01" y="639.5" ></text>
</g>
<g >
<title>unmap_single_vma (48 samples, 0.09%)</title><rect x="1176.0" y="485" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt;::allocate (5 samples, 0.01%)</title><rect x="470.0" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.97" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (530 samples, 0.99%)</title><rect x="316.1" y="469" width="11.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="319.14" y="479.5" ></text>
</g>
<g >
<title>std::_Bit_iterator_base::_Bit_iterator_base (9 samples, 0.02%)</title><rect x="1053.1" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1056.05" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (26 samples, 0.05%)</title><rect x="1125.1" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1128.11" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (55 samples, 0.10%)</title><rect x="847.4" y="469" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="850.38" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (11 samples, 0.02%)</title><rect x="965.8" y="389" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="968.83" y="399.5" ></text>
</g>
<g >
<title>clear_page_erms (5 samples, 0.01%)</title><rect x="994.7" y="341" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.71" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (11 samples, 0.02%)</title><rect x="696.1" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="699.08" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (8 samples, 0.01%)</title><rect x="788.5" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="791.46" y="431.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (82 samples, 0.15%)</title><rect x="273.2" y="469" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.18" y="479.5" ></text>
</g>
<g >
<title>io_schedule (7 samples, 0.01%)</title><rect x="1171.9" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (193 samples, 0.36%)</title><rect x="282.7" y="469" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="285.75" y="479.5" ></text>
</g>
<g >
<title>handle_mm_fault (31 samples, 0.06%)</title><rect x="112.7" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.72" y="511.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::end (161 samples, 0.30%)</title><rect x="648.9" y="485" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="651.89" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::getTargetPE (65 samples, 0.12%)</title><rect x="337.6" y="501" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="340.63" y="511.5" ></text>
</g>
<g >
<title>schedule (8 samples, 0.01%)</title><rect x="139.3" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (14 samples, 0.03%)</title><rect x="823.6" y="533" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="826.64" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt;::deallocate (43 samples, 0.08%)</title><rect x="163.7" y="101" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="166.74" y="111.5" ></text>
</g>
<g >
<title>two_way_fm::perform_refinement (197 samples, 0.37%)</title><rect x="226.2" y="229" width="4.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="229.23" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::end (48 samples, 0.09%)</title><rect x="540.5" y="517" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="543.51" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (376 samples, 0.70%)</title><rect x="444.1" y="437" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="447.07" y="447.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (11 samples, 0.02%)</title><rect x="683.8" y="309" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.85" y="319.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (18 samples, 0.03%)</title><rect x="268.2" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.16" y="527.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (8 samples, 0.01%)</title><rect x="1146.6" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.64" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_realloc_insert&lt;unsigned long long const&amp;&gt; (57 samples, 0.11%)</title><rect x="512.0" y="517" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.96" y="527.5" ></text>
</g>
<g >
<title>sock_poll (5 samples, 0.01%)</title><rect x="921.4" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="924.37" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_ptr (6 samples, 0.01%)</title><rect x="1135.6" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1138.62" y="495.5" ></text>
</g>
<g >
<title>quality_metrics::edge_cut (5 samples, 0.01%)</title><rect x="209.4" y="261" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="212.37" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::operator[] (69 samples, 0.13%)</title><rect x="1052.4" y="533" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1055.37" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_v (11 samples, 0.02%)</title><rect x="152.6" y="261" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="155.61" y="271.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_Head_base (18 samples, 0.03%)</title><rect x="618.8" y="405" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="621.80" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (30 samples, 0.06%)</title><rect x="837.5" y="469" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="840.50" y="479.5" ></text>
</g>
<g >
<title>do_page_fault (10 samples, 0.02%)</title><rect x="1142.2" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.21" y="495.5" ></text>
</g>
<g >
<title>uncoarsening::perform_uncoarsening (453 samples, 0.85%)</title><rect x="205.1" y="309" width="10.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.07" y="319.5" ></text>
</g>
<g >
<title>__handle_mm_fault (8 samples, 0.01%)</title><rect x="391.2" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="394.24" y="351.5" ></text>
</g>
<g >
<title>__x64_sys_read (38 samples, 0.07%)</title><rect x="108.9" y="437" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (6 samples, 0.01%)</title><rect x="1125.7" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1128.68" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (109 samples, 0.20%)</title><rect x="495.8" y="501" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (40 samples, 0.07%)</title><rect x="301.7" y="453" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.75" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (147 samples, 0.27%)</title><rect x="257.0" y="485" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="260.05" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;::deallocate (22 samples, 0.04%)</title><rect x="835.0" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="838.03" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (24 samples, 0.04%)</title><rect x="586.1" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="589.07" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;NodeData&gt; &gt;::construct&lt;NodeData, NodeData const&amp;&gt; (71 samples, 0.13%)</title><rect x="1145.1" y="533" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1148.06" y="543.5" ></text>
</g>
<g >
<title>_dl_map_object (5 samples, 0.01%)</title><rect x="15.4" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.42" y="527.5" ></text>
</g>
<g >
<title>gethostbyname (11 samples, 0.02%)</title><rect x="109.7" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.74" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets (86 samples, 0.16%)</title><rect x="290.2" y="453" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (12 samples, 0.02%)</title><rect x="76.2" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="79.21" y="639.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, long&gt; (7 samples, 0.01%)</title><rect x="788.0" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="791.00" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::_M_node_allocator (12 samples, 0.02%)</title><rect x="1127.8" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1130.80" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (17 samples, 0.03%)</title><rect x="501.8" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="504.78" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (5 samples, 0.01%)</title><rect x="926.1" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="929.13" y="447.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, long&gt; (22 samples, 0.04%)</title><rect x="591.8" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="594.80" y="415.5" ></text>
</g>
<g >
<title>MPI_Probe (2,443 samples, 4.56%)</title><rect x="868.9" y="501" width="53.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="871.87" y="511.5" >MPI_P..</text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (10 samples, 0.02%)</title><rect x="925.3" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="928.34" y="479.5" ></text>
</g>
<g >
<title>x86_pmu_enable (8 samples, 0.01%)</title><rect x="1170.1" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned long long&gt;, true&gt;::_S_cget (11 samples, 0.02%)</title><rect x="1084.2" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1087.20" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (83 samples, 0.16%)</title><rect x="133.4" y="277" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="136.39" y="287.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (53 samples, 0.10%)</title><rect x="450.6" y="389" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="453.60" y="399.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (117 samples, 0.22%)</title><rect x="122.3" y="437" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="447.5" ></text>
</g>
<g >
<title>balance_management_coarsening::init (4,077 samples, 7.62%)</title><rect x="533.6" y="533" width="89.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="536.59" y="543.5" >balance_ma..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (16 samples, 0.03%)</title><rect x="1092.6" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1095.62" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_ptr (15 samples, 0.03%)</title><rect x="472.4" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="475.40" y="511.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="312.8" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.84" y="415.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeLabel (6 samples, 0.01%)</title><rect x="95.3" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="98.30" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (15 samples, 0.03%)</title><rect x="221.8" y="117" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="224.82" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (6 samples, 0.01%)</title><rect x="99.3" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="102.34" y="639.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long long const, unsigned long long&gt; (16 samples, 0.03%)</title><rect x="1080.9" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1083.89" y="431.5" ></text>
</g>
<g >
<title>do_sys_poll (10 samples, 0.02%)</title><rect x="371.1" y="309" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="374.14" y="319.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (8 samples, 0.01%)</title><rect x="65.5" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="68.55" y="639.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long long&gt; (7 samples, 0.01%)</title><rect x="67.8" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="70.77" y="639.5" ></text>
</g>
<g >
<title>std::stack&lt;unsigned long long, std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::push (49 samples, 0.09%)</title><rect x="311.3" y="485" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="314.34" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::operator[] (10 samples, 0.02%)</title><rect x="78.3" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="81.31" y="639.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (190 samples, 0.35%)</title><rect x="718.5" y="469" width="4.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="721.45" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (97 samples, 0.18%)</title><rect x="838.2" y="485" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="841.19" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (8 samples, 0.01%)</title><rect x="1041.9" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.86" y="511.5" ></text>
</g>
<g >
<title>size_constraint_label_propagation::match (53 samples, 0.10%)</title><rect x="215.7" y="277" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.70" y="287.5" ></text>
</g>
<g >
<title>clear_page_erms (10 samples, 0.02%)</title><rect x="512.7" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.67" y="223.5" ></text>
</g>
<g >
<title>schedule (8 samples, 0.01%)</title><rect x="1170.1" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (48 samples, 0.09%)</title><rect x="315.0" y="453" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="318.02" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10 samples, 0.02%)</title><rect x="395.5" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.52" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (29 samples, 0.05%)</title><rect x="258.8" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="261.83" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::base (7 samples, 0.01%)</title><rect x="680.0" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="682.99" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_realloc_insert&lt;NodeData const&amp;&gt; (98 samples, 0.18%)</title><rect x="1146.6" y="533" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="543.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (21 samples, 0.04%)</title><rect x="112.8" y="309" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="319.5" ></text>
</g>
<g >
<title>main (48,401 samples, 90.41%)</title><rect x="103.6" y="613" width="1066.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="106.61" y="623.5" >main</text>
</g>
<g >
<title>do_signal (48 samples, 0.09%)</title><rect x="1176.0" y="597" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="607.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (719 samples, 1.34%)</title><rect x="355.7" y="501" width="15.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="358.73" y="511.5" ></text>
</g>
<g >
<title>PartialBoundary::insert (9 samples, 0.02%)</title><rect x="200.2" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.22" y="239.5" ></text>
</g>
<g >
<title>complete_boundary::assert_bnodes_in_boundaries (15 samples, 0.03%)</title><rect x="225.4" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.35" y="255.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (5 samples, 0.01%)</title><rect x="403.2" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.21" y="383.5" ></text>
</g>
<g >
<title>parallel_graph_access::allocate_node_to_cnode (7 samples, 0.01%)</title><rect x="525.6" y="549" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="528.56" y="559.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (7 samples, 0.01%)</title><rect x="1171.9" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (30 samples, 0.06%)</title><rect x="419.3" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="422.30" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_allocate (8 samples, 0.01%)</title><rect x="242.4" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.39" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (56 samples, 0.10%)</title><rect x="288.8" y="485" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="291.79" y="495.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (5 samples, 0.01%)</title><rect x="1148.1" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1151.14" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_valptr (28 samples, 0.05%)</title><rect x="472.1" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="475.11" y="527.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (5 samples, 0.01%)</title><rect x="43.6" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="46.57" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (17 samples, 0.03%)</title><rect x="243.3" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="246.27" y="383.5" ></text>
</g>
<g >
<title>__libc_read (38 samples, 0.07%)</title><rect x="108.9" y="485" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (12 samples, 0.02%)</title><rect x="146.4" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="149.35" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; &gt; &gt;::_M_deallocate_node (13 samples, 0.02%)</title><rect x="532.5" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="535.53" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (12 samples, 0.02%)</title><rect x="684.6" y="293" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.64" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (6 samples, 0.01%)</title><rect x="952.9" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="955.94" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (125 samples, 0.23%)</title><rect x="467.5" y="517" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="470.48" y="527.5" ></text>
</g>
<g >
<title>std::move&lt;unsigned long long&amp;&gt; (6 samples, 0.01%)</title><rect x="712.4" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="715.37" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (9 samples, 0.02%)</title><rect x="200.2" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="203.22" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20 samples, 0.04%)</title><rect x="451.8" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="454.83" y="383.5" ></text>
</g>
<g >
<title>PMPI_Barrier (5 samples, 0.01%)</title><rect x="106.7" y="597" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.65" y="607.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeWeight (8 samples, 0.01%)</title><rect x="374.2" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="377.16" y="543.5" ></text>
</g>
<g >
<title>do_IRQ (7 samples, 0.01%)</title><rect x="1041.4" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.44" y="383.5" ></text>
</g>
<g >
<title>get_page_from_freelist (22 samples, 0.04%)</title><rect x="111.7" y="421" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.75" y="431.5" ></text>
</g>
<g >
<title>__GI___poll (36 samples, 0.07%)</title><rect x="12.9" y="581" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.89" y="591.5" ></text>
</g>
<g >
<title>x86_pmu_enable (7 samples, 0.01%)</title><rect x="111.5" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="319.5" ></text>
</g>
<g >
<title>handle_mm_fault (10 samples, 0.02%)</title><rect x="994.7" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.66" y="447.5" ></text>
</g>
<g >
<title>i2c_dw_isr (6 samples, 0.01%)</title><rect x="1041.4" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.44" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="301.1" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.07" y="463.5" ></text>
</g>
<g >
<title>thermal_interrupt (5 samples, 0.01%)</title><rect x="1189.6" y="645" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.60" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_addr (6 samples, 0.01%)</title><rect x="37.0" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="39.96" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (63 samples, 0.12%)</title><rect x="276.3" y="485" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="279.27" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (14 samples, 0.03%)</title><rect x="97.8" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="100.82" y="639.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (17 samples, 0.03%)</title><rect x="993.9" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="996.89" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (149 samples, 0.28%)</title><rect x="845.9" y="501" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="848.92" y="511.5" ></text>
</g>
<g >
<title>_int_malloc (11 samples, 0.02%)</title><rect x="397.5" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.50" y="431.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long long const&amp;&gt; (16 samples, 0.03%)</title><rect x="511.3" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.30" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (69 samples, 0.13%)</title><rect x="1151.9" y="517" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1154.91" y="527.5" ></text>
</g>
<g >
<title>balance_management_coarsening::update_non_contained_block_balance (146 samples, 0.27%)</title><rect x="345.6" y="469" width="3.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="348.59" y="479.5" ></text>
</g>
<g >
<title>PMPI_Barrier (131 samples, 0.24%)</title><rect x="239.0" y="501" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="511.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (85 samples, 0.16%)</title><rect x="213.2" y="213" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="216.16" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_M_next (49 samples, 0.09%)</title><rect x="528.6" y="485" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="531.58" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (11 samples, 0.02%)</title><rect x="738.0" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="741.03" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (27 samples, 0.05%)</title><rect x="1061.5" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1064.52" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_M_incr (10 samples, 0.02%)</title><rect x="471.8" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.85" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (14 samples, 0.03%)</title><rect x="214.6" y="181" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="217.64" y="191.5" ></text>
</g>
<g >
<title>schedule (58 samples, 0.11%)</title><rect x="1166.5" y="341" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1169.55" y="351.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (64 samples, 0.12%)</title><rect x="266.7" y="501" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.72" y="511.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::unordered_map&lt;unsigned long long, bool, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt; &gt;*&gt; (6 samples, 0.01%)</title><rect x="266.0" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="269.04" y="495.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (15 samples, 0.03%)</title><rect x="354.9" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="357.91" y="495.5" ></text>
</g>
<g >
<title>std::pair&lt;hashed_edge const, data_hashed_edge&gt;::pair&lt;hashed_edge const&amp;, 0ul&gt; (22 samples, 0.04%)</title><rect x="494.1" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="497.07" y="447.5" ></text>
</g>
<g >
<title>parallel_contraction::redistribute_hased_graph_and_build_graph_locally (1,138 samples, 2.13%)</title><rect x="270.2" y="533" width="25.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="273.18" y="543.5" >p..</text>
</g>
<g >
<title>parallel_graph_access::getNodeWeight (24 samples, 0.04%)</title><rect x="823.4" y="549" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="826.42" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="268.4" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="271.40" y="495.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (7 samples, 0.01%)</title><rect x="203.4" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.42" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Val_comp_iter&lt;node_ordering::order_nodes_degree (15 samples, 0.03%)</title><rect x="679.4" y="437" width="0.4" height="15.0" fill="rgb(215,32,16)" rx="2" ry="2" />
<text  x="682.44" y="447.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_M_head (9 samples, 0.02%)</title><rect x="1133.4" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1136.42" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (86 samples, 0.16%)</title><rect x="290.2" y="469" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="479.5" ></text>
</g>
<g >
<title>parallel_contraction::contract_to_distributed_quotient (8,042 samples, 15.02%)</title><rect x="355.7" y="565" width="177.3" height="15.0" fill="rgb(0, 26, 255)" rx="2" ry="2" />
<text  x="358.71" y="575.5" >parallel_contraction::c..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (7 samples, 0.01%)</title><rect x="768.3" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="771.29" y="431.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;unsigned long long*&gt;, unsigned long long*&gt; (56 samples, 0.10%)</title><rect x="512.0" y="469" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.99" y="479.5" ></text>
</g>
<g >
<title>population::createIndividuum (5,172 samples, 9.66%)</title><rect x="124.8" y="469" width="114.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="127.84" y="479.5" >population::cr..</text>
</g>
<g >
<title>[libmpich.so.0.0.0] (8 samples, 0.01%)</title><rect x="113.8" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.77" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (7 samples, 0.01%)</title><rect x="706.2" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="709.18" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (7 samples, 0.01%)</title><rect x="935.5" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="938.55" y="383.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul&gt;::operator (8 samples, 0.01%)</title><rect x="194.9" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="197.87" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (12 samples, 0.02%)</title><rect x="680.9" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="683.89" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (5 samples, 0.01%)</title><rect x="592.7" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="595.70" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (6 samples, 0.01%)</title><rect x="300.7" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="303.73" y="447.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; (8 samples, 0.01%)</title><rect x="472.9" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="475.86" y="543.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (7 samples, 0.01%)</title><rect x="263.7" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="266.75" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (6 samples, 0.01%)</title><rect x="968.7" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="971.72" y="479.5" ></text>
</g>
<g >
<title>free_pcppages_bulk (11 samples, 0.02%)</title><rect x="1176.8" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.77" y="383.5" ></text>
</g>
<g >
<title>quotient_graph_refinement::perform_a_two_way_refinement (86 samples, 0.16%)</title><rect x="203.2" y="229" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.18" y="239.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (254 samples, 0.47%)</title><rect x="706.9" y="437" width="5.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="709.90" y="447.5" ></text>
</g>
<g >
<title>std::__deque_buf_size (5 samples, 0.01%)</title><rect x="49.5" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="52.52" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (243 samples, 0.45%)</title><rect x="1091.0" y="517" width="5.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1093.96" y="527.5" ></text>
</g>
<g >
<title>native_write_msr (21 samples, 0.04%)</title><rect x="107.7" y="133" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.71" y="143.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (16 samples, 0.03%)</title><rect x="272.8" y="485" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="275.83" y="495.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (23 samples, 0.04%)</title><rect x="228.3" y="181" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="231.35" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (10 samples, 0.02%)</title><rect x="208.4" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.40" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (54 samples, 0.10%)</title><rect x="1085.1" y="517" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1088.10" y="527.5" ></text>
</g>
<g >
<title>__GI___libc_write (8 samples, 0.01%)</title><rect x="1170.1" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="511.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple (49 samples, 0.09%)</title><rect x="1133.6" y="469" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1136.62" y="479.5" ></text>
</g>
<g >
<title>complete_boundary::insert (26 samples, 0.05%)</title><rect x="205.3" y="277" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.31" y="287.5" ></text>
</g>
<g >
<title>page_fault (10 samples, 0.02%)</title><rect x="391.2" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="394.20" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (100 samples, 0.19%)</title><rect x="930.0" y="389" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="933.01" y="399.5" ></text>
</g>
<g >
<title>sock_recvmsg (38 samples, 0.07%)</title><rect x="108.9" y="341" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (8 samples, 0.01%)</title><rect x="469.1" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="472.07" y="479.5" ></text>
</g>
<g >
<title>malloc_consolidate (50 samples, 0.09%)</title><rect x="916.9" y="389" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="919.90" y="399.5" ></text>
</g>
<g >
<title>load_elf_binary (5 samples, 0.01%)</title><rect x="14.1" y="565" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.14" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (69 samples, 0.13%)</title><rect x="998.1" y="549" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1001.10" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt;::_Node_iterator_base (17 samples, 0.03%)</title><rect x="541.0" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="544.02" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::_Node_iterator (23 samples, 0.04%)</title><rect x="552.0" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="554.99" y="479.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeLabel (191 samples, 0.36%)</title><rect x="330.3" y="533" width="4.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="333.32" y="543.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.01%)</title><rect x="1115.9" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.94" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (78 samples, 0.15%)</title><rect x="538.3" y="501" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="541.33" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (10 samples, 0.02%)</title><rect x="158.9" y="101" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.92" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (15 samples, 0.03%)</title><rect x="603.2" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="606.17" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;::_M_valptr (6 samples, 0.01%)</title><rect x="131.6" y="213" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="134.58" y="223.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_M_head (26 samples, 0.05%)</title><rect x="617.5" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="620.46" y="383.5" ></text>
</g>
<g >
<title>free_unref_page_commit (12 samples, 0.02%)</title><rect x="1176.8" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.75" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="208.0" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.00" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false, false&gt;::_Node_iterator (5 samples, 0.01%)</title><rect x="464.0" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="467.02" y="495.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned long long const, long&gt; (11 samples, 0.02%)</title><rect x="63.3" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="66.32" y="639.5" ></text>
</g>
<g >
<title>_int_malloc (24 samples, 0.04%)</title><rect x="92.9" y="629" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="95.88" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, compare_hashed_edge, unsigned long, true&gt;::_S_equals (41 samples, 0.08%)</title><rect x="286.0" y="437" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="289.03" y="447.5" ></text>
</g>
<g >
<title>__schedule (8 samples, 0.01%)</title><rect x="1170.1" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.10" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="166.4" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="169.41" y="351.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (82 samples, 0.15%)</title><rect x="273.2" y="453" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.18" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (5 samples, 0.01%)</title><rect x="409.9" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.93" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (54 samples, 0.10%)</title><rect x="348.9" y="469" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="351.87" y="479.5" ></text>
</g>
<g >
<title>hmap_wrapper&lt;linear_probing_hashmap&gt;::clear (893 samples, 1.67%)</title><rect x="635.0" y="549" width="19.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="637.96" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false, false&gt;::operator (15 samples, 0.03%)</title><rect x="1135.4" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1138.45" y="527.5" ></text>
</g>
<g >
<title>__alloc_pages_slowpath (6 samples, 0.01%)</title><rect x="471.2" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.19" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (5 samples, 0.01%)</title><rect x="230.2" y="133" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="233.24" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (9 samples, 0.02%)</title><rect x="840.4" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="843.37" y="495.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, unsigned long long const&amp;, false&gt;::_M_head (6 samples, 0.01%)</title><rect x="1133.5" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1136.48" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (6 samples, 0.01%)</title><rect x="1076.8" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1079.81" y="447.5" ></text>
</g>
<g >
<title>std::_Deque_iterator&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt;::_S_buffer_size (31 samples, 0.06%)</title><rect x="306.2" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="309.22" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (73 samples, 0.14%)</title><rect x="1128.8" y="453" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1131.77" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (359 samples, 0.67%)</title><rect x="948.7" y="421" width="7.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="951.68" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (57 samples, 0.11%)</title><rect x="278.3" y="485" width="1.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="281.30" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (22 samples, 0.04%)</title><rect x="788.2" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="791.15" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (9 samples, 0.02%)</title><rect x="1096.1" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1099.12" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (30 samples, 0.06%)</title><rect x="402.5" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.53" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (27 samples, 0.05%)</title><rect x="721.2" y="389" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="724.19" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, false, true&gt;::operator (10 samples, 0.02%)</title><rect x="281.2" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="284.18" y="527.5" ></text>
</g>
<g >
<title>finish_task_switch (30 samples, 0.06%)</title><rect x="12.9" y="421" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.93" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::size (9 samples, 0.02%)</title><rect x="1001.7" y="549" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1004.69" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (9 samples, 0.02%)</title><rect x="408.9" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.87" y="463.5" ></text>
</g>
<g >
<title>complete_boundary::contains (9 samples, 0.02%)</title><rect x="203.0" y="213" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.98" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (120 samples, 0.22%)</title><rect x="260.3" y="485" width="2.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="263.29" y="495.5" ></text>
</g>
<g >
<title>node_ordering::order_nodes_degree (72 samples, 0.13%)</title><rect x="689.8" y="325" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="692.76" y="335.5" ></text>
</g>
<g >
<title>__do_fault (12 samples, 0.02%)</title><rect x="111.4" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.44" y="463.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (254 samples, 0.47%)</title><rect x="994.9" y="597" width="5.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.93" y="607.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (5 samples, 0.01%)</title><rect x="403.2" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.21" y="399.5" ></text>
</g>
<g >
<title>openaux (5 samples, 0.01%)</title><rect x="15.4" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="18.42" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (65 samples, 0.12%)</title><rect x="404.6" y="485" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="407.62" y="495.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::operator[] (198 samples, 0.37%)</title><rect x="308.4" y="517" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="311.36" y="527.5" ></text>
</g>
<g >
<title>contraction::contract_clustering (1,823 samples, 3.41%)</title><rect x="125.1" y="389" width="40.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="128.08" y="399.5" >con..</text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (21 samples, 0.04%)</title><rect x="685.6" y="277" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="688.59" y="287.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (6 samples, 0.01%)</title><rect x="371.4" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="374.38" y="367.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (5 samples, 0.01%)</title><rect x="219.3" y="133" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="222.29" y="143.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (15 samples, 0.03%)</title><rect x="398.0" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="401.01" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_state (16 samples, 0.03%)</title><rect x="1122.8" y="501" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1125.79" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.02%)</title><rect x="519.7" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="522.66" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeLabel (6 samples, 0.01%)</title><rect x="533.4" y="565" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="536.43" y="575.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (12 samples, 0.02%)</title><rect x="684.2" y="245" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="687.20" y="255.5" ></text>
</g>
<g >
<title>graph_access::getNodeWeight (29 samples, 0.05%)</title><rect x="167.0" y="373" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="170.05" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10 samples, 0.02%)</title><rect x="144.1" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="147.10" y="287.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (5 samples, 0.01%)</title><rect x="106.7" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.65" y="543.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, hashed_edge const&amp;&gt;::_M_head (5 samples, 0.01%)</title><rect x="494.4" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="497.44" y="399.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (5 samples, 0.01%)</title><rect x="512.9" y="245" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.89" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_default_append (11 samples, 0.02%)</title><rect x="513.2" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="516.22" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (26 samples, 0.05%)</title><rect x="468.5" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="471.50" y="463.5" ></text>
</g>
<g >
<title>get_page_from_freelist (15 samples, 0.03%)</title><rect x="1168.0" y="261" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1170.98" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt;::_M_next (7 samples, 0.01%)</title><rect x="471.9" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.91" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (29 samples, 0.05%)</title><rect x="119.0" y="533" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="543.5" ></text>
</g>
<g >
<title>_do_fork (7 samples, 0.01%)</title><rect x="10.9" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.88" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_poll (57 samples, 0.11%)</title><rect x="920.4" y="389" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="923.38" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (14 samples, 0.03%)</title><rect x="523.0" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="525.96" y="431.5" ></text>
</g>
<g >
<title>complete_boundary::insert (9 samples, 0.02%)</title><rect x="215.1" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="239.5" ></text>
</g>
<g >
<title>quality_metrics::edge_cut (12 samples, 0.02%)</title><rect x="238.5" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.49" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (10 samples, 0.02%)</title><rect x="229.0" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="231.97" y="175.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (12 samples, 0.02%)</title><rect x="218.9" y="149" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.94" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (22 samples, 0.04%)</title><rect x="1157.5" y="533" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1160.51" y="543.5" ></text>
</g>
<g >
<title>parallel_graph_access::setSecondPartitionIndex (49 samples, 0.09%)</title><rect x="1157.1" y="565" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1160.14" y="575.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (26 samples, 0.05%)</title><rect x="13.0" y="357" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="16.00" y="367.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (100 samples, 0.19%)</title><rect x="698.5" y="341" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="701.48" y="351.5" ></text>
</g>
<g >
<title>edge_ratings::rate (5 samples, 0.01%)</title><rect x="215.6" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.59" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (10 samples, 0.02%)</title><rect x="689.5" y="325" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="692.53" y="335.5" ></text>
</g>
<g >
<title>ksys_read (19 samples, 0.04%)</title><rect x="108.4" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (28 samples, 0.05%)</title><rect x="954.2" y="373" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="957.19" y="383.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::operator* (97 samples, 0.18%)</title><rect x="862.1" y="501" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="865.15" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::at (24 samples, 0.04%)</title><rect x="138.9" y="325" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="141.92" y="335.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (48 samples, 0.09%)</title><rect x="1166.6" y="245" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1169.61" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (11 samples, 0.02%)</title><rect x="397.5" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.50" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1,024 samples, 1.91%)</title><rect x="572.9" y="485" width="22.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="575.91" y="495.5" >s..</text>
</g>
<g >
<title>std::__detail::_Select1st::operator (18 samples, 0.03%)</title><rect x="19.2" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="22.21" y="639.5" ></text>
</g>
<g >
<title>std::move_iterator&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*&gt;::base (6 samples, 0.01%)</title><rect x="293.5" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.55" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (24 samples, 0.04%)</title><rect x="395.8" y="501" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="398.76" y="511.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::uniform_int_distribution (10 samples, 0.02%)</title><rect x="992.2" y="549" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.22" y="559.5" ></text>
</g>
<g >
<title>__GI___poll (24 samples, 0.04%)</title><rect x="254.7" y="357" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="257.73" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_valptr (7 samples, 0.01%)</title><rect x="153.8" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="156.80" y="319.5" ></text>
</g>
<g >
<title>get_page_from_freelist (7 samples, 0.01%)</title><rect x="1163.0" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1165.98" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::size (43 samples, 0.08%)</title><rect x="1143.2" y="549" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1146.18" y="559.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (51 samples, 0.10%)</title><rect x="993.3" y="565" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="996.32" y="575.5" ></text>
</g>
<g >
<title>compare_boundary_pair::operator (7 samples, 0.01%)</title><rect x="146.0" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="149.04" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.01%)</title><rect x="838.9" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="841.87" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (5 samples, 0.01%)</title><rect x="1155.6" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1158.64" y="527.5" ></text>
</g>
<g >
<title>_dl_map_segments (7 samples, 0.01%)</title><rect x="1170.6" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1173.63" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt; &gt;::end (13 samples, 0.02%)</title><rect x="927.9" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="930.88" y="479.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (5 samples, 0.01%)</title><rect x="226.8" y="165" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="229.83" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (19 samples, 0.04%)</title><rect x="1077.0" y="453" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1079.97" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (21 samples, 0.04%)</title><rect x="254.8" y="341" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="257.76" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (19 samples, 0.04%)</title><rect x="602.5" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="605.53" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_default_append (19 samples, 0.04%)</title><rect x="471.1" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.08" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (6 samples, 0.01%)</title><rect x="204.7" y="133" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.72" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (11 samples, 0.02%)</title><rect x="866.5" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.49" y="527.5" ></text>
</g>
<g >
<title>graph_access::build_from_metis (90 samples, 0.17%)</title><rect x="119.9" y="485" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="122.86" y="495.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;parallel_contraction::compute_label_mapping (9 samples, 0.02%)</title><rect x="403.6" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="406.65" y="431.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (8 samples, 0.01%)</title><rect x="1146.6" y="325" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.64" y="335.5" ></text>
</g>
<g >
<title>__lock_page_killable (19 samples, 0.04%)</title><rect x="1171.4" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.44" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (17 samples, 0.03%)</title><rect x="1117.5" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1120.50" y="447.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (42 samples, 0.08%)</title><rect x="521.4" y="533" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="524.44" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_v (13 samples, 0.02%)</title><rect x="1100.7" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1103.66" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (7 samples, 0.01%)</title><rect x="230.2" y="149" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="233.20" y="159.5" ></text>
</g>
<g >
<title>schedule (9 samples, 0.02%)</title><rect x="108.2" y="293" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.24" y="303.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (11 samples, 0.02%)</title><rect x="227.2" y="197" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.25" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (50 samples, 0.09%)</title><rect x="287.3" y="469" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="290.29" y="479.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (8 samples, 0.01%)</title><rect x="216.0" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="219.01" y="239.5" ></text>
</g>
<g >
<title>__lru_cache_add (5 samples, 0.01%)</title><rect x="1138.9" y="277" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.91" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (6 samples, 0.01%)</title><rect x="135.2" y="277" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="138.24" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (7 samples, 0.01%)</title><rect x="464.0" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="466.98" y="511.5" ></text>
</g>
<g >
<title>std::operator-&lt;unsigned long long, unsigned long long&amp;, unsigned long long*&gt; (6 samples, 0.01%)</title><rect x="100.6" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="103.59" y="639.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.31 (16 samples, 0.03%)</title><rect x="1171.5" y="261" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.46" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (83 samples, 0.16%)</title><rect x="838.5" y="469" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="841.50" y="479.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_PEID_from_range_array (97 samples, 0.18%)</title><rect x="1053.9" y="549" width="2.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1056.89" y="559.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (35 samples, 0.07%)</title><rect x="1172.2" y="645" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1175.17" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, bool&gt;, false&gt; &gt;::allocate (13 samples, 0.02%)</title><rect x="406.9" y="469" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.93" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::_M_ptr (9 samples, 0.02%)</title><rect x="281.2" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="284.21" y="495.5" ></text>
</g>
<g >
<title>parallel_graph_access::get_first_invalid_edge (14 samples, 0.03%)</title><rect x="830.7" y="549" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="833.67" y="559.5" ></text>
</g>
<g >
<title>prep_new_page (10 samples, 0.02%)</title><rect x="512.7" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.67" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long&gt; (13 samples, 0.02%)</title><rect x="431.8" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="434.75" y="511.5" ></text>
</g>
<g >
<title>coarsening::perform_coarsening (3,402 samples, 6.35%)</title><rect x="125.1" y="421" width="75.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="128.08" y="431.5" >coarseni..</text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, long&gt; (23 samples, 0.04%)</title><rect x="571.1" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="574.06" y="415.5" ></text>
</g>
<g >
<title>do_sys_poll (47 samples, 0.09%)</title><rect x="920.5" y="373" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="923.49" y="383.5" ></text>
</g>
<g >
<title>schedule (22 samples, 0.04%)</title><rect x="112.8" y="389" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="399.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;hashed_edge const, data_hashed_edge, hash_hashed_edge, compare_hashed_edge, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt; &gt;::~unordered_map (234 samples, 0.44%)</title><rect x="526.1" y="549" width="5.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (10 samples, 0.02%)</title><rect x="96.6" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="99.58" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="551.0" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="554.02" y="415.5" ></text>
</g>
<g >
<title>std::uniform_int_distribution&lt;short&gt;::uniform_int_distribution (5 samples, 0.01%)</title><rect x="101.5" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="104.50" y="639.5" ></text>
</g>
<g >
<title>PartialBoundary::contains (25 samples, 0.05%)</title><rect x="208.6" y="229" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.64" y="239.5" ></text>
</g>
<g >
<title>[hydra_pmi_proxy] (166 samples, 0.31%)</title><rect x="10.0" y="645" width="3.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.04" y="655.5" ></text>
</g>
<g >
<title>__libc_start_main (165 samples, 0.31%)</title><rect x="10.1" y="629" width="3.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="13.07" y="639.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (28 samples, 0.05%)</title><rect x="921.6" y="421" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="924.64" y="431.5" ></text>
</g>
<g >
<title>__do_page_fault (14 samples, 0.03%)</title><rect x="471.2" y="373" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="474.16" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::_M_default_append (25 samples, 0.05%)</title><rect x="969.0" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="971.98" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::operator[] (32 samples, 0.06%)</title><rect x="829.6" y="517" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="832.63" y="527.5" ></text>
</g>
<g >
<title>__do_page_fault (12 samples, 0.02%)</title><rect x="1142.8" y="341" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.81" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (165 samples, 0.31%)</title><rect x="707.8" y="405" width="3.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="710.76" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (50 samples, 0.09%)</title><rect x="567.0" y="453" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="569.98" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_v (8 samples, 0.01%)</title><rect x="147.4" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="150.41" y="319.5" ></text>
</g>
<g >
<title>parallel_graph_access::setEdgeWeight (8 samples, 0.01%)</title><rect x="280.7" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="283.72" y="527.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned long long&gt;::operator (11 samples, 0.02%)</title><rect x="405.8" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="408.77" y="447.5" ></text>
</g>
<g >
<title>elf_dynamic_do_Rela (49 samples, 0.09%)</title><rect x="1171.0" y="549" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.00" y="559.5" ></text>
</g>
<g >
<title>__do_page_fault (32 samples, 0.06%)</title><rect x="112.7" y="517" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.72" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (94 samples, 0.18%)</title><rect x="827.6" y="501" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="830.56" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (44 samples, 0.08%)</title><rect x="716.5" y="373" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="719.47" y="383.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (27 samples, 0.05%)</title><rect x="107.6" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.58" y="447.5" ></text>
</g>
<g >
<title>[mpiexec.hydra] (44 samples, 0.08%)</title><rect x="14.3" y="581" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.32" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (7 samples, 0.01%)</title><rect x="935.3" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="938.30" y="383.5" ></text>
</g>
<g >
<title>two_way_fm::assert_only_boundary_nodes (7 samples, 0.01%)</title><rect x="203.4" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="206.42" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (6 samples, 0.01%)</title><rect x="148.3" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="151.27" y="335.5" ></text>
</g>
<g >
<title>size_constraint_label_propagation::match_internal (53 samples, 0.10%)</title><rect x="215.7" y="261" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.70" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (5 samples, 0.01%)</title><rect x="570.4" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="573.40" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (29 samples, 0.05%)</title><rect x="258.8" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="261.83" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;refinementNode, std::allocator&lt;refinementNode&gt; &gt;::_M_range_check (10 samples, 0.02%)</title><rect x="149.8" y="325" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="152.83" y="335.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::size (43 samples, 0.08%)</title><rect x="306.0" y="485" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="308.96" y="495.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (10 samples, 0.02%)</title><rect x="1171.1" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.13" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (5 samples, 0.01%)</title><rect x="106.5" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.54" y="463.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (12 samples, 0.02%)</title><rect x="512.6" y="261" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="515.63" y="271.5" ></text>
</g>
<g >
<title>balance_management_coarsening::balance_management_coarsening (133 samples, 0.25%)</title><rect x="300.2" y="533" width="3.0" height="15.0" fill="rgb(0,171,255)" rx="2" ry="2" />
<text  x="303.23" y="543.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (206 samples, 0.38%)</title><rect x="692.3" y="373" width="4.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="695.27" y="383.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (5 samples, 0.01%)</title><rect x="12.6" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.58" y="383.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (5 samples, 0.01%)</title><rect x="1163.4" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.37" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long long const, unsigned long long&gt;::pair&lt;unsigned long long const&amp;&gt; (84 samples, 0.16%)</title><rect x="1131.8" y="469" width="1.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1134.76" y="479.5" ></text>
</g>
<g >
<title>__do_page_fault (10 samples, 0.02%)</title><rect x="391.2" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="394.20" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_erase (6 samples, 0.01%)</title><rect x="336.0" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="338.96" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;::_M_v (5 samples, 0.01%)</title><rect x="146.2" y="245" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="149.20" y="255.5" ></text>
</g>
<g >
<title>ret_from_intr (6 samples, 0.01%)</title><rect x="922.6" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.56" y="463.5" ></text>
</g>
<g >
<title>release_pages (29 samples, 0.05%)</title><rect x="1176.5" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.47" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (25 samples, 0.05%)</title><rect x="52.6" y="629" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="55.56" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (52 samples, 0.10%)</title><rect x="1104.8" y="437" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1107.83" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (67 samples, 0.13%)</title><rect x="916.5" y="421" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="919.55" y="431.5" ></text>
</g>
<g >
<title>do_syscall_64 (38 samples, 0.07%)</title><rect x="108.9" y="453" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.86" y="463.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;AdditionalNonLocalNodeData*&gt;, AdditionalNonLocalNodeData*&gt; (25 samples, 0.05%)</title><rect x="1138.6" y="485" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1141.64" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::push_back (53 samples, 0.10%)</title><rect x="294.1" y="517" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="297.08" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (147 samples, 0.27%)</title><rect x="697.4" y="373" width="3.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="700.45" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::emplace_back&lt;unsigned long long&gt; (52 samples, 0.10%)</title><rect x="865.2" y="501" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="868.23" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (12 samples, 0.02%)</title><rect x="407.0" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="409.96" y="447.5" ></text>
</g>
<g >
<title>linear_probing_hashmap::clear (858 samples, 1.60%)</title><rect x="635.1" y="533" width="18.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="638.07" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (123 samples, 0.23%)</title><rect x="467.5" y="501" width="2.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="470.53" y="511.5" ></text>
</g>
<g >
<title>parallel_mh_async::collect_best_partitioning (117 samples, 0.22%)</title><rect x="122.3" y="485" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="71.4" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="74.41" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (10 samples, 0.02%)</title><rect x="287.1" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="290.07" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;unsigned long long, unsigned long long&gt; const&amp;&gt; (127 samples, 0.24%)</title><rect x="501.5" y="517" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="504.47" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long long const&amp;&gt; (11 samples, 0.02%)</title><rect x="675.4" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="678.41" y="447.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;unsigned long long*, unsigned long long*, std::allocator&lt;unsigned long long&gt; &gt; (56 samples, 0.10%)</title><rect x="512.0" y="501" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="514.99" y="511.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (5 samples, 0.01%)</title><rect x="124.7" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="127.73" y="319.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (29 samples, 0.05%)</title><rect x="119.0" y="405" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.98" y="415.5" ></text>
</g>
<g >
<title>std::swap&lt;unsigned long long&gt; (25 samples, 0.05%)</title><rect x="706.4" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="709.35" y="383.5" ></text>
</g>
<g >
<title>finish_task_switch (37 samples, 0.07%)</title><rect x="108.9" y="245" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.88" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (209 samples, 0.39%)</title><rect x="1130.5" y="501" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1133.51" y="511.5" ></text>
</g>
<g >
<title>two_way_fm::perform_refinement (292 samples, 0.55%)</title><rect x="218.7" y="197" width="6.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.72" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (110 samples, 0.21%)</title><rect x="526.1" y="453" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="529.09" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (8 samples, 0.01%)</title><rect x="470.9" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="473.88" y="511.5" ></text>
</g>
<g >
<title>filemap_fault (9 samples, 0.02%)</title><rect x="108.2" y="341" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.24" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (197 samples, 0.37%)</title><rect x="1091.8" y="501" width="4.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1094.78" y="511.5" ></text>
</g>
<g >
<title>handle_mm_fault (69 samples, 0.13%)</title><rect x="1159.9" y="389" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1162.91" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%)</title><rect x="225.9" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.90" y="159.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (25 samples, 0.05%)</title><rect x="221.6" y="149" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="224.63" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (11 samples, 0.02%)</title><rect x="205.6" y="197" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.58" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (9 samples, 0.02%)</title><rect x="265.2" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="268.18" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (69 samples, 0.13%)</title><rect x="832.7" y="453" width="1.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="835.72" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, bool&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, bool&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (8 samples, 0.01%)</title><rect x="404.4" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="407.38" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (25 samples, 0.05%)</title><rect x="788.6" y="437" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="791.64" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (37 samples, 0.07%)</title><rect x="1140.1" y="549" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1143.12" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned long long const, long&gt;, false, false&gt;::_Node_iterator (7 samples, 0.01%)</title><rect x="99.7" y="629" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="102.69" y="639.5" ></text>
</g>
<g >
<title>graph_access::getEdgeWeight (271 samples, 0.51%)</title><rect x="188.1" y="357" width="6.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="191.12" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::operator[] (26 samples, 0.05%)</title><rect x="690.7" y="293" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="693.75" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (40 samples, 0.07%)</title><rect x="315.2" y="437" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="318.19" y="447.5" ></text>
</g>
<g >
<title>ksys_read (26 samples, 0.05%)</title><rect x="107.6" y="389" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (26 samples, 0.05%)</title><rect x="521.8" y="517" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="524.79" y="527.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; (13 samples, 0.02%)</title><rect x="604.1" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="607.06" y="479.5" ></text>
</g>
<g >
<title>clear_page_erms (10 samples, 0.02%)</title><rect x="1147.9" y="229" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1150.92" y="239.5" ></text>
</g>
<g >
<title>handle_irq_event (6 samples, 0.01%)</title><rect x="922.6" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="925.56" y="415.5" ></text>
</g>
<g >
<title>std::__move_median_to_first&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="688.7" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="691.68" y="367.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (231 samples, 0.43%)</title><rect x="701.8" y="405" width="5.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="704.81" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (11 samples, 0.02%)</title><rect x="424.5" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="427.50" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (9 samples, 0.02%)</title><rect x="16.9" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="19.88" y="639.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (8 samples, 0.01%)</title><rect x="1161.0" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.04" y="367.5" ></text>
</g>
<g >
<title>io_schedule (19 samples, 0.04%)</title><rect x="1171.4" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.44" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_ptr (10 samples, 0.02%)</title><rect x="958.2" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="961.18" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const, unsigned long long&gt; (22 samples, 0.04%)</title><rect x="1080.8" y="437" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1083.76" y="447.5" ></text>
</g>
<g >
<title>std::fill_n&lt;unsigned long long*, unsigned long, unsigned long long&gt; (10 samples, 0.02%)</title><rect x="969.3" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="972.31" y="431.5" ></text>
</g>
<g >
<title>balance_management_coarsening::setBlockSize (427 samples, 0.80%)</title><rect x="831.5" y="533" width="9.4" height="15.0" fill="rgb(0,171,255)" rx="2" ry="2" />
<text  x="834.51" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (85 samples, 0.16%)</title><rect x="820.9" y="517" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="823.91" y="527.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt; &gt; (22 samples, 0.04%)</title><rect x="504.6" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.58" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (102 samples, 0.19%)</title><rect x="673.6" y="469" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="676.60" y="479.5" ></text>
</g>
<g >
<title>__libc_write (5 samples, 0.01%)</title><rect x="14.4" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.39" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="933.2" y="389" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="936.21" y="399.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeWeight (5 samples, 0.01%)</title><rect x="533.3" y="565" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="536.32" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;hashed_edge const&amp;&gt;::tuple (11 samples, 0.02%)</title><rect x="264.3" y="437" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="267.34" y="447.5" ></text>
</g>
<g >
<title>__do_page_fault (22 samples, 0.04%)</title><rect x="1171.4" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.40" y="495.5" ></text>
</g>
<g >
<title>__schedule (24 samples, 0.04%)</title><rect x="107.6" y="229" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.65" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (81 samples, 0.15%)</title><rect x="381.6" y="469" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="384.56" y="479.5" ></text>
</g>
<g >
<title>PartialBoundary::insert (544 samples, 1.02%)</title><rect x="126.2" y="341" width="12.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="129.23" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (77 samples, 0.14%)</title><rect x="298.3" y="501" width="1.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="301.29" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::getNodeDegree (53 samples, 0.10%)</title><rect x="690.2" y="309" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="693.15" y="319.5" ></text>
</g>
<g >
<title>parallel_contraction::build_quotient_graph_locally (1,195 samples, 2.23%)</title><rect x="371.6" y="549" width="26.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="374.58" y="559.5" >p..</text>
</g>
<g >
<title>schedule (7 samples, 0.01%)</title><rect x="111.5" y="373" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="383.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (38 samples, 0.07%)</title><rect x="696.0" y="357" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="698.97" y="367.5" ></text>
</g>
<g >
<title>handle_fasteoi_irq (7 samples, 0.01%)</title><rect x="1041.4" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1044.44" y="367.5" ></text>
</g>
<g >
<title>page_fault (12 samples, 0.02%)</title><rect x="1115.7" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1118.67" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (5 samples, 0.01%)</title><rect x="429.4" y="517" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="432.35" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10 samples, 0.02%)</title><rect x="595.7" y="485" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="598.72" y="495.5" ></text>
</g>
<g >
<title>graph_access::getEdgeTarget (6 samples, 0.01%)</title><rect x="218.5" y="197" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="221.45" y="207.5" ></text>
</g>
<g >
<title>two_way_fm::int_ext_degree (16 samples, 0.03%)</title><rect x="211.0" y="213" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="214.05" y="223.5" ></text>
</g>
<g >
<title>parallel_graph_access::update_ghost_node_data (4,670 samples, 8.72%)</title><rect x="867.1" y="549" width="102.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="870.11" y="559.5" >parallel_gra..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (6 samples, 0.01%)</title><rect x="133.5" y="245" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="136.55" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, bool&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (19 samples, 0.04%)</title><rect x="410.0" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="413.04" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;::_M_valptr (8 samples, 0.01%)</title><rect x="1100.8" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1103.77" y="447.5" ></text>
</g>
<g >
<title>two_way_fm::move_node_back (96 samples, 0.18%)</title><rect x="223.0" y="181" width="2.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="226.04" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (63 samples, 0.12%)</title><rect x="1106.1" y="453" width="1.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1109.09" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::~_Vector_base (20 samples, 0.04%)</title><rect x="504.6" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="507.62" y="447.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (28 samples, 0.05%)</title><rect x="110.0" y="341" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="351.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (1,987 samples, 3.71%)</title><rect x="678.8" y="501" width="43.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="681.84" y="511.5" >std:..</text>
</g>
<g >
<title>__libc_read (28 samples, 0.05%)</title><rect x="110.0" y="501" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="112.98" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets (109 samples, 0.20%)</title><rect x="495.8" y="469" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (38 samples, 0.07%)</title><rect x="126.8" y="293" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="129.78" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (6 samples, 0.01%)</title><rect x="280.8" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="283.76" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::at (33 samples, 0.06%)</title><rect x="856.0" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="858.97" y="511.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (30 samples, 0.06%)</title><rect x="402.5" y="453" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="405.53" y="463.5" ></text>
</g>
<g >
<title>error_entry (7 samples, 0.01%)</title><rect x="111.1" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.08" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;Node, std::allocator&lt;Node&gt; &gt;::size (9 samples, 0.02%)</title><rect x="245.1" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="248.14" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (8 samples, 0.01%)</title><rect x="992.4" y="549" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="995.44" y="559.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned long long const&amp;&gt; (9 samples, 0.02%)</title><rect x="68.0" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="70.99" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_valptr (16 samples, 0.03%)</title><rect x="98.4" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="101.37" y="639.5" ></text>
</g>
<g >
<title>std::__get_helper&lt;0ul, hashed_edge const&amp;&gt; (8 samples, 0.01%)</title><rect x="494.4" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="497.37" y="415.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned long long const&amp;&gt;::tuple (5 samples, 0.01%)</title><rect x="959.5" y="389" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="962.53" y="399.5" ></text>
</g>
<g >
<title>graph_partitioner::perform_partitioning (704 samples, 1.32%)</title><rect x="215.1" y="325" width="15.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="218.06" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::size (5 samples, 0.01%)</title><rect x="823.8" y="501" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="826.79" y="511.5" ></text>
</g>
<g >
<title>parallel_graph_access::getBlockSize (10 samples, 0.02%)</title><rect x="94.8" y="629" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="97.75" y="639.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (20 samples, 0.04%)</title><rect x="1189.0" y="613" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="623.5" ></text>
</g>
<g >
<title>do_page_fault (51 samples, 0.10%)</title><rect x="1164.0" y="309" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.99" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;::construct&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;hashed_edge const&amp;&gt;, std::tuple&lt;&gt; &gt; (70 samples, 0.13%)</title><rect x="493.4" y="469" width="1.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="496.45" y="479.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.01%)</title><rect x="614.2" y="437" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="617.17" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long long&gt; &gt;::construct&lt;unsigned long long, unsigned long long const&amp;&gt; (15 samples, 0.03%)</title><rect x="64.6" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="67.62" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (14 samples, 0.03%)</title><rect x="301.2" y="453" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="304.20" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_deallocate_buckets (86 samples, 0.16%)</title><rect x="290.2" y="485" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="293.20" y="495.5" ></text>
</g>
<g >
<title>std::_Bit_iterator::operator* (24 samples, 0.04%)</title><rect x="431.0" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="434.00" y="527.5" ></text>
</g>
<g >
<title>parallel_graph_access::getEdgeTarget (22 samples, 0.04%)</title><rect x="44.7" y="629" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="47.69" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (9 samples, 0.02%)</title><rect x="866.1" y="437" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="869.11" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (14 samples, 0.03%)</title><rect x="106.3" y="533" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.35" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;std::pair&lt;unsigned long long, unsigned long long&gt;*, std::pair&lt;unsigned long long, unsigned long long&gt;*, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt; (24 samples, 0.04%)</title><rect x="293.2" y="485" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.15" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;AdditionalNonLocalNodeData&gt;::construct&lt;AdditionalNonLocalNodeData, AdditionalNonLocalNodeData const&amp;&gt; (44 samples, 0.08%)</title><rect x="1137.4" y="517" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1140.43" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (31 samples, 0.06%)</title><rect x="396.5" y="485" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="399.51" y="495.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (6 samples, 0.01%)</title><rect x="1176.6" y="405" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.60" y="415.5" ></text>
</g>
<g >
<title>complete_boundary::contains (30 samples, 0.06%)</title><rect x="208.6" y="245" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="211.64" y="255.5" ></text>
</g>
<g >
<title>complete_boundary::contains (19 samples, 0.04%)</title><rect x="225.7" y="229" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="228.70" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (6 samples, 0.01%)</title><rect x="262.1" y="421" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="265.07" y="431.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (26 samples, 0.05%)</title><rect x="107.6" y="293" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="110.60" y="303.5" ></text>
</g>
<g >
<title>ghost_node_communication::update_ghost_node_data (4,662 samples, 8.71%)</title><rect x="867.3" y="533" width="102.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="870.28" y="543.5" >ghost_node_c..</text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::size (93 samples, 0.17%)</title><rect x="184.6" y="309" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="187.60" y="319.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (105 samples, 0.20%)</title><rect x="400.2" y="501" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="403.21" y="511.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (26 samples, 0.05%)</title><rect x="717.9" y="421" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="720.88" y="431.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (51 samples, 0.10%)</title><rect x="11.3" y="453" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="14.30" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::at (9 samples, 0.02%)</title><rect x="212.4" y="181" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="215.41" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt;, true&gt;::_S_get (5 samples, 0.01%)</title><rect x="933.6" y="373" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="936.56" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned long long const, long&gt;, false&gt; &gt; &gt;::_M_deallocate_node (51 samples, 0.10%)</title><rect x="834.5" y="453" width="1.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="837.53" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (886 samples, 1.66%)</title><rect x="1065.0" y="517" width="19.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1068.00" y="527.5" ></text>
</g>
<g >
<title>__libc_read (9 samples, 0.02%)</title><rect x="12.5" y="549" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="15.49" y="559.5" ></text>
</g>
<g >
<title>operator new (8 samples, 0.01%)</title><rect x="242.4" y="405" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.39" y="415.5" ></text>
</g>
<g >
<title>initial_partitioning::perform_initial_partitioning (107 samples, 0.20%)</title><rect x="202.7" y="309" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.71" y="319.5" ></text>
</g>
<g >
<title>PMPI_Reduce (9 samples, 0.02%)</title><rect x="113.8" y="597" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.75" y="607.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (376 samples, 0.70%)</title><rect x="444.1" y="453" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="447.07" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (131 samples, 0.24%)</title><rect x="239.0" y="373" width="2.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="241.95" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::operator[] (2,257 samples, 4.22%)</title><rect x="1087.0" y="549" width="49.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1089.95" y="559.5" >std::..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.01%)</title><rect x="217.3" y="117" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="220.28" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::at (22 samples, 0.04%)</title><rect x="1155.7" y="549" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1158.75" y="559.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, unsigned long long const&amp;&gt;::_M_head (25 samples, 0.05%)</title><rect x="619.2" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="622.20" y="415.5" ></text>
</g>
<g >
<title>MPI_Probe (365 samples, 0.68%)</title><rect x="412.1" y="533" width="8.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="415.07" y="543.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (270 samples, 0.50%)</title><rect x="712.5" y="453" width="6.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="715.50" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, unsigned long, false&gt;::_S_equals (40 samples, 0.07%)</title><rect x="466.3" y="437" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="469.27" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt; &gt;::_M_node_allocator (6 samples, 0.01%)</title><rect x="492.1" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="495.10" y="495.5" ></text>
</g>
<g >
<title>MPI_Bcast (43 samples, 0.08%)</title><rect x="242.7" y="501" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.70" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;boundary_pair const, data_boundary_pair, hash_boundary_pair, compare_boundary_pair, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt; &gt;::operator[] (174 samples, 0.33%)</title><rect x="150.1" y="357" width="3.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="153.14" y="367.5" ></text>
</g>
<g >
<title>page_cache_sync_readahead (5 samples, 0.01%)</title><rect x="1169.0" y="357" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1172.04" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (24 samples, 0.04%)</title><rect x="713.7" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="716.69" y="415.5" ></text>
</g>
<g >
<title>std::deque&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::end (14 samples, 0.03%)</title><rect x="65.1" y="629" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="68.15" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (42 samples, 0.08%)</title><rect x="396.3" y="501" width="0.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="399.29" y="511.5" ></text>
</g>
<g >
<title>hmap_wrapper&lt;linear_probing_hashmap&gt;::operator[] (204 samples, 0.38%)</title><rect x="308.2" y="533" width="4.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="311.23" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (7 samples, 0.01%)</title><rect x="133.2" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="136.19" y="239.5" ></text>
</g>
<g >
<title>std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (5 samples, 0.01%)</title><rect x="312.7" y="453" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="315.73" y="463.5" ></text>
</g>
<g >
<title>page_fault (46 samples, 0.09%)</title><rect x="610.0" y="389" width="1.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="613.01" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (89 samples, 0.17%)</title><rect x="543.9" y="453" width="1.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="546.88" y="463.5" ></text>
</g>
<g >
<title>parallel_graph_access::getTargetPE (11 samples, 0.02%)</title><rect x="295.7" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="298.69" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::allocator&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt; &gt;, std::__detail::_Select1st, compare_hashed_edge, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (157 samples, 0.29%)</title><rect x="296.5" y="517" width="3.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="299.52" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;hashed_edge const, std::pair&lt;hashed_edge const, data_hashed_edge&gt;, std::__detail::_Select1st, hash_hashed_edge, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (15 samples, 0.03%)</title><rect x="388.7" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="391.75" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator* (8 samples, 0.01%)</title><rect x="701.1" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="704.11" y="367.5" ></text>
</g>
<g >
<title>complete_boundary::~complete_boundary (502 samples, 0.94%)</title><rect x="154.1" y="373" width="11.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="157.11" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned int const, std::pair&lt;unsigned int const, is_boundary&gt;, std::allocator&lt;std::pair&lt;unsigned int const, is_boundary&gt; &gt;, std::__detail::_Select1st, compare_nodes_contains, hash_boundary_nodes, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (23 samples, 0.04%)</title><rect x="205.3" y="229" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="208.34" y="239.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (18 samples, 0.03%)</title><rect x="994.5" y="517" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="997.53" y="527.5" ></text>
</g>
<g >
<title>parallel_contraction::compute_label_mapping (594 samples, 1.11%)</title><rect x="397.9" y="549" width="13.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="400.92" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned long long, unsigned long long, std::hash&lt;unsigned long long&gt;, std::equal_to&lt;unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::end (7 samples, 0.01%)</title><rect x="278.1" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="281.10" y="511.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt; (12 samples, 0.02%)</title><rect x="686.2" y="309" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="689.16" y="319.5" ></text>
</g>
<g >
<title>PMPI_Allreduce (117 samples, 0.22%)</title><rect x="122.3" y="469" width="2.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="125.26" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (211 samples, 0.39%)</title><rect x="679.0" y="469" width="4.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="681.95" y="479.5" ></text>
</g>
<g >
<title>graph_access::getPartitionIndex (6 samples, 0.01%)</title><rect x="204.1" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="207.15" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;hashed_edge const, data_hashed_edge&gt;, true&gt; &gt;::allocate (9 samples, 0.02%)</title><rect x="289.2" y="453" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="292.23" y="463.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (14 samples, 0.03%)</title><rect x="106.3" y="469" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="109.35" y="479.5" ></text>
</g>
<g >
<title>do_signal (20 samples, 0.04%)</title><rect x="1189.0" y="597" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="607.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (281 samples, 0.52%)</title><rect x="605.3" y="421" width="6.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="608.27" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long long const&amp;&gt;, std::tuple&lt;&gt; &gt; (7 samples, 0.01%)</title><rect x="409.7" y="485" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="412.67" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (12 samples, 0.02%)</title><rect x="100.1" y="629" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="103.09" y="639.5" ></text>
</g>
<g >
<title>do_syscall_64 (6 samples, 0.01%)</title><rect x="124.6" y="293" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="127.60" y="303.5" ></text>
</g>
<g >
<title>__schedule (22 samples, 0.04%)</title><rect x="112.8" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="115.78" y="383.5" ></text>
</g>
<g >
<title>__do_page_fault (8 samples, 0.01%)</title><rect x="1171.9" y="501" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.90" y="511.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;true, Node*, Node*&gt; (21 samples, 0.04%)</title><rect x="1142.7" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1145.72" y="447.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (8 samples, 0.01%)</title><rect x="139.3" y="261" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="142.25" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (27 samples, 0.05%)</title><rect x="141.3" y="277" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="144.30" y="287.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (259 samples, 0.48%)</title><rect x="1163.5" y="549" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_M_v (21 samples, 0.04%)</title><rect x="953.7" y="373" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="956.66" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (30 samples, 0.06%)</title><rect x="394.6" y="469" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="397.57" y="479.5" ></text>
</g>
<g >
<title>do_sys_poll (5 samples, 0.01%)</title><rect x="118.8" y="325" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="121.78" y="335.5" ></text>
</g>
<g >
<title>alloc_pages_current (23 samples, 0.04%)</title><rect x="1167.9" y="293" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1170.87" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;NodeData, std::allocator&lt;NodeData&gt; &gt;::_M_range_check (9 samples, 0.02%)</title><rect x="823.7" y="517" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="826.70" y="527.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (6 samples, 0.01%)</title><rect x="273.1" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="276.05" y="479.5" ></text>
</g>
<g >
<title>unmap_vmas (20 samples, 0.04%)</title><rect x="1189.0" y="501" width="0.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1192.01" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (25 samples, 0.05%)</title><rect x="1101.0" y="453" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1104.04" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_range_check (5 samples, 0.01%)</title><rect x="210.1" y="149" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="213.05" y="159.5" ></text>
</g>
<g >
<title>new_sync_read (258 samples, 0.48%)</title><rect x="1163.5" y="405" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (11 samples, 0.02%)</title><rect x="836.5" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="839.49" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (5 samples, 0.01%)</title><rect x="1120.6" y="469" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1123.61" y="479.5" ></text>
</g>
<g >
<title>PMPI_Allreduce (376 samples, 0.70%)</title><rect x="444.1" y="533" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="447.07" y="543.5" ></text>
</g>
<g >
<title>vfs_read (258 samples, 0.48%)</title><rect x="1163.5" y="437" width="5.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.48" y="447.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;unsigned long long*, std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;node_ordering::order_nodes_degree (377 samples, 0.70%)</title><rect x="683.8" y="389" width="8.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="686.76" y="399.5" ></text>
</g>
<g >
<title>filemap_fault (20 samples, 0.04%)</title><rect x="1171.4" y="405" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.44" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (106 samples, 0.20%)</title><rect x="930.0" y="405" width="2.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="932.97" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (227 samples, 0.42%)</title><rect x="558.8" y="469" width="5.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="561.76" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="394.4" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="397.44" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (6 samples, 0.01%)</title><rect x="408.1" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.15" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt;::allocate (24 samples, 0.04%)</title><rect x="136.5" y="261" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="139.54" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;::emplace_back&lt;unsigned long long&gt; (11 samples, 0.02%)</title><rect x="242.3" y="485" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="245.32" y="495.5" ></text>
</g>
<g >
<title>schedule (9 samples, 0.02%)</title><rect x="113.5" y="421" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="116.51" y="431.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (31 samples, 0.06%)</title><rect x="1176.4" y="437" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.42" y="447.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (370 samples, 0.69%)</title><rect x="247.2" y="405" width="8.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="250.17" y="415.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (51 samples, 0.10%)</title><rect x="993.3" y="533" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="996.32" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, is_boundary&gt;, true&gt; &gt; &gt;::_M_deallocate_buckets (10 samples, 0.02%)</title><rect x="158.9" y="133" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="161.92" y="143.5" ></text>
</g>
<g >
<title>complete_boundary::update_lazy_values (22 samples, 0.04%)</title><rect x="138.2" y="341" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="141.22" y="351.5" ></text>
</g>
<g >
<title>__vfs_read (19 samples, 0.04%)</title><rect x="108.4" y="373" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="111.44" y="383.5" ></text>
</g>
<g >
<title>_int_free (109 samples, 0.20%)</title><rect x="495.8" y="405" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="498.79" y="415.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (707 samples, 1.32%)</title><rect x="21.0" y="629" width="15.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="23.98" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20 samples, 0.04%)</title><rect x="489.4" y="437" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="492.41" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_free (10 samples, 0.02%)</title><rect x="1146.6" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1149.62" y="479.5" ></text>
</g>
<g >
<title>parallel_graph_access::setNodeWeight (30 samples, 0.06%)</title><rect x="1156.5" y="565" width="0.6" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1159.47" y="575.5" ></text>
</g>
<g >
<title>complete_boundary::update_lazy_values (5 samples, 0.01%)</title><rect x="207.6" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="210.56" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;boundary_pair const, std::pair&lt;boundary_pair const, data_boundary_pair&gt;, std::allocator&lt;std::pair&lt;boundary_pair const, data_boundary_pair&gt; &gt;, std::__detail::_Select1st, compare_boundary_pair, hash_boundary_pair, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (6 samples, 0.01%)</title><rect x="206.3" y="229" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="209.26" y="239.5" ></text>
</g>
<g >
<title>__do_page_fault (51 samples, 0.10%)</title><rect x="1164.0" y="293" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1166.99" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned long long const, long&gt; &gt;::_Hash_node_value_base (36 samples, 0.07%)</title><rect x="602.2" y="453" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="605.16" y="463.5" ></text>
</g>
<g >
<title>unmap_vmas (48 samples, 0.09%)</title><rect x="1176.0" y="501" width="1.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1179.05" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;QElement&lt;maxNodeHeap::Data&gt;, std::allocator&lt;QElement&lt;maxNodeHeap::Data&gt; &gt; &gt;::emplace_back&lt;QElement&lt;maxNodeHeap::Data&gt; &gt; (8 samples, 0.01%)</title><rect x="227.0" y="165" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="230.03" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt;, std::allocator&lt;std::vector&lt;unsigned long long, std::allocator&lt;unsigned long long&gt; &gt; &gt; &gt;::operator[] (10 samples, 0.02%)</title><rect x="293.8" y="517" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.84" y="527.5" ></text>
</g>
<g >
<title>_int_malloc (14 samples, 0.03%)</title><rect x="501.8" y="421" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="504.82" y="431.5" ></text>
</g>
<g >
<title>[mpiexec.hydra] (5 samples, 0.01%)</title><rect x="14.4" y="533" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="17.39" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (6 samples, 0.01%)</title><rect x="1127.4" y="469" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1130.44" y="479.5" ></text>
</g>
<g >
<title>initial_partitioning::perform_initial_partitioning (107 samples, 0.20%)</title><rect x="202.7" y="293" width="2.4" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="205.71" y="303.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;unsigned long long const, unsigned long long&gt;, false&gt; (25 samples, 0.05%)</title><rect x="1056.1" y="549" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1059.07" y="559.5" ></text>
</g>
<g >
<title>__schedule (7 samples, 0.01%)</title><rect x="111.5" y="357" width="0.2" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="114.53" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_free (36 samples, 0.07%)</title><rect x="530.2" y="437" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="533.21" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;unsigned long long, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long, unsigned long long&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;unsigned long long, unsigned long long&gt; const&amp;&gt; (31 samples, 0.06%)</title><rect x="293.0" y="501" width="0.7" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="296.04" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 0.01%)</title><rect x="124.6" y="309" width="0.1" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="127.60" y="319.5" ></text>
</g>
<g >
<title>[libmpich.so.0.0.0] (365 samples, 0.68%)</title><rect x="412.1" y="501" width="8.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="415.07" y="511.5" ></text>
</g>
<g >
<title>std::fill_n&lt;Node*, unsigned long, Node&gt; (25 samples, 0.05%)</title><rect x="1162.0" y="469" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1164.96" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::__detail::_Select1st, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (89 samples, 0.17%)</title><rect x="595.9" y="485" width="2.0" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="598.94" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, unsigned long long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, unsigned long long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (34 samples, 0.06%)</title><rect x="408.5" y="501" width="0.8" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="411.52" y="511.5" ></text>
</g>
<g >
<title>std::_Bit_reference::operator bool (22 samples, 0.04%)</title><rect x="858.3" y="517" width="0.5" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="861.33" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long long, std::pair&lt;unsigned long long const, long&gt;, std::allocator&lt;std::pair&lt;unsigned long long const, long&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned long long&gt;, std::hash&lt;unsigned long long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::erase (222 samples, 0.41%)</title><rect x="831.9" y="501" width="4.9" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="834.88" y="511.5" ></text>
</g>
<g >
<title>finish_task_switch (16 samples, 0.03%)</title><rect x="1171.5" y="325" width="0.3" height="15.0" fill="rgb(240, 240, 240)" rx="2" ry="2" />
<text  x="1174.46" y="335.5" ></text>
</g>
</g>
</svg>
